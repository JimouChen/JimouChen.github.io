<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>并查集</title>
    <url>/2020/11/24/AndCollect/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：python实现并查集</p>
<a id="more"></a>

<h1 id="并查集模板"><a href="#并查集模板" class="headerlink" title="并查集模板"></a>并查集模板</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/11/24</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">Max = <span class="number">1000</span></span><br><span class="line">parents = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, Max)]  <span class="comment"># 初始化Max个顶点</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> parents[x] == x:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        t = find(parents[x])  <span class="comment"># 优化</span></span><br><span class="line">        parents[x] = t</span><br><span class="line">        <span class="keyword">return</span> t</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">union</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    x = find(x)</span><br><span class="line">    y = find(y)</span><br><span class="line">    <span class="keyword">if</span> x == y:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    parents[x] = y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="举例——畅通工程"><a href="#举例——畅通工程" class="headerlink" title="举例——畅通工程"></a>举例——畅通工程</h1><ul>
<li><p>问题描述</p>
<blockquote>
<p>某省调查城镇交通状况，得到现有城镇道路统计表，表中列出了每条道路直接连通的城镇。省政府“畅通工程”的目标是使全省任何两个城镇间都可以实现交通（但不一定有直接的道路相连，只要互相间接通过道路可达即可）。问最少还需要建设多少条道路？</p>
</blockquote>
</li>
<li><p>输入</p>
<blockquote>
<p>测试输入包含若干测试用例。每个测试用例的第1行给出两个正整数，分别是城镇数目N ( &lt; 1000 )和道路数目M；随后的M行对应M条道路，每行给出一对正整数，分别是该条道路直接连通的两个城镇的编号。为简单起见，城镇从1到N编号。 </p>
<pre><code>注意:两个城市之间可以有多条道路相通,也就是说
3 3
1 2
1 2
2 1
这种输入也是合法的
当N为0时，输入结束，该用例不被处理。
</code></pre>
</blockquote>
</li>
<li><p>输出</p>
<blockquote>
<p>对每个测试用例，在1行里输出最少还需要建设的道路数目。</p>
</blockquote>
</li>
<li><p>样例输入<br>5 3<br>1 2<br>3 2<br>4 5<br>0</p>
</li>
<li><p>样例输出<br>1</p>
</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/11/24</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> par[x] == x:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        t = find(par[x])  <span class="comment"># 优化</span></span><br><span class="line">        par[x] = t</span><br><span class="line">        <span class="keyword">return</span> t</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># def find(x):</span></span><br><span class="line"><span class="comment">#     if par[x] != x:</span></span><br><span class="line"><span class="comment">#         t = find(par[x])</span></span><br><span class="line"><span class="comment">#         par[x] = t</span></span><br><span class="line"><span class="comment">#         return t</span></span><br><span class="line"><span class="comment">#     return x</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">union</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    x = find(x)</span><br><span class="line">    y = find(y)</span><br><span class="line">    <span class="keyword">if</span> x == y:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    par[x] = y</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># n个节点，m个集合</span></span><br><span class="line">        n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        par = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 若合并到最后有cnt个集合，那么也就是说至少需要cnt-1条边使得任意一个点可以通畅到达其他任意一个点</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">            union(a - <span class="number">1</span>, b - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n):</span><br><span class="line">            <span class="keyword">if</span> par[i] == i:</span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">        print(cnt - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<ul>
<li>结果<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 3</span><br><span class="line">1 2</span><br><span class="line">3 2</span><br><span class="line">4 5</span><br><span class="line">1</span><br><span class="line">4 2</span><br><span class="line">1 3</span><br><span class="line">4 3</span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>OJ</tag>
      </tags>
  </entry>
  <entry>
    <title>回溯算法</title>
    <url>/2020/11/26/BacktrackingAlgorithm/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：素数环、全排列、图着色、n皇后、dfs+回溯、</p>
<a id="more"></a>

<h1 id="素数环"><a href="#素数环" class="headerlink" title="素数环"></a>素数环</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/11/25</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">num = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line">flag = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断素数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prime</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(sqrt(x)) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> x % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># x 是当前的数，v是满足条件的前一个数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">x, v</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x == n + <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># 判断最后一个数和第一个数之和</span></span><br><span class="line">        <span class="keyword">if</span> prime(v + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">                print(num[i], end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            print()</span><br><span class="line">            <span class="keyword">return</span>  <span class="comment"># return的位置是和for同一级的</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> flag[i] == <span class="number">0</span> <span class="keyword">and</span> prime(i + v):</span><br><span class="line">            flag[i] = <span class="number">1</span></span><br><span class="line">            num[x] = i</span><br><span class="line">            dfs(x + <span class="number">1</span>, i)</span><br><span class="line">            flag[i] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">flag[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">dfs(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">6</span></span><br><span class="line"><span class="string">1 4 3 2 5 6 </span></span><br><span class="line"><span class="string">1 6 5 2 3 4 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">8</span></span><br><span class="line"><span class="string">1 2 3 8 5 6 7 4 </span></span><br><span class="line"><span class="string">1 2 5 8 3 4 7 6 </span></span><br><span class="line"><span class="string">1 4 7 6 5 8 3 2 </span></span><br><span class="line"><span class="string">1 6 7 4 3 8 5 2 </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><ul>
<li>把素数判断用素数表标志存储，提高效率<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">优化的话，可以使用素数表，这样就不用每次都遍历判断了</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="comment"># 素数表，1表示素数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prime_table</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">global</span> k</span><br><span class="line">    l = [<span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(x + <span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, x + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(sqrt(i)) + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> i % k == <span class="number">0</span>:</span><br><span class="line">                l[i] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line">prime = prime_table(n+<span class="number">100</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h1></li>
<li>做法类似</li>
<li>见 <a href="https://paste.ubuntu.com/p/PgwX92bBq6/">https://paste.ubuntu.com/p/PgwX92bBq6/</a></li>
</ul>
<h1 id="图着色"><a href="#图着色" class="headerlink" title="图着色"></a>图着色</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/11/26</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输入n个顶点，m种颜色，还有该图的邻接矩阵</span></span><br><span class="line"><span class="string">假设第一个顶点是1，第一种颜色是1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">graph = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]  <span class="comment"># 存放邻接矩阵</span></span><br><span class="line">color = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]  <span class="comment"># 存放最后符合着色情况</span></span><br><span class="line">cnt = <span class="number">0</span>  <span class="comment"># 记录有多少种着色方案</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查第i个顶点的颜色是否满足条件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">k</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, k + <span class="number">1</span>):</span><br><span class="line">        <span class="comment"># k与i之间相连并且i顶点的颜色与k顶点的颜色相同</span></span><br><span class="line">        <span class="keyword">if</span> graph[k][i] == <span class="number">1</span> <span class="keyword">and</span> color[i] == color[k]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">step</span>):</span></span><br><span class="line">    <span class="keyword">global</span> cnt</span><br><span class="line">    <span class="comment"># 所有的顶点已经涂完颜色</span></span><br><span class="line">    <span class="keyword">if</span> step == n + <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            print(color[i], end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        print()</span><br><span class="line">        cnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历填m种颜色</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">        color[step] = i</span><br><span class="line">        <span class="keyword">if</span> check(step):</span><br><span class="line">            dfs(step + <span class="number">1</span>)</span><br><span class="line">        color[step] = <span class="number">0</span>  <span class="comment"># 回溯，0表示没有着色</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        temp = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            graph[i][j] = temp[j - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    dfs(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">&#x27;总方案数: &#x27;</span>, cnt)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5 4 </span></span><br><span class="line"><span class="string">0 1 1 1 0 </span></span><br><span class="line"><span class="string">1 0 1 1 1 </span></span><br><span class="line"><span class="string">1 1 0 1 0 </span></span><br><span class="line"><span class="string">1 1 1 0 1 </span></span><br><span class="line"><span class="string">0 1 0 1 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">48</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 4 </span><br><span class="line">0 1 1 1 0 </span><br><span class="line">1 0 1 1 1 </span><br><span class="line">1 1 0 1 0 </span><br><span class="line">1 1 1 0 1 </span><br><span class="line">0 1 0 1 0</span><br><span class="line"></span><br><span class="line">48</span><br></pre></td></tr></table></figure>


<h1 id="n皇后"><a href="#n皇后" class="headerlink" title="n皇后"></a>n皇后</h1><ul>
<li>N皇后问题，输入N，输出所有解的个数</li>
<li>解题思路：<br>  可以使用一个一维数组存放皇后的位置，比如chess[i] = j,表示第i行的第j列有存放一个棋子，比起二维这样会省点空间。回溯结合深搜对所有情况继续穷举，符合就继续，不符合就回退。递归出口即是将所有的棋子已经放好，此时，行数已经到达最后一行+1.这里从第0行开始。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/11/26</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">chess = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]  <span class="comment"># 下标代表第i行，若为1，则表示第j列棋盘存放棋子</span></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查棋子是否冲突，i是行，j是列</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">        <span class="comment"># 检查列和对角线</span></span><br><span class="line">        <span class="keyword">if</span> chess[i] == chess[j] <span class="keyword">or</span> <span class="built_in">abs</span>(chess[i] - chess[j]) == i - j:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># i表示现在已经放到第i行了</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="keyword">global</span> cnt</span><br><span class="line">    <span class="keyword">if</span> i == n:  <span class="comment"># 能够放到最后一行说明这种情况符合</span></span><br><span class="line">        cnt += <span class="number">1</span></span><br><span class="line">        print(chess)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        chess[i] = j  <span class="comment"># 表示第i行第j列放皇后</span></span><br><span class="line">        <span class="keyword">if</span> check(i):</span><br><span class="line">            dfs(i + <span class="number">1</span>)  <span class="comment"># 符合条件就继续放下一行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    dfs(<span class="number">0</span>)</span><br><span class="line">    print(<span class="string">&#x27;一共有&#123;&#125;种摆放方法&#x27;</span>.<span class="built_in">format</span>(cnt))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>运行结果<br><img src="https://img2020.cnblogs.com/blog/2134757/202011/2134757-20201126174424896-1615773289.png"></li>
<li><img src="https://img2020.cnblogs.com/blog/2134757/202011/2134757-20201126174442602-1373478577.png"></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>OJ</tag>
      </tags>
  </entry>
  <entry>
    <title>贝叶斯分类</title>
    <url>/2020/08/24/Bayes/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：机器学习贝叶斯分类、词袋模型应用、词频提取模型</p>
<a id="more"></a>

<h4 id="贝叶斯分类用途"><a href="#贝叶斯分类用途" class="headerlink" title="贝叶斯分类用途"></a>贝叶斯分类用途</h4><ul>
<li><p>和文本有关的分析分类用贝叶斯分类效果比较好</p>
</li>
<li><p>eg：</p>
<p>  邮件：总体100，正常70，垃圾30。 </p>
<p>  “办证”在正常邮件中出现10次，在垃圾邮件中出现25次 </p>
<p>  假设X为“办证”，H为垃圾邮件 </p>
<p>  𝑃 (𝑋|𝐻) =25/30=5/6 </p>
<p>  𝑃(𝐻)=30/100=3/10 </p>
<p>  𝑃 (𝑋) =35/100=7/20 </p>
<p>  <img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823215542324-676302155.png"></p>
</li>
</ul>
<pre><code>包含“办证”这个词的邮件属于垃圾邮件的概率为5/7 
</code></pre>
<ul>
<li><p>有：</p>
<ul>
<li>多项式模型</li>
<li>伯努利模型</li>
<li>高斯模型<ul>
<li>高斯模型用于连续型数据效果好</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="用sklearn实现贝叶斯"><a href="#用sklearn实现贝叶斯" class="headerlink" title="用sklearn实现贝叶斯"></a>用sklearn实现贝叶斯</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/13</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report, confusion_matrix</span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> MultinomialNB, BernoulliNB, GaussianNB  <span class="comment"># 导入朴素贝叶斯的三种模型</span></span><br><span class="line"></span><br><span class="line">iris = load_iris()</span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(iris.data, iris.target)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;建立三种贝叶斯模型看看效果&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立多项式模型</span></span><br><span class="line">mul = MultinomialNB()</span><br><span class="line">mul.fit(x_train, y_train)</span><br><span class="line">print(classification_report(mul.predict(x_test), y_test))</span><br><span class="line">print(confusion_matrix(mul.predict(x_test), y_test))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立伯努利模型</span></span><br><span class="line">bernoulli = BernoulliNB()</span><br><span class="line">bernoulli.fit(x_train, y_train)</span><br><span class="line">print(classification_report(bernoulli.predict(x_test), y_test))</span><br><span class="line">print(confusion_matrix(bernoulli.predict(x_test), y_test))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立高斯模型</span></span><br><span class="line">gaussian = GaussianNB()</span><br><span class="line">gaussian.fit(x_train, y_train)</span><br><span class="line">print(classification_report(gaussian.predict(x_test), y_test))</span><br><span class="line">print(confusion_matrix(gaussian.predict(x_test), y_test))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">D:\Anaconda\Anaconda3\python.exe D:/Appication/PyCharm/Git/MachineLearning/machine_learning/贝叶斯/iris_贝叶斯.py</span><br><span class="line">              precision    recall  f1-score   support</span><br><span class="line"></span><br><span class="line">           <span class="number">0</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">9</span></span><br><span class="line">           <span class="number">1</span>       <span class="number">1.00</span>      <span class="number">0.39</span>      <span class="number">0.56</span>        <span class="number">28</span></span><br><span class="line">           <span class="number">2</span>       <span class="number">0.06</span>      <span class="number">1.00</span>      <span class="number">0.11</span>         <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    accuracy                           <span class="number">0.55</span>        <span class="number">38</span></span><br><span class="line">   macro avg       <span class="number">0.69</span>      <span class="number">0.80</span>      <span class="number">0.56</span>        <span class="number">38</span></span><br><span class="line">weighted avg       <span class="number">0.98</span>      <span class="number">0.55</span>      <span class="number">0.66</span>        <span class="number">38</span></span><br><span class="line"></span><br><span class="line">[[ <span class="number">9</span>  <span class="number">0</span>  <span class="number">0</span>]</span><br><span class="line"> [ <span class="number">0</span> <span class="number">11</span> <span class="number">17</span>]</span><br><span class="line"> [ <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>]]</span><br><span class="line">              precision    recall  f1-score   support</span><br><span class="line"></span><br><span class="line">           <span class="number">0</span>       <span class="number">1.00</span>      <span class="number">0.24</span>      <span class="number">0.38</span>        <span class="number">38</span></span><br><span class="line">           <span class="number">1</span>       <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>         <span class="number">0</span></span><br><span class="line">           <span class="number">2</span>       <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>         <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    accuracy                           <span class="number">0.24</span>        <span class="number">38</span></span><br><span class="line">   macro avg       <span class="number">0.33</span>      <span class="number">0.08</span>      <span class="number">0.13</span>        <span class="number">38</span></span><br><span class="line">weighted avg       <span class="number">1.00</span>      <span class="number">0.24</span>      <span class="number">0.38</span>        <span class="number">38</span></span><br><span class="line"></span><br><span class="line">[[ <span class="number">9</span> <span class="number">11</span> <span class="number">18</span>]</span><br><span class="line"> [ <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>]</span><br><span class="line"> [ <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>]]</span><br><span class="line">              precision    recall  f1-score   support</span><br><span class="line"></span><br><span class="line">           <span class="number">0</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">9</span></span><br><span class="line">           <span class="number">1</span>       <span class="number">1.00</span>      <span class="number">0.85</span>      <span class="number">0.92</span>        <span class="number">13</span></span><br><span class="line">           <span class="number">2</span>       <span class="number">0.89</span>      <span class="number">1.00</span>      <span class="number">0.94</span>        <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    accuracy                           <span class="number">0.95</span>        <span class="number">38</span></span><br><span class="line">   macro avg       <span class="number">0.96</span>      <span class="number">0.95</span>      <span class="number">0.95</span>        <span class="number">38</span></span><br><span class="line">weighted avg       <span class="number">0.95</span>      <span class="number">0.95</span>      <span class="number">0.95</span>        <span class="number">38</span></span><br><span class="line"></span><br><span class="line">[[ <span class="number">9</span>  <span class="number">0</span>  <span class="number">0</span>]</span><br><span class="line"> [ <span class="number">0</span> <span class="number">11</span>  <span class="number">2</span>]</span><br><span class="line"> [ <span class="number">0</span>  <span class="number">0</span> <span class="number">16</span>]]</span><br><span class="line">D:\Anaconda\Anaconda3\lib\site-packages\sklearn\metrics\_classification.py:<span class="number">1221</span>: UndefinedMetricWarning: Recall <span class="keyword">and</span> F-score are ill-defined <span class="keyword">and</span> being <span class="built_in">set</span> to <span class="number">0.0</span> <span class="keyword">in</span> labels <span class="keyword">with</span> no true samples. Use `zero_division` parameter to control this behavior.</span><br><span class="line">  _warn_prf(average, modifier, msg_start, <span class="built_in">len</span>(result))</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>多次运行后发现高斯模型的贝叶斯效果最好</li>
</ul>
<h4 id="词袋模型"><a href="#词袋模型" class="headerlink" title="词袋模型"></a>词袋模型</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;词袋模型&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</span><br><span class="line"></span><br><span class="line">texts = [<span class="string">&quot;dog cat fish&quot;</span>, <span class="string">&quot;dog cat cat&quot;</span>, <span class="string">&quot;fish bird&quot;</span>, <span class="string">&#x27;bird&#x27;</span>]</span><br><span class="line">cv = CountVectorizer()</span><br><span class="line">cv_fit = cv.fit_transform(texts)</span><br><span class="line"></span><br><span class="line">print(cv.get_feature_names())</span><br><span class="line">print(cv_fit.toarray())</span><br><span class="line"></span><br><span class="line">print(cv_fit.toarray().<span class="built_in">sum</span>(axis=<span class="number">0</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;bird&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;fish&#x27;</span>]</span><br><span class="line">[[<span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]]</span><br><span class="line">[<span class="number">2</span> <span class="number">3</span> <span class="number">2</span> <span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li>计数只对英文文本起作用</li>
</ul>
<h4 id="词频提取模型（TF）"><a href="#词频提取模型（TF）" class="headerlink" title="词频提取模型（TF）"></a>词频提取模型（TF）</h4><ul>
<li> <a href="https://www.bilibili.com/video/BV1Rt411q7WJ?p=60">https://www.bilibili.com/video/BV1Rt411q7WJ?p=60</a></li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Python机器学习</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>聚类</title>
    <url>/2020/08/24/Clustering/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：机器学习聚类算法：K-Means、MiniBatchKMeans、DBSCAN算法</p>
<a id="more"></a>

<h1 id="聚类算法"><a href="#聚类算法" class="headerlink" title="聚类算法"></a>聚类算法</h1><h4 id="K-Means"><a href="#K-Means" class="headerlink" title="K-Means"></a>K-Means</h4><ul>
<li><p>算法思想：以空间中k个点为中心进行聚类，对最靠近他们的对象归类。通过迭代的方法，逐次更新各聚类中心的值，直至得到最好的聚类结果</p>
</li>
<li><p>跟分类相比，没有给定已知标签</p>
</li>
<li><p>用python代码自己实现的Kmeans： <a href="https://www.bilibili.com/video/BV1Rt411q7WJ?p=62">https://www.bilibili.com/video/BV1Rt411q7WJ?p=62</a></p>
<ul>
<li>注意：sklearn自带的KMeans效果要比自己实现的Kmeans效果好</li>
</ul>
</li>
<li><p>用sklearn实现</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/13</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans  <span class="comment"># 导入KMeans</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 载入数据</span></span><br><span class="line">data = np.genfromtxt(<span class="string">&#x27;kmeans.txt&#x27;</span>, delimiter=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="comment"># 设置k值</span></span><br><span class="line">k = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建模</span></span><br><span class="line">model = KMeans(n_clusters=k)</span><br><span class="line">model.fit(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 各分类的中心点坐标</span></span><br><span class="line">centers = model.cluster_centers_</span><br><span class="line">print(centers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测结果</span></span><br><span class="line">prediction = model.predict(data)</span><br><span class="line">print(prediction)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line">colors = [<span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;ob&#x27;</span>, <span class="string">&#x27;og&#x27;</span>, <span class="string">&#x27;oy&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i, d <span class="keyword">in</span> <span class="built_in">enumerate</span>(data):</span><br><span class="line">    plt.plot(d[<span class="number">0</span>], d[<span class="number">1</span>], colors[prediction[i]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出各个分类的中心点</span></span><br><span class="line">mark = [<span class="string">&#x27;*r&#x27;</span>, <span class="string">&#x27;*b&#x27;</span>, <span class="string">&#x27;*g&#x27;</span>, <span class="string">&#x27;*y&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i, center <span class="keyword">in</span> <span class="built_in">enumerate</span>(centers):</span><br><span class="line">    plt.plot(center[<span class="number">0</span>], center[<span class="number">1</span>], mark[i], markersize=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据值所在的范围</span></span><br><span class="line">x_min, x_max = data[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, data[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line">y_min, y_max = data[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, data[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成网格矩阵</span></span><br><span class="line">xx, yy = np.meshgrid(np.arange(x_min, x_max, <span class="number">0.02</span>),</span><br><span class="line">                     np.arange(y_min, y_max, <span class="number">0.02</span>))</span><br><span class="line"></span><br><span class="line">z = model.predict(np.c_[xx.ravel(), yy.ravel()])  <span class="comment"># ravel与flatten类似，多维数据转一维。flatten不会改变原始数据，ravel会改变原始数据</span></span><br><span class="line">z = z.reshape(xx.shape)</span><br><span class="line"><span class="comment"># 等高线图</span></span><br><span class="line">cs = plt.contourf(xx, yy, z)</span><br><span class="line"><span class="comment"># 显示结果</span></span><br><span class="line"><span class="comment"># 画出各个数据点，用不同颜色表示分类</span></span><br><span class="line">mark = [<span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;ob&#x27;</span>, <span class="string">&#x27;og&#x27;</span>, <span class="string">&#x27;oy&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i, d <span class="keyword">in</span> <span class="built_in">enumerate</span>(data):</span><br><span class="line">    plt.plot(d[<span class="number">0</span>], d[<span class="number">1</span>], mark[prediction[i]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出各个分类的中心点</span></span><br><span class="line">mark = [<span class="string">&#x27;*r&#x27;</span>, <span class="string">&#x27;*b&#x27;</span>, <span class="string">&#x27;*g&#x27;</span>, <span class="string">&#x27;*y&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i, center <span class="keyword">in</span> <span class="built_in">enumerate</span>(centers):</span><br><span class="line">    plt.plot(center[<span class="number">0</span>], center[<span class="number">1</span>], mark[i], markersize=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[[ <span class="number">2.6265299</span>   <span class="number">3.10868015</span>]</span><br><span class="line"> [-<span class="number">3.38237045</span> -<span class="number">2.9473363</span> ]</span><br><span class="line"> [ <span class="number">2.80293085</span> -<span class="number">2.7315146</span> ]</span><br><span class="line"> [-<span class="number">2.46154315</span>  <span class="number">2.78737555</span>]]</span><br><span class="line">[<span class="number">0</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">3</span></span><br><span class="line"> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823220137389-1026616917.png"><br><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823220144842-782323864.png"></p>
<blockquote>
<p>model.fit(data) 只传一个</p>
</blockquote>
<h4 id="MiniBatchKMeans模型"><a href="#MiniBatchKMeans模型" class="headerlink" title="MiniBatchKMeans模型"></a>MiniBatchKMeans模型</h4><ul>
<li>Mini Batch K-Means算法是K-Means算法的变种</li>
<li>与K均值算法相比，数据的更新是在每一个小的样本集上。Mini Batch K-Means比K-Means有更快的 收敛速度，但同时也降低了聚类的效果，但是在实际项目中却表现得不明显</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/13</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> MiniBatchKMeans</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;适用于数据多的情况，但是一般情况还是用KMeans&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">data = np.genfromtxt(<span class="string">&#x27;kmeans.txt&#x27;</span>, delimiter=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">k = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">model = MiniBatchKMeans(n_clusters=k)</span><br><span class="line">model.fit(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分类中心坐标</span></span><br><span class="line">centers = model.cluster_centers_</span><br><span class="line">print(centers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测结果</span></span><br><span class="line">pred_res = model.predict(data)</span><br><span class="line">print(pred_res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line">colors = [<span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;ob&#x27;</span>, <span class="string">&#x27;og&#x27;</span>, <span class="string">&#x27;oy&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i, d <span class="keyword">in</span> <span class="built_in">enumerate</span>(data):</span><br><span class="line">    plt.plot(d[<span class="number">0</span>], d[<span class="number">1</span>], colors[pred_res[i]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出各个分类的中心点</span></span><br><span class="line">mark = [<span class="string">&#x27;*r&#x27;</span>, <span class="string">&#x27;*b&#x27;</span>, <span class="string">&#x27;*g&#x27;</span>, <span class="string">&#x27;*y&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i, center <span class="keyword">in</span> <span class="built_in">enumerate</span>(centers):</span><br><span class="line">    plt.plot(center[<span class="number">0</span>], center[<span class="number">1</span>], mark[i], markersize=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li><p>KMeans的4个问题： <a href="https://www.bilibili.com/video/BV1Rt411q7WJ?p=65">https://www.bilibili.com/video/BV1Rt411q7WJ?p=65</a> </p>
<ul>
<li><p>对k个初始质心的选择比较敏感，容易陷入局部最小值</p>
</li>
<li><p>k值的选择是用户指定的，不同的k得到的结果会有挺大的不同</p>
</li>
<li><p>存在局限性，如下面这种非球状的数据分布就搞不定了</p>
<p>  <img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823220248409-929515507.png"></p>
</li>
</ul>
</li>
</ul>
<pre><code>- 数据比较大的时候，收敛会比较慢
</code></pre>
<h4 id="DBSCAN"><a href="#DBSCAN" class="headerlink" title="DBSCAN"></a>DBSCAN</h4><ul>
<li>本算法将具有足够高密度的区域划分为簇，并可以发现任何形状的聚类</li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823220327206-122017119.png"></p>
<ul>
<li><p>算法思想： <a href="https://www.bilibili.com/video/BV1Rt411q7WJ?p=69">https://www.bilibili.com/video/BV1Rt411q7WJ?p=69</a> </p>
</li>
<li><p>缺点： </p>
<ul>
<li>• 当数据量增大时，要求较大的内存支持I/O消耗也很大。 </li>
<li>• 当空间聚类的密度不均匀、聚类间距差相差很大时，聚类质量较差。 </li>
</ul>
</li>
<li><p>DBSCAN和K-MEANS比较： </p>
<ul>
<li>• DBSCAN不需要输入聚类个数。 </li>
<li>• 聚类簇的形状没有要求。 </li>
<li>• 可以在需要时输入过滤噪声的参数。</li>
</ul>
</li>
<li><p>关键参数</p>
<ul>
<li><p>esp</p>
</li>
<li><p>min_point</p>
<blockquote>
<p>即通过调整eps=, min_samples=来找到一个最好的效果</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/21</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> DBSCAN</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">data = np.genfromtxt(<span class="string">&#x27;kmeans.txt&#x27;</span>, delimiter=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="comment"># 建模</span></span><br><span class="line"><span class="comment"># esp距离阈值，min_samples在esp领域里面的样本数</span></span><br><span class="line">model = DBSCAN(eps=<span class="number">1.5</span>, min_samples=<span class="number">4</span>)</span><br><span class="line">model.fit(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测,fit_predict是先拟合后预测，DBSCAN没有predict方法</span></span><br><span class="line">pred = model.fit_predict(data)</span><br><span class="line">print(pred)  <span class="comment"># 预测值为-1的是噪点</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出各个数据点</span></span><br><span class="line">mark = [<span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;ob&#x27;</span>, <span class="string">&#x27;og&#x27;</span>, <span class="string">&#x27;oy&#x27;</span>, <span class="string">&#x27;ok&#x27;</span>, <span class="string">&#x27;om&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i, d <span class="keyword">in</span> <span class="built_in">enumerate</span>(data):</span><br><span class="line">    plt.plot(d[<span class="number">0</span>], d[<span class="number">1</span>], mark[pred[i]])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823220446286-774725928.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ 0  1  2  3  0  1  2  3  0  1  2  3  0  1 -1  2  0  1  2  3  0  1  2  3</span><br><span class="line">  0  1  2  3  0  1  2  3  0  1  2  3  0  1  2  3  0  1  2  3  0  1  2  3</span><br><span class="line">  0  1  2  3  0  1  2  3  0  1  2  3  0  1  2  3  0  1  2  3  0  1  2  3</span><br><span class="line">  0  1  2  3  0  1  2  3]</span><br></pre></td></tr></table></figure>
<ul>
<li>预测值是-1 的代表噪点</li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Python机器学习</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机408算法与数据结构</title>
    <url>/2020/08/25/Computer408/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：静态动态顺序表、单链表、双链表、循环链表、顺序栈、链式栈、顺序循环队列、链式队列</p>
<a id="more"></a>

<h1 id="动态顺序表"><a href="#动态顺序表" class="headerlink" title="动态顺序表"></a>动态顺序表</h1><ul>
<li>以下增删查操作是索引为index的下标，具体根据要求做改动<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> initSize 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    ElemType *data;</span><br><span class="line">    <span class="keyword">int</span> length; <span class="comment">//当前的长度</span></span><br><span class="line">    <span class="keyword">int</span> maxSize;<span class="comment">//最大长度</span></span><br><span class="line">&#125; SqlList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initList</span><span class="params">(SqlList &amp;L)</span> </span>&#123;</span><br><span class="line">    L.data = (ElemType *) <span class="built_in">malloc</span>(initSize * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">    L.length = <span class="number">0</span>;</span><br><span class="line">    L.maxSize = initSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开辟空间</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createLength</span><span class="params">(SqlList &amp;L, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    ElemType *p = L.data; <span class="comment">//备份转移数据</span></span><br><span class="line">    L.data = (ElemType *) <span class="built_in">malloc</span>((size + L.maxSize) * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">    <span class="comment">// 转移数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.length; i++) &#123;</span><br><span class="line">        L.data[i] = p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    L.maxSize += size;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertElem</span><span class="params">(SqlList &amp;L, <span class="keyword">int</span> index, ElemType x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//判断合法性</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; L.length)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = L.length; i &gt; index; --i) &#123;</span><br><span class="line">        L.data[i] = L.data[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    L.data[index] = x;</span><br><span class="line">    L.length += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteElem</span><span class="params">(SqlList &amp;L, <span class="keyword">int</span> index, ElemType &amp;e)</span></span>&#123;</span><br><span class="line">    <span class="comment">//判断合法性</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; L.length)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    e = L.data[index];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; L.length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        L.data[i] = L.data[i+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    L.length -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取元素</span></span><br><span class="line"><span class="function">ElemType <span class="title">getElem</span><span class="params">(SqlList L, <span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="comment">//判断合法性</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; L.length)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> L.data[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找元素,有就返回下标,没有就返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findElem</span><span class="params">(SqlList L, ElemType x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (L.data[i] == x) <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showList</span><span class="params">(SqlList L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.length; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, L.data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;length = %d \n&quot;</span>, L.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    SqlList l;</span><br><span class="line">    ElemType x;</span><br><span class="line">    initList(l);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        insertElem(l, i, i);</span><br><span class="line">    &#125;</span><br><span class="line">    showList(l);</span><br><span class="line">    insertElem(l, <span class="number">5</span>, <span class="number">999</span>);</span><br><span class="line">    showList(l);</span><br><span class="line">    deleteElem(l,<span class="number">2</span>, x);</span><br><span class="line">    showList(l);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d \n&quot;</span>, getElem(l, <span class="number">7</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;find: %d\n&quot;</span>, findElem(l,<span class="number">9</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h1><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200825221059037-114622396.png"></li>
</ul>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul>
<li>带头节点的<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">&#125; LNode, *LinkList; <span class="comment">//LinkList 和 LNode*是一样的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//带头结点的会更方便，这里是带头节点的</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initList</span><span class="params">(LinkList &amp;l)</span> </span>&#123;</span><br><span class="line">    l = (LNode *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));<span class="comment">//LNode*强调的是分配一个节点，也可以l = (LinkList)malloc(sizeof(LNode));</span></span><br><span class="line">    <span class="comment">//判断内存够不够，其实可以不用</span></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    l-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>插入和删除本质上都是找到前面一个节点</li>
</ul>
<h2 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h2><ul>
<li>带头节点的插入<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在第i个位置插入节点，本质上要找到第i-1个节点，以头节点为第0个节点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insertElem</span><span class="params">(LinkList &amp;l, <span class="keyword">int</span> i, ElemType x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LinkList p = l;     <span class="comment">//p开始指向头节点l,Lnode* p = l;</span></span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;          <span class="comment">//j表示当前p指向节点的下标</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; j &lt; i - <span class="number">1</span>) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//i不合法,i太大，远超过节点个数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//到这里时，p已经到了i-1这个位置,可以开辟一块空间了</span></span><br><span class="line">    LNode *s = (LNode *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;data = x;</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = s;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>如果是不带头节点的<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不带头节点的插入</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insertElemNoH</span><span class="params">(LinkList &amp;l, <span class="keyword">int</span> i, ElemType x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//单独处理插入第一个节点的情况</span></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">        LNode *s = (LNode *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data = x;</span><br><span class="line">        s-&gt;next = l;</span><br><span class="line">        l = s;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//下面操作和带头节点的操作是一样的</span></span><br><span class="line">    LNode *p = l;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; j &lt; i - <span class="number">1</span>) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *s = (LNode *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;data = x;</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = s;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="前插操作"><a href="#前插操作" class="headerlink" title="前插操作"></a>前插操作</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//前插操作，在节点p前面插入一个节点，值为x</span></span><br><span class="line"><span class="comment">//时间复杂度为O(1)</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insertPriorNode</span><span class="params">(LinkList &amp;l, LNode *p, ElemType x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *s = (LNode *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    s-&gt;data = p-&gt;data;</span><br><span class="line">    p-&gt;next = s;</span><br><span class="line">    p-&gt;data = x;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>和上面本质一样，其实是交换数据<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对于指定节点的前插操作,比如在p节点前插入s节点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insertPNode</span><span class="params">(LNode *p, LNode *s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!p || !s)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = s;</span><br><span class="line">    ElemType temp = s-&gt;data;</span><br><span class="line">    s-&gt;data = p-&gt;data;</span><br><span class="line">    p-&gt;data = temp;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;删除第i个节点,由x带回值</span><br><span class="line">bool deleteElem(LinkList &amp;l, int i, ElemType &amp;x) &#123;</span><br><span class="line">    if (i &lt; 1)return false;</span><br><span class="line">    LNode *p &#x3D; l;</span><br><span class="line">    int j &#x3D; 0;&#x2F;&#x2F;p指向的节点下标</span><br><span class="line">    &#x2F;&#x2F;找到第i-1个节点</span><br><span class="line">    while (p &amp;&amp; j &lt; i - 1) &#123;</span><br><span class="line">        p &#x3D; p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!p)return false;&#x2F;&#x2F;i不合法</span><br><span class="line">    if (!(p-&gt;next))return false;&#x2F;&#x2F;i-1后面没有节点了</span><br><span class="line">    &#x2F;&#x2F;现在p指向i-1的位置</span><br><span class="line">    LNode *q &#x3D; p-&gt;next;</span><br><span class="line">    x &#x3D; q-&gt;data;</span><br><span class="line">    p-&gt;next &#x3D; q-&gt;next;</span><br><span class="line">    free(q);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>删除要注意一个细节<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (!p)return false;&#x2F;&#x2F;i不合法</span><br><span class="line">if (!(p-&gt;next))return false;&#x2F;&#x2F;i-1后面没有节点了</span><br></pre></td></tr></table></figure>
<h3 id="删除指定节点"><a href="#删除指定节点" class="headerlink" title="删除指定节点"></a>删除指定节点</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;删除指定的节点</span><br><span class="line">bool deleteTElem(LNode* p)&#123;</span><br><span class="line">    if(!p || !(p-&gt;next)) return false;</span><br><span class="line">    LNode *s &#x3D; p-&gt;next;</span><br><span class="line">    p-&gt;data &#x3D; s-&gt;data;</span><br><span class="line">    p-&gt;next &#x3D; s-&gt;next;</span><br><span class="line">    free(s);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><a href="https://www.bilibili.com/video/av92191094?p=11">参考</a></li>
</ul>
<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//按位查找，找到第i个</span></span><br><span class="line"><span class="function">LNode *<span class="title">getElem</span><span class="params">(LinkList l, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    LNode *p = l;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;<span class="comment">//j是p的位置下标</span></span><br><span class="line">    <span class="comment">//让跳出循环时，p落在i的位置</span></span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; j &lt; i) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//按值查找</span></span><br><span class="line"><span class="function">LNode * <span class="title">getElemByValue</span><span class="params">(LinkList l, ElemType x)</span></span>&#123;</span><br><span class="line">    LNode *p = l-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; p-&gt;data != x)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;<span class="comment">//找到返回该指针，找不到返回NULL</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="求表长"><a href="#求表长" class="headerlink" title="求表长"></a>求表长</h2><ul>
<li>这是带头节点的，注意表头不算如长度</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求表的长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">(LinkList l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    LNode *p = l-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="单链表的建立"><a href="#单链表的建立" class="headerlink" title="单链表的建立"></a>单链表的建立</h2><ul>
<li>头插法</li>
<li>尾插法</li>
</ul>
<h3 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a>尾插法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//尾插法</span></span><br><span class="line"><span class="function">LinkList <span class="title">insertNextNode</span><span class="params">(LinkList &amp;l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    l = (LNode *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));<span class="comment">//建立头节点</span></span><br><span class="line">    l-&gt;next = <span class="literal">NULL</span>;<span class="comment">//如果从外面传入已经初始化的l，那这里就不用写这初始化2句</span></span><br><span class="line">    LNode *s, *p = l;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">9999</span>) &#123;</span><br><span class="line">        s = (LNode *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data = x;</span><br><span class="line">        <span class="comment">//s-&gt;next = NULL;</span></span><br><span class="line">        p-&gt;next = s;</span><br><span class="line">        p = s;  <span class="comment">//永远保持p指向最后一个节点</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//头插法</span></span><br><span class="line"><span class="function">LinkList <span class="title">insertHead</span><span class="params">(LinkList &amp;l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    l = (LNode *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));<span class="comment">//建立头节点</span></span><br><span class="line">    l-&gt;next = <span class="literal">NULL</span>;<span class="comment">//如果从外面传入已经初始化的l，那这里就不用写这初始化2句</span></span><br><span class="line">    LNode *s;<span class="comment">//头插法只需要记住头节点就行，所以不用像尾插法多设一个p记录尾节点</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">9999</span>) &#123;</span><br><span class="line">        s = (LNode *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data = x;</span><br><span class="line">        s-&gt;next = l-&gt;next;</span><br><span class="line">        l-&gt;next = s;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> *<span class="title">prior</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> *<span class="title">next</span>;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">&#125; DNode, *DLinklist;</span><br></pre></td></tr></table></figure>


<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">initList</span><span class="params">(DLinklist &amp;l)</span> </span>&#123;</span><br><span class="line">    l = (DLinklist) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DNode));</span><br><span class="line">    <span class="keyword">if</span> (!l) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//内存不足，分配失败的情况</span></span><br><span class="line">    l-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    l-&gt;prior = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="后插"><a href="#后插" class="headerlink" title="后插"></a>后插</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在p节点后面插入s节点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insertNext</span><span class="params">(DNode *p, DNode *s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!p || !s) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;next) p-&gt;next-&gt;prior = s;</span><br><span class="line">    p-&gt;next = s;</span><br><span class="line">    s-&gt;prior = p;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="前删"><a href="#前删" class="headerlink" title="前删"></a>前删</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在节点p后面删除节点q</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deleteNext</span><span class="params">(DNode *p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    DNode *q = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (!q) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    p-&gt;next = q-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (q-&gt;next) q-&gt;next-&gt;prior = p;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//销毁，即每一次都删除头节点的下一个节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroyList</span><span class="params">(DLinklist &amp;l)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//释放各个节点</span></span><br><span class="line">    <span class="keyword">while</span> (l-&gt;next)</span><br><span class="line">        deleteNext(l);</span><br><span class="line">    <span class="built_in">free</span>(l);</span><br><span class="line">    l = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="双向循环链表"><a href="#双向循环链表" class="headerlink" title="双向循环链表"></a>双向循环链表</h1><ul>
<li>更加方便</li>
<li>实现比上面简单</li>
</ul>
<h1 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 顺序栈</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxSize 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    ElemType data[maxSize];</span><br><span class="line">    <span class="keyword">int</span> top; <span class="comment">//栈顶指针</span></span><br><span class="line">&#125; SeqStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initStack</span><span class="params">(SeqStack &amp;s)</span> </span>&#123;</span><br><span class="line">    s.top = <span class="number">-1</span>; <span class="comment">//假设指向栈顶，所以刚开始没有元素是-1,初始也可以设为0，不过代码相应作出改变</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(SeqStack s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.top == <span class="number">-1</span>;<span class="comment">//空就返回true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进栈</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(SeqStack &amp;s, ElemType x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.top == maxSize - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//已满</span></span><br><span class="line">    s.data[++s.top] = x;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出栈,由x带回</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">(SeqStack &amp;s, ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.top == <span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//栈空</span></span><br><span class="line">    x = s.data[s.top--];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取栈顶元素</span></span><br><span class="line"><span class="function">ElemType <span class="title">getTop</span><span class="params">(SeqStack s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.top == <span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> s.data[s.top];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="链式栈"><a href="#链式栈" class="headerlink" title="链式栈"></a>链式栈</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 链式栈</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxSize 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">&#125; LinkNode, *LinkStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化,这里是带头节点的</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initStack</span><span class="params">(LinkStack &amp;s)</span> </span>&#123;</span><br><span class="line">    s = (LinkNode *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">    s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(LinkStack s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s-&gt;next == <span class="literal">NULL</span>;<span class="comment">//空就返回true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进栈</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(LinkStack &amp;s, ElemType x)</span> </span>&#123;</span><br><span class="line">    LinkNode *p = (LinkNode *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">    p-&gt;data = x;</span><br><span class="line">    p-&gt;next = s-&gt;next;</span><br><span class="line">    s-&gt;next = p;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈,由x带回</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">(LinkStack &amp;s, ElemType &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LinkNode *p = s, *q = s-&gt;next;</span><br><span class="line">    x = q-&gt;data;</span><br><span class="line">    p-&gt;next = q-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    q = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取栈顶元素</span></span><br><span class="line"><span class="function">ElemType <span class="title">getTop</span><span class="params">(LinkStack s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> s-&gt;next-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showData</span><span class="params">(LinkStack s)</span> </span>&#123;</span><br><span class="line">    LinkNode *p = s-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p-&gt;data);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LinkStack s = <span class="literal">NULL</span>;</span><br><span class="line">    initStack(s);</span><br><span class="line">    <span class="comment">//push</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        push(s, i);</span><br><span class="line">    &#125;</span><br><span class="line">    showData(s);</span><br><span class="line">    <span class="comment">//pop</span></span><br><span class="line">    ElemType x;</span><br><span class="line">    pop(s, x);</span><br><span class="line">    showData(s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d \n&quot;</span>, x);</span><br><span class="line">    <span class="comment">//get</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d \n&quot;</span>, getTop(s));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9 8 7 6 5 4 3 2 1 0</span><br><span class="line">8 7 6 5 4 3 2 1 0</span><br><span class="line">9</span><br><span class="line">8</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>


<h1 id="顺序循环队列"><a href="#顺序循环队列" class="headerlink" title="顺序循环队列"></a>顺序循环队列</h1><ul>
<li>在判断队空和队满时有3种方法，看教材</li>
<li>这里列举其中一种<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxSize 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> rear, front; <span class="comment">//front指向队头第一个，rear指向队尾的下一个</span></span><br><span class="line">    ElemType data[maxSize];</span><br><span class="line">&#125; SeqQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initQueue</span><span class="params">(SeqQueue &amp;q)</span> </span>&#123;</span><br><span class="line">    q.front = q.rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(SeqQueue q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> q.rear == q.front;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">enQueue</span><span class="params">(SeqQueue &amp;q, ElemType x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((q.rear + <span class="number">1</span>) % maxSize == q.front) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//已满的情况</span></span><br><span class="line">    q.data[q.rear] = x;</span><br><span class="line">    q.rear %= maxSize;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deQueue</span><span class="params">(SeqQueue &amp;q, ElemType &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (q.rear == q.front) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x = q.data[q.front];</span><br><span class="line">    q.front = (q.front + <span class="number">1</span>) % maxSize;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取队头元素</span></span><br><span class="line"><span class="function">ElemType <span class="title">getTop</span><span class="params">(SeqQueue q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (q.rear == q.front) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> q.data[q.front];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算对内元素的个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getNum</span><span class="params">(SeqQueue q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (q.rear + maxSize -q.front) % maxSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="链式队列"><a href="#链式队列" class="headerlink" title="链式队列"></a>链式队列</h1></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; LinkNode;<span class="comment">//强调的是节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    LinkNode *front, *rear;</span><br><span class="line">&#125; LinkQueue;<span class="comment">//强调的是队列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initQueue</span><span class="params">(LinkQueue &amp;q)</span> </span>&#123;</span><br><span class="line">    q.front = q.rear = (LinkNode *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">    q.front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(LinkQueue q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> q.front == q.rear; <span class="comment">//或者写q.front-&gt;next == NULL;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入队（带头结点的）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enQueue</span><span class="params">(LinkQueue &amp;q, ElemType x)</span> </span>&#123;</span><br><span class="line">    LinkNode *p = (LinkNode *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">    p-&gt;data = x;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    q.rear-&gt;next = p;</span><br><span class="line">    q.rear = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果是无头节点的入队，需要判断处理一下对头</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enQueueNoHead</span><span class="params">(LinkQueue &amp;q, ElemType x)</span> </span>&#123;</span><br><span class="line">    LinkNode *p = (LinkNode *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">    p-&gt;data = x;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//空队列的情况</span></span><br><span class="line">    <span class="keyword">if</span> (q.front == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        q.rear = p;</span><br><span class="line">        q.front = p;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        q.rear-&gt;next = p;</span><br><span class="line">        q.rear = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//带头结点的出队</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deQueue</span><span class="params">(LinkQueue &amp;q, ElemType &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (q.rear == q.front) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//队空</span></span><br><span class="line">    LinkNode *p = q.front-&gt;next;</span><br><span class="line">    x = p-&gt;data;</span><br><span class="line">    q.front-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="comment">//如果删除的是最后一个元素</span></span><br><span class="line">    <span class="keyword">if</span> (p == q.rear)<span class="comment">//或者p == NULL</span></span><br><span class="line">        q.rear == q.front;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不带多节点的出队</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deQueueNoHead</span><span class="params">(LinkQueue &amp;q, ElemType &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (q.front == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LinkNode *p = q.front;</span><br><span class="line">    x = p-&gt;data;</span><br><span class="line">    q.front = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (q.rear == p) &#123;<span class="comment">//或者q.front == NULL</span></span><br><span class="line">        q.front = <span class="literal">NULL</span>;</span><br><span class="line">        q.rear = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机408算法与数据结构</category>
      </categories>
      <tags>
        <tag>计算机408</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>糖尿病模型预测</title>
    <url>/2020/09/06/DiabetesModelPrediction/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：Kaggle竞赛题，ML实例应用</p>
<a id="more"></a>

<h1 id="diabetes-model-prediction"><a href="#diabetes-model-prediction" class="headerlink" title="diabetes model prediction"></a>diabetes model prediction</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/9/6</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> missingno <span class="keyword">as</span> msn</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">label_distribution</span>(<span class="params">data</span>):</span></span><br><span class="line">    p = data.Outcome.value_counts().plot(kind=<span class="string">&#x27;bar&#x27;</span>)  <span class="comment"># 使用柱状图画出</span></span><br><span class="line">    plt.show()</span><br><span class="line">    <span class="comment"># 可视化数据发布, 有些数据本不该为0的却为0，其实是空的</span></span><br><span class="line">    p = seaborn.pairplot(data, hue=<span class="string">&#x27;Outcome&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    <span class="comment"># 把空值的用柱状图画出来</span></span><br><span class="line">    p = msn.bar(data)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_data</span>():</span></span><br><span class="line">    data = pd.read_csv(<span class="string">&#x27;data/diabetes.csv&#x27;</span>)</span><br><span class="line">    <span class="comment"># 查看标签分布</span></span><br><span class="line">    print(data.Outcome.value_counts())</span><br><span class="line">    <span class="comment"># 把葡萄糖，血压，皮肤厚度，胰岛素，身体质量指数中的0替换为nan</span></span><br><span class="line">    handle_col = [<span class="string">&#x27;Glucose&#x27;</span>, <span class="string">&#x27;BloodPressure&#x27;</span>, <span class="string">&#x27;SkinThickness&#x27;</span>, <span class="string">&#x27;Insulin&#x27;</span>, <span class="string">&#x27;BMI&#x27;</span>]</span><br><span class="line">    data[handle_col] = data[handle_col].replace(<span class="number">0</span>, np.nan)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设定阀值</span></span><br><span class="line">    thresh_count = data.shape[<span class="number">0</span>] * <span class="number">0.8</span></span><br><span class="line">    <span class="comment"># 若某一列数据缺失的数量超过20%就会被删除</span></span><br><span class="line">    data = data.dropna(thresh=thresh_count, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 填充数据，得到新的数据集data</span></span><br><span class="line">    data[<span class="string">&#x27;Glucose&#x27;</span>] = data[<span class="string">&#x27;Glucose&#x27;</span>].fillna(data[<span class="string">&#x27;Glucose&#x27;</span>].mean())</span><br><span class="line">    data[<span class="string">&#x27;BloodPressure&#x27;</span>] = data[<span class="string">&#x27;BloodPressure&#x27;</span>].fillna(data[<span class="string">&#x27;BloodPressure&#x27;</span>].mean())</span><br><span class="line">    data[<span class="string">&#x27;BMI&#x27;</span>] = data[<span class="string">&#x27;BMI&#x27;</span>].fillna(data[<span class="string">&#x27;BMI&#x27;</span>].mean())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    new_data = handle_data()</span><br><span class="line">    label_distribution(new_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 切分数据集</span></span><br><span class="line">    x_data = new_data.drop(<span class="string">&#x27;Outcome&#x27;</span>, axis=<span class="number">1</span>)</span><br><span class="line">    y_data = new_data.Outcome</span><br><span class="line">    x_train, x_test, y_train, y_test = train_test_split(x_data, y_data, test_size=<span class="number">0.3</span>, stratify=y_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 建模</span></span><br><span class="line">    model = LogisticRegression()</span><br><span class="line">    model.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 预测</span></span><br><span class="line">    pred = model.predict(x_test)</span><br><span class="line">    <span class="comment"># 评估</span></span><br><span class="line">    print(classification_report(pred, y_test))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\Anaconda\Anaconda3\python.exe D:&#x2F;Appication&#x2F;PyCharm&#x2F;Git&#x2F;kaggle-project&#x2F;DiabetesPrediction&#x2F;diabetes_predict.py</span><br><span class="line">0    500</span><br><span class="line">1    268</span><br><span class="line">Name: Outcome, dtype: int64</span><br><span class="line">              precision    recall  f1-score   support</span><br><span class="line"></span><br><span class="line">           0       0.90      0.80      0.85       169</span><br><span class="line">           1       0.58      0.76      0.66        62</span><br><span class="line"></span><br><span class="line">    accuracy                           0.79       231</span><br><span class="line">   macro avg       0.74      0.78      0.75       231</span><br><span class="line">weighted avg       0.81      0.79      0.80       231</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202009/2134757-20200906190555869-26122205.png"><br><img src="https://img2020.cnblogs.com/blog/2134757/202009/2134757-20200906190600858-1025279349.png"><br><img src="https://img2020.cnblogs.com/blog/2134757/202009/2134757-20200906190615519-991097272.png"></p>
]]></content>
      <categories>
        <category>Kaggle</category>
      </categories>
      <tags>
        <tag>Python机器学习</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>集成学习</title>
    <url>/2020/08/24/IntegratedLearning/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：集成学习算法：bagging、随机森林、AdaBoost、Stacking、Voting算法</p>
<a id="more"></a>

<h4 id="集成学习"><a href="#集成学习" class="headerlink" title="集成学习"></a>集成学习</h4><ul>
<li><p>集成学习就是组合多个学习器，最后可以得到一个更 </p>
<p>  好的学习器。 </p>
</li>
<li><p>集成学习算法： </p>
<ol>
<li><p>个体学习器之间不存在强依赖关系，装袋（bagging） </p>
</li>
<li><p>随机森林（Random Forest） </p>
</li>
<li><p>个体学习器之间存在强依赖关系，提升（boosting） </p>
</li>
<li><p>Stacking</p>
</li>
</ol>
</li>
</ul>
<h4 id="bagging"><a href="#bagging" class="headerlink" title="bagging"></a>bagging</h4><ul>
<li>一种有放回的抽样</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/12</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> BaggingClassifier  <span class="comment"># bagging分类器</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;一般来说集成学习用于复杂的较好，下面是简单例子&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个画出两个特征的分布图，二维</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span>(<span class="params">model</span>):</span></span><br><span class="line">    <span class="comment"># 获取数值所在范围</span></span><br><span class="line">    x_min, x_max = x_data[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x_data[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line">    y_min, y_max = x_data[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x_data[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成网格矩阵</span></span><br><span class="line">    xx, yy = np.meshgrid(np.arange(x_min, x_max, <span class="number">0.02</span>),</span><br><span class="line">                         np.arange(y_min, y_max, <span class="number">0.02</span>))</span><br><span class="line"></span><br><span class="line">    z = model.predict(np.c_[xx.ravel(), yy.ravel()])</span><br><span class="line">    z = z.reshape(xx.shape)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等高线图</span></span><br><span class="line">    cs = plt.contourf(xx, yy, z)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line">x_data = iris.data[:, :<span class="number">2</span>]  <span class="comment"># 为了比对用了集成学习和不用集成学习的效果，只用两个特征</span></span><br><span class="line">y_data = iris.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切分数据</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x_data, y_data)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;建kNN模型&#x27;&#x27;&#x27;</span></span><br><span class="line">kNN = KNeighborsClassifier()</span><br><span class="line">kNN.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line">draw(kNN)</span><br><span class="line">plt.scatter(x_data[:, <span class="number">0</span>], x_data[:, <span class="number">1</span>], c=y_data)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准确率</span></span><br><span class="line">print(kNN.score(x_test, y_test))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;建决策树模型&#x27;&#x27;&#x27;</span></span><br><span class="line">tree = tree.DecisionTreeClassifier()</span><br><span class="line">tree.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line">draw(tree)</span><br><span class="line">plt.scatter(x_data[:, <span class="number">0</span>], x_data[:, <span class="number">1</span>], c=y_data)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准确率</span></span><br><span class="line">print(tree.score(x_test, y_test))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;接下来使用bagging集成学习，加入kNN&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 100个不放回的抽样，也就是训练100个kNN分类器</span></span><br><span class="line">bagging_kNN = BaggingClassifier(kNN, n_estimators=<span class="number">100</span>)</span><br><span class="line">bagging_kNN.fit(x_train, y_train)</span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line">draw(bagging_kNN)</span><br><span class="line">plt.scatter(x_data[:, <span class="number">0</span>], x_data[:, <span class="number">1</span>], c=y_data)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准确率</span></span><br><span class="line">print(bagging_kNN.score(x_test, y_test))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;加入决策树的集成学习&#x27;&#x27;&#x27;</span></span><br><span class="line">bagging_tree = BaggingClassifier(tree, n_estimators=<span class="number">100</span>)</span><br><span class="line">bagging_tree.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line">draw(bagging_tree)</span><br><span class="line">plt.scatter(x_data[:, <span class="number">0</span>], x_data[:, <span class="number">1</span>], c=y_data)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准确率</span></span><br><span class="line">print(bagging_tree.score(x_test, y_test))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">每次运行结果都不一样的</span><br><span class="line"><span class="number">0.7368421052631579</span></span><br><span class="line"><span class="number">0.7105263157894737</span></span><br><span class="line"><span class="number">0.7631578947368421</span></span><br><span class="line"><span class="number">0.7105263157894737</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="随机森林（RF）"><a href="#随机森林（RF）" class="headerlink" title="随机森林（RF）"></a>随机森林（RF）</h4><ul>
<li><p><strong>RF = 决策树+Bagging+随机属性选择</strong></p>
</li>
<li><p>RF算法流程 </p>
<ol>
<li><p>样本的随机：从样本集中用bagging的方式，随机选择n个样本。 </p>
</li>
<li><p>特征的随机：从所有属性d中随机选择k个属性(k&lt;d)，然后从k个属性中选择最佳分割属性作为节点建立 </p>
<p>CART决策树。 </p>
</li>
<li><p>重复以上两个步骤m次，建立m棵CART决策树。 </p>
</li>
<li><p>这m棵CART决策树形成随机森林，通过投票表决结果，决定数据属于哪一类。</p>
</li>
</ol>
</li>
<li><p>一般来说，随机森林的效果要比决策树好，所以选随机森林</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/12</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier  <span class="comment"># 导入随机森林模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree  <span class="comment"># 导入决策树模型，与随机森林模型做对比</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个画预测图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span>(<span class="params">model</span>):</span></span><br><span class="line">    <span class="comment"># 获取数据值所在的范围</span></span><br><span class="line">    x_min, x_max = x_data[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x_data[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line">    y_min, y_max = x_data[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x_data[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成网格矩阵</span></span><br><span class="line">    xx, yy = np.meshgrid(np.arange(x_min, x_max, <span class="number">0.02</span>),</span><br><span class="line">                         np.arange(y_min, y_max, <span class="number">0.02</span>))</span><br><span class="line"></span><br><span class="line">    z = model.predict(np.c_[xx.ravel(), yy.ravel()])  <span class="comment"># ravel与flatten类似，多维数据转一维。flatten不会改变原始数据，ravel会改变原始数据</span></span><br><span class="line">    z = z.reshape(xx.shape)</span><br><span class="line">    <span class="comment"># 等高线图</span></span><br><span class="line">    cs = plt.contourf(xx, yy, z)</span><br><span class="line">    <span class="comment"># 样本散点图</span></span><br><span class="line">    plt.scatter(x_test[:, <span class="number">0</span>], x_test[:, <span class="number">1</span>], c=y_test)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = np.genfromtxt(<span class="string">&#x27;LR-testSet2.txt&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">x_data = data[:, :-<span class="number">1</span>]</span><br><span class="line">y_data = data[:, -<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">plt.scatter(x_data[:, <span class="number">0</span>], x_data[:, <span class="number">1</span>], c=y_data)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切分数据</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x_data, y_data, test_size=<span class="number">0.25</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立决策树模型</span></span><br><span class="line">tree = tree.DecisionTreeClassifier()</span><br><span class="line">tree.fit(x_train, y_train)</span><br><span class="line">draw(tree)</span><br><span class="line"><span class="comment"># 评估模型</span></span><br><span class="line">print(tree.score(x_test, y_test))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立随机森林模型</span></span><br><span class="line">RF = RandomForestClassifier(n_estimators=<span class="number">100</span>)</span><br><span class="line">RF.fit(x_train, y_train)</span><br><span class="line">draw(RF)</span><br><span class="line"><span class="comment"># 评估模型</span></span><br><span class="line">print(RF.score(x_test, y_test))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.7333333333333333</span><br><span class="line">0.8666666666666667</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><p>图见程序运行结果</p>
</li>
<li><p>每次结果均不一样</p>
</li>
</ul>
<h4 id="AdaBoost算法"><a href="#AdaBoost算法" class="headerlink" title="AdaBoost算法"></a>AdaBoost算法</h4><ul>
<li><p>AdaBoost是英文“Adaptive Boosting”（自适应增强）的缩写</p>
</li>
<li><p>将学习器的重点放在“容易”出错的样本上。可以提升学习器的性能</p>
</li>
<li><p>换而言之，误差率低的弱分类器在最终分类器中占的权重较大，否则较小。</p>
</li>
<li><p>也就是把重点放在错误率高的样本，不断纠正</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/12</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> AdaBoostClassifier  <span class="comment"># 导入AdaBoost模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_gaussian_quantiles</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个画出两个特征的分布图，二维，只适用于两个特征</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span>(<span class="params">model, x_data, y_data</span>):</span></span><br><span class="line">    <span class="comment"># 获取数值所在范围</span></span><br><span class="line">    x_min, x_max = x_data[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x_data[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line">    y_min, y_max = x_data[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x_data[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成网格矩阵</span></span><br><span class="line">    xx, yy = np.meshgrid(np.arange(x_min, x_max, <span class="number">0.02</span>),</span><br><span class="line">                         np.arange(y_min, y_max, <span class="number">0.02</span>))</span><br><span class="line"></span><br><span class="line">    z = model.predict(np.c_[xx.ravel(), yy.ravel()])</span><br><span class="line">    z = z.reshape(xx.shape)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等高线图</span></span><br><span class="line">    cs = plt.contourf(xx, yy, z)</span><br><span class="line">    <span class="comment"># 样本散点图</span></span><br><span class="line">    plt.scatter(x_data[:, <span class="number">0</span>], x_data[:, <span class="number">1</span>], c=y_data)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成2维正态分布，生成的数据按分位数分为两类，500个样本,2个样本特征</span></span><br><span class="line">x1, y1 = make_gaussian_quantiles(n_samples=<span class="number">500</span>, n_features=<span class="number">2</span>, n_classes=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 生成2维正态分布，生成的数据按分位数分为两类，500个样本,2个样本特征均值都为3</span></span><br><span class="line">x2, y2 = make_gaussian_quantiles(mean=(<span class="number">3</span>, <span class="number">3</span>), n_samples=<span class="number">500</span>, n_features=<span class="number">2</span>, n_classes=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将两组数据合成一组数据, 也就是得到1000个样本</span></span><br><span class="line">x_data = np.concatenate((x1, x2))</span><br><span class="line">y_data = np.concatenate((y1, - y2 + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">plt.scatter(x_data[:, <span class="number">0</span>], x_data[:, <span class="number">1</span>], c=y_data)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;使用决策树看看结果&#x27;&#x27;&#x27;</span></span><br><span class="line">d_tree = tree.DecisionTreeClassifier(max_depth=<span class="number">3</span>)</span><br><span class="line">d_tree.fit(x_data, y_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图预测</span></span><br><span class="line">draw(d_tree, x_data, y_data)</span><br><span class="line">print(d_tree.score(x_data, y_data))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;使用AdaBoost模型，看看效果&#x27;&#x27;&#x27;</span></span><br><span class="line">AdaBoost = AdaBoostClassifier(d_tree, n_estimators=<span class="number">10</span>)</span><br><span class="line">AdaBoost.fit(x_data, y_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line">draw(AdaBoost, x_data, y_data)</span><br><span class="line">print(AdaBoost.score(x_data, y_data))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0.701</span></span><br><span class="line"><span class="number">0.976</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823214600915-740861539.png"></p>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823214604400-302928488.png"></p>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823214613352-2055503343.png"></p>
<ul>
<li>发现准确率高了很多</li>
</ul>
<h4 id="Stacking-算法"><a href="#Stacking-算法" class="headerlink" title="Stacking 算法"></a>Stacking 算法</h4><ul>
<li>有初级和次级分类器</li>
</ul>
<p><code>pip3 install mlxtend -i https://pypi.tuna.tsinghua.edu.cn/simple</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/12</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> model_selection</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">from</span> mlxtend.classifier <span class="keyword">import</span> StackingClassifier  <span class="comment"># 导入Stacking模型分类器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 载入数据集</span></span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line"><span class="comment"># 只要第1,2列的特征</span></span><br><span class="line">x_data, y_data = iris.data[:, <span class="number">1</span>:<span class="number">3</span>], iris.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义三个不同的分类器</span></span><br><span class="line">clf1 = KNeighborsClassifier(n_neighbors=<span class="number">1</span>)</span><br><span class="line">clf2 = DecisionTreeClassifier()</span><br><span class="line">clf3 = LogisticRegression()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个次级分类器 meta_classifier, 传入的是逻辑回归模型</span></span><br><span class="line">lr = LogisticRegression()</span><br><span class="line">stacking_model = StackingClassifier(classifiers=[clf1, clf2, clf3], meta_classifier=lr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> clf, label <span class="keyword">in</span> <span class="built_in">zip</span>([clf1, clf2, clf3, stacking_model],</span><br><span class="line">                      [<span class="string">&#x27;KNN&#x27;</span>, <span class="string">&#x27;Decision Tree&#x27;</span>, <span class="string">&#x27;LogisticRegression&#x27;</span>, <span class="string">&#x27;StackingClassifier&#x27;</span>]):</span><br><span class="line">    <span class="comment"># cross_val_score进行交叉验证， cv=3是分3份进行交叉验证，scoring=&#x27;accuracy&#x27;计算准确率</span></span><br><span class="line">    scores = model_selection.cross_val_score(clf, x_data, y_data, cv=<span class="number">3</span>, scoring=<span class="string">&#x27;accuracy&#x27;</span>)</span><br><span class="line">    <span class="comment"># scores.mean()求三个交叉验证结果的平均值</span></span><br><span class="line">    print(<span class="string">&quot;Accuracy: %0.2f [%s]&quot;</span> % (scores.mean(), label))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Accuracy: <span class="number">0.91</span> [KNN]</span><br><span class="line">Accuracy: <span class="number">0.93</span> [Decision Tree]</span><br><span class="line">Accuracy: <span class="number">0.95</span> [LogisticRegression]</span><br><span class="line">Accuracy: <span class="number">0.93</span> [StackingClassifier]</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>
<ul>
<li>有时候效果会比单个分类器的好</li>
</ul>
<h4 id="Voting算法"><a href="#Voting算法" class="headerlink" title="Voting算法"></a>Voting算法</h4><ul>
<li>和Stacking的建模过程类似</li>
<li>但是没有次级分类器</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/12</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> model_selection</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> VotingClassifier  <span class="comment"># 导入Voting</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">voting的建模步骤和stacking的建模过程类似，但是没有次级分类器</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 载入数据集</span></span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line"><span class="comment"># 只要第1,2列的特征</span></span><br><span class="line">x_data, y_data = iris.data[:, <span class="number">1</span>:<span class="number">3</span>], iris.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义三个不同的分类器</span></span><br><span class="line">clf1 = KNeighborsClassifier(n_neighbors=<span class="number">1</span>)</span><br><span class="line">clf2 = DecisionTreeClassifier()</span><br><span class="line">clf3 = LogisticRegression()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立模型，按照这个格式建立Voting模型,</span></span><br><span class="line"><span class="comment"># 每个元组的第一个是对分类器的描述</span></span><br><span class="line">voting_model = VotingClassifier([(<span class="string">&#x27;kNN&#x27;</span>, clf1), (<span class="string">&#x27;d_tree&#x27;</span>, clf2), (<span class="string">&#x27;lr&#x27;</span>, clf3)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> clf, label <span class="keyword">in</span> <span class="built_in">zip</span>([clf1, clf2, clf3, voting_model],</span><br><span class="line">                      [<span class="string">&#x27;KNN&#x27;</span>, <span class="string">&#x27;Decision Tree&#x27;</span>, <span class="string">&#x27;LogisticRegression&#x27;</span>, <span class="string">&#x27;VotingClassifier&#x27;</span>]):</span><br><span class="line">    scores = model_selection.cross_val_score(clf, x_data, y_data, cv=<span class="number">3</span>, scoring=<span class="string">&#x27;accuracy&#x27;</span>)</span><br><span class="line">    print(<span class="string">&quot;Accuracy: %0.2f [%s]&quot;</span> % (scores.mean(), label))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Accuracy: <span class="number">0.91</span> [KNN]</span><br><span class="line">Accuracy: <span class="number">0.91</span> [Decision Tree]</span><br><span class="line">Accuracy: <span class="number">0.95</span> [LogisticRegression]</span><br><span class="line">Accuracy: <span class="number">0.95</span> [VotingClassifier]</span><br></pre></td></tr></table></figure>
<ul>
<li>可以看到比单个分类器的效果好!</li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Python机器学习</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb实现网上二手车交易平台小项目</title>
    <url>/2021/01/21/JavaWebSecond-handCar/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：JavaWeb小项目</p>
<a id="more"></a>

<h1 id="网上二手车交易信息平台"><a href="#网上二手车交易信息平台" class="headerlink" title="网上二手车交易信息平台"></a>网上二手车交易信息平台</h1><h2 id="Java-Web实现方案"><a href="#Java-Web实现方案" class="headerlink" title="Java Web实现方案"></a>Java Web实现方案</h2><ul>
<li>纯servlet+MVC架构<ul>
<li>Servlet</li>
<li>JSP</li>
<li>JDBC</li>
<li>EL 表达式</li>
<li>JSTL</li>
<li>Filter 过滤器</li>
</ul>
</li>
<li>前端采用layui模板美化</li>
<li>数据库采用MySql</li>
</ul>
<h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><h3 id="会员："><a href="#会员：" class="headerlink" title="会员："></a>会员：</h3><ul>
<li><p>会员注册，基本信息修改；</p>
</li>
<li><p>二手汽车出售信息的编辑、修改、发布（发布后不可再修改信息）、关闭(销售信息)（关闭后他人不可再留言）</p>
</li>
<li><p>查询并维护自己的出售信息</p>
</li>
<li><p>查询他人发布的出售信息并可以留言</p>
</li>
<li><p>可以对他人的留言进行回复</p>
<h3 id="管理员："><a href="#管理员：" class="headerlink" title="管理员："></a>管理员：</h3></li>
<li><p>会员管理</p>
<ul>
<li>权限管理，例如是否可以发布出售信息，取消用户会员资格等</li>
</ul>
</li>
<li><p>出售信息管理</p>
<ul>
<li>管理员拥有对虚假消息进行管理的权力，可以屏蔽虚假消息</li>
</ul>
</li>
</ul>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>IDEA2020.3 + Java1.8 + Tomcat 9.0.31</li>
</ul>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>重在实现思路，主要还是数据库设计和CRUD那套东西</li>
<li>虽是交易平台，但是本项目没有涉及到任何交易，仍然有很大的改进空间</li>
</ul>
<h2 id="数据库表的关系"><a href="#数据库表的关系" class="headerlink" title="数据库表的关系"></a>数据库表的关系</h2><p><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210121020414139-734664079.png"></p>
<h2 id="部分截图"><a href="#部分截图" class="headerlink" title="部分截图"></a>部分截图</h2><ul>
<li><p>首页登录<br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210121013043316-622313831.png"></p>
</li>
<li><p>用户<br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210121013138434-2073155572.png"><br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210121013226391-2006316338.png"><br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210121013845543-364387924.png"><br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210121013927621-547636853.png"><br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210121015924717-1061932086.png"><br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210121014008243-833878964.png"><br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210121014058895-2044803795.png"></p>
</li>
</ul>
<p>…</p>
<ul>
<li>管理员<br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210121014240426-693790599.png"><br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210121014300548-630822928.png"></li>
</ul>
<hr>
<ul>
<li>以上是部分截图，具体演示看我bilibili小号录制的5分钟视频h<ul>
<li>link: <a href="https://www.bilibili.com/video/BV1qp4y1W7gy?pop_share=1">https://www.bilibili.com/video/BV1qp4y1W7gy?pop_share=1</a> </li>
</ul>
</li>
<li>代码见我GitHub<ul>
<li>link: <a href="https://github.com/JimouChen/IDEA2021">https://github.com/JimouChen/IDEA2021</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>JaveWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>KNN</title>
    <url>/2020/08/23/KNN/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<h1 id="K近邻分类"><a href="#K近邻分类" class="headerlink" title="K近邻分类"></a>K近邻分类</h1><a id="more"></a>

<h3 id="KNN"><a href="#KNN" class="headerlink" title="KNN"></a>KNN</h3><ul>
<li><p><em>n_neighbors</em>. 临近的节点数量，<em>默认</em>值是5 </p>
</li>
<li><h3 id="近邻法（KNN）"><a href="#近邻法（KNN）" class="headerlink" title="近邻法（KNN）"></a>近邻法（KNN）</h3><ul>
<li>是一种基本的分类与回归方法</li>
<li>所有特征的数值采用归一化处理</li>
<li>距离度量：欧氏距离</li>
<li>分类决策规则：多数表决</li>
<li>kd树（空间规划树）</li>
<li><a href="https://www.bilibili.com/video/BV1Rt411q7WJ?p=43">https://www.bilibili.com/video/BV1Rt411q7WJ?p=43</a> </li>
</ul>
</li>
<li><p>kNN预测iris</p>
<h3 id="用python实现knn"><a href="#用python实现knn" class="headerlink" title="用python实现knn"></a>用python实现knn</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/3</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets  <span class="comment"># 导入数据集</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split  <span class="comment"># 用于切分数据</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report, confusion_matrix  <span class="comment"># 验证准确性</span></span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义kNN函数，采用欧氏距离计算，返回预测的分类结果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kNN</span>(<span class="params">x_test, x_data, y_data, k</span>):</span></span><br><span class="line">    <span class="comment"># 计算样本数量</span></span><br><span class="line">    x_data_size = x_data.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 复制x_test</span></span><br><span class="line">    x_test_copy = np.tile(x_test, (x_data_size, <span class="number">1</span>))</span><br><span class="line">    <span class="comment"># 计算x_test与每个样本的差值</span></span><br><span class="line">    diff_mat = x_test_copy - x_data</span><br><span class="line">    <span class="comment"># 计算差值平方</span></span><br><span class="line">    sq_diff_mat = diff_mat ** <span class="number">2</span></span><br><span class="line">    <span class="comment"># 求和</span></span><br><span class="line">    sq_distance = sq_diff_mat.<span class="built_in">sum</span>(axis=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 开方,得到每个样本与测试样本的距离</span></span><br><span class="line">    distance = sq_distance ** <span class="number">0.5</span></span><br><span class="line">    <span class="comment"># 从小到大排序</span></span><br><span class="line">    sorted_distance = distance.argsort()</span><br><span class="line">    <span class="comment"># 进行分类，把分类结果按多到少放到一个字典</span></span><br><span class="line">    class_count = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        <span class="comment"># 获取标签</span></span><br><span class="line">        label = y_data[sorted_distance[i]]</span><br><span class="line">        <span class="comment"># 统计标签数量</span></span><br><span class="line">        class_count[label] = class_count.get(label, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 将分类结果从数量按多到少排序</span></span><br><span class="line">    sorted_class_count = <span class="built_in">sorted</span>(class_count.items(), key=operator.itemgetter(<span class="number">1</span>), reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sorted_class_count[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 载入数据</span></span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line"><span class="comment"># 切分数据集, 0.2为测试集，0.8为训练集</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">prediction = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x_test.shape[<span class="number">0</span>]):</span><br><span class="line">    prediction.append(kNN(x_test[i], x_train, y_train, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拿测试的和预测的作比较，看看效果</span></span><br><span class="line">print(classification_report(y_test, prediction))</span><br><span class="line">print(confusion_matrix(y_test, prediction))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> precision    recall  f1-score   support</span><br><span class="line"></span><br><span class="line">           <span class="number">0</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>        <span class="number">11</span></span><br><span class="line">           <span class="number">1</span>       <span class="number">0.90</span>      <span class="number">1.00</span>      <span class="number">0.95</span>         <span class="number">9</span></span><br><span class="line">           <span class="number">2</span>       <span class="number">1.00</span>      <span class="number">0.90</span>      <span class="number">0.95</span>        <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    accuracy                           <span class="number">0.97</span>        <span class="number">30</span></span><br><span class="line">   macro avg       <span class="number">0.97</span>      <span class="number">0.97</span>      <span class="number">0.96</span>        <span class="number">30</span></span><br><span class="line">weighted avg       <span class="number">0.97</span>      <span class="number">0.97</span>      <span class="number">0.97</span>        <span class="number">30</span></span><br><span class="line"></span><br><span class="line">[[<span class="number">11</span>  <span class="number">0</span>  <span class="number">0</span>]</span><br><span class="line"> [ <span class="number">0</span>  <span class="number">9</span>  <span class="number">0</span>]</span><br><span class="line"> [ <span class="number">0</span>  <span class="number">1</span>  <span class="number">9</span>]]</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></li>
<li><p>为了方便，可以把用python实现的kNN算法封装起来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/3</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义knn函数，采用欧氏距离计算，返回预测的分类结果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kNN</span>(<span class="params">x_test, x_data, y_data, k</span>):</span></span><br><span class="line">    sorted_distance = ((((np.tile(x_test, (x_data.shape[<span class="number">0</span>], <span class="number">1</span>)) - x_data) ** <span class="number">2</span>).<span class="built_in">sum</span>(axis=<span class="number">1</span>)) ** <span class="number">0.5</span>).argsort()</span><br><span class="line">    <span class="comment"># 进行分类，把分类结果按多到少放到一个字典</span></span><br><span class="line">    class_count = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        <span class="comment"># 获取标签</span></span><br><span class="line">        label = y_data[sorted_distance[i]]</span><br><span class="line">        <span class="comment"># 统计标签数量</span></span><br><span class="line">        class_count[label] = class_count.get(label, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 将分类结果从数量按多到少排序</span></span><br><span class="line">    sorted_class_count = <span class="built_in">sorted</span>(class_count.items(), key=operator.itemgetter(<span class="number">1</span>), reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sorted_class_count[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="用sklearn调用kNN"><a href="#用sklearn调用kNN" class="headerlink" title="用sklearn调用kNN"></a>用sklearn调用kNN</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/8</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入数据</span></span><br><span class="line">iris = load_iris()</span><br><span class="line">x_data = iris.data</span><br><span class="line">y_data = iris.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切分数据</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x_data, y_data, test_size=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建模,n_neighbors即为k</span></span><br><span class="line"><span class="comment"># kNN_model = KNeighborsClassifier()</span></span><br><span class="line">kNN_model = KNeighborsClassifier(n_neighbors=<span class="number">5</span>)</span><br><span class="line">kNN_model.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line">predictions = kNN_model.predict(x_test)</span><br><span class="line">print(<span class="string">&#x27;origin: \n&#x27;</span>, y_test)</span><br><span class="line">print(<span class="string">&#x27;predict result:\n&#x27;</span>, predictions)</span><br><span class="line">print(classification_report(y_test, predictions))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用该对象的打分方法，计算出准确率</span></span><br><span class="line"><span class="comment"># print(kNN_model.score(x_test, y_test, sample_weight=None))</span></span><br><span class="line">print(kNN_model.score(x_test, y_test))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Python机器学习</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习算法基础概览</title>
    <url>/2020/08/23/MLBasement/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<a id="more"></a>



<h1 id="机器学习算法"><a href="#机器学习算法" class="headerlink" title="机器学习算法"></a>机器学习算法</h1><h3 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h3><ul>
<li>建模之前，我们可以把数据分为三个部分<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">训练集</span><br><span class="line">验证集</span><br><span class="line">测试集</span><br></pre></td></tr></table></figure></li>
<li>训练集(train)用来训练，构建模型</li>
<li>验证集是用来在模型训练阶段测试模型好坏</li>
<li>等模型训练好后，再用测试集(test)来评估模型好坏<blockquote>
<p><strong>有时候，我们会偷懒直接分成训练集和测试集</strong></p>
</blockquote>
</li>
</ul>
<h3 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h3><ul>
<li>训练带有标签的数据集就是监督学习<br>如下<br><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823191927517-435458132.png"></li>
<li>比如 3 和 dog就是标签，标签可以理解为类别</li>
<li>一般用来分类</li>
</ul>
<h3 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h3><ul>
<li>不含有标签的数据集</li>
<li>一般用来聚类，因为没有标签(类别)，所以需要聚类成一个类别<br><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823192133789-499407785.png"></li>
<li>比如要为上面的圈圈分两个类别，即聚成两个类</li>
</ul>
<h3 id="半监督学习"><a href="#半监督学习" class="headerlink" title="半监督学习"></a>半监督学习</h3><ul>
<li>用的比较少</li>
<li>介于监督学习和无监督学习之间</li>
</ul>
<h3 id="应用类别"><a href="#应用类别" class="headerlink" title="应用类别"></a>应用类别</h3><h4 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h4><p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823192438156-556059284.png"></p>
<h4 id="分类-带有标签的，一般属于监督学习"><a href="#分类-带有标签的，一般属于监督学习" class="headerlink" title="分类(带有标签的，一般属于监督学习)"></a>分类(带有标签的，一般属于监督学习)</h4><ul>
<li>垃圾邮箱分类</li>
<li>文本分类</li>
<li>图像识别(手写体识别)</li>
</ul>
<h4 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h4><ul>
<li>无标签<br>下面是用聚类算法分成3个类别<br><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823192800069-61672022.png"></li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>回归：预测数据是连续型数值</li>
<li>分类：预测数据是类别型(离散)数值，并且类别已知</li>
<li>聚类：预测数据是类别型数值，并且类别未知</li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Python机器学习</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>最大子段和——分治法解决</title>
    <url>/2020/09/30/MaximumSub-segmentSum/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：分治法.</p>
<a id="more"></a>

<ul>
<li>可以使用蛮力法</li>
<li>使用分治法更高效<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/9/30</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_sum</span>(<span class="params">l: <span class="built_in">list</span>, left, right</span>):</span></span><br><span class="line">    <span class="keyword">if</span> left == right:</span><br><span class="line">        <span class="keyword">return</span> l[left]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        left_sum = max_sum(l, left, mid)</span><br><span class="line">        right_sum = max_sum(l, mid + <span class="number">1</span>, right)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理中间的</span></span><br><span class="line">        s1 = <span class="number">0</span></span><br><span class="line">        s1_max = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 从中间到左边</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(mid, left - <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            s1 += l[i]</span><br><span class="line">            <span class="keyword">if</span> s1 &gt; s1_max:</span><br><span class="line">                s1_max = s1</span><br><span class="line"></span><br><span class="line">        s2 = <span class="number">0</span></span><br><span class="line">        s2_max = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 从中间到右边</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(mid + <span class="number">1</span>, right):</span><br><span class="line">            s2 += l[i]</span><br><span class="line">            <span class="keyword">if</span> s2_max &lt; s2:</span><br><span class="line">                s2_max = s2</span><br><span class="line"></span><br><span class="line">        s_max = s2_max + s1_max</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(left_sum, right_sum, s_max)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ll = [1, -2, 3, -4, 5, 6, -7, 4, 3, -3, 1]</span></span><br><span class="line">ll = [-<span class="number">2</span>, <span class="number">11</span>, -<span class="number">4</span>, <span class="number">13</span>, -<span class="number">5</span>, -<span class="number">2</span>]</span><br><span class="line">a = max_sum(ll, <span class="number">0</span>, <span class="built_in">len</span>(ll) - <span class="number">1</span>)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">20</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>OJ</tag>
      </tags>
  </entry>
  <entry>
    <title>倍约数类问题算法的优化</title>
    <url>/2020/10/04/MultiplesProblem/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：优化</p>
<a id="more"></a>

<h2 id="原题来自蓝桥杯："><a href="#原题来自蓝桥杯：" class="headerlink" title="原题来自蓝桥杯："></a>原题来自蓝桥杯：</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">已知正整数a0,a1,b0,b1。设某未知正整数x 满足：</span><br><span class="line">1． x 和a0 的最大公约数是a1；</span><br><span class="line">2． x 和 b0 的最小公倍数是 b1。</span><br><span class="line">求解满足条件的 x 的个数</span><br></pre></td></tr></table></figure>
<h2 id="重要结论"><a href="#重要结论" class="headerlink" title="重要结论"></a>重要结论</h2><p>两个需要知道的关于最大公约数和最小公倍数的结论。</p>
<ul>
<li><p>最大公约数：如果gcd(x,y)=z，那么gcd(x/z,y/z)=1</p>
</li>
<li><p>最小公倍数：lcm(x,y)=z</p>
<p> ①如果lcm(x,y)=z，那么gcd(z/y,z/x)=1。<br>这个我们来证明一下：我们设lcm(x,y)=z，那么lcm(x,y)=x*y/gcd(x,y)=z，所以gcd(x,y)=x*y/z。由最大公约数结论可得，gcd(z/y,z/x)=1。</p>
<p> ②如果y是x的公倍数，则x是y的因数，也就是y % x == 0。<br>由上面几条结论可得，x一定是b1的因数，而且x % a1 == 0，gcd(x/a1 ,a0/a1) == 1，gcd(b1/b0 ，b1/x) == 1。<br>那么我们就可以枚举b1的因数，然后判断了</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gcd(b, a % b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> n:</span><br><span class="line">    a0, a1, b0, b1 = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    x_num = <span class="number">0</span></span><br><span class="line">    p = a0 / a1</span><br><span class="line">    q = b1 / b0</span><br><span class="line"></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> x * x &lt;= b1:</span><br><span class="line">        <span class="keyword">if</span> b1 % x == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> x % a1 == <span class="number">0</span> <span class="keyword">and</span> gcd(x / a1, p) == <span class="number">1</span> <span class="keyword">and</span> gcd(q, b1 / x) == <span class="number">1</span>:</span><br><span class="line">                x_num += <span class="number">1</span></span><br><span class="line">            y = b1 / x</span><br><span class="line">            <span class="keyword">if</span> x == y:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> y % a1 == <span class="number">0</span> <span class="keyword">and</span> gcd(y / a1, p) == <span class="number">1</span> <span class="keyword">and</span> gcd(q, b1 / y) == <span class="number">1</span>:</span><br><span class="line">                x_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        x += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    print(x_num)</span><br><span class="line"></span><br><span class="line">    n -= <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>OJ</tag>
      </tags>
  </entry>
  <entry>
    <title>神经网络</title>
    <url>/2020/08/23/NeuralNetworks/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  



<h2 id="NN"><a href="#NN" class="headerlink" title="NN"></a>NN</h2><a id="more"></a>

<h4 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h4><ul>
<li><p>是深度学习的基础</p>
</li>
<li><p>深度学习计算是用GPU算的，比如英伟达</p>
<p>  <img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823211134725-123916710.png"></p>
</li>
</ul>
<ul>
<li><p>模型收敛条件，即模型训练结束条件</p>
<ul>
<li><p>误差 (如代价函数值loss)小于某个预先设定的较小的值 </p>
</li>
<li><p>两次迭代之间的权值变化已经很小 </p>
</li>
<li><p>设定最大迭代次数，当迭代超过最大次数就停止<strong>（用的最多的）</strong></p>
</li>
</ul>
</li>
</ul>
<h4 id="单层感知器"><a href="#单层感知器" class="headerlink" title="单层感知器"></a>单层感知器</h4><ul>
<li><p>最基础的</p>
<p>  <img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823211219200-1028273035.png"></p>
</li>
</ul>
<ul>
<li><p>为了矩阵计算时方便一些，将偏置因子b看成是x0*w0</p>
<p>  <img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823211243222-1977009087.png"></p>
</li>
<li><p>感知器学习规则</p>
<p>  <img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823211303346-224510922.png"></p>
</li>
</ul>
<blockquote>
<p>eg:</p>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823211315691-116490265.png"></p>
</blockquote>
<blockquote>
<ul>
<li>步骤就是不断迭代，最后如果y等于正确的标签t，那模型建立就结束</li>
</ul>
</blockquote>
<ul>
<li><p>学习率</p>
<ul>
<li><p>𝜂取值一般取0-1之间 </p>
</li>
<li><p>学习率太大容易造成权值调整不稳定 </p>
</li>
<li><p>学习率太小，权值调整太慢，迭代次数太多</p>
</li>
</ul>
</li>
</ul>
<p><strong>代码注意：</strong></p>
<ul>
<li><p>一般把输入数据和标签设置成2维的形式</p>
</li>
<li><p>输入m个，输出n个，就把权值设为m行n列（这是随机取权值的情况）</p>
</li>
<li><p>X是个矩阵，X.T则是X的转置矩阵</p>
</li>
<li><p>X，Y是两个矩阵，他们相乘可以写成X.dot(Y)，或者numpy.dot(X, Y)</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.sign 是自带的激活函数</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>eg:</p>
<p>  <img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823211339540-385392031.png"></p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/7</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入数据</span></span><br><span class="line">X = np.array([[<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">              [<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>],</span><br><span class="line">              [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">              [<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>]])</span><br><span class="line"><span class="comment"># 标签</span></span><br><span class="line">Y = np.array([[<span class="number">1</span>],</span><br><span class="line">              [<span class="number">1</span>],</span><br><span class="line">              [-<span class="number">1</span>],</span><br><span class="line">              [-<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化权值，3行1列，取值-1到1</span></span><br><span class="line">W = (np.random.random([<span class="number">3</span>, <span class="number">1</span>]) - <span class="number">0.5</span>) * <span class="number">2</span></span><br><span class="line"><span class="comment"># 设置学习率</span></span><br><span class="line">lr = <span class="number">0.11</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义更新权值的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_weight</span>():</span></span><br><span class="line">    <span class="keyword">global</span> X, Y, W, lr</span><br><span class="line">    out = np.sign(np.dot(X, W))  <span class="comment"># 神经网络输出,直接得到4个预测值</span></span><br><span class="line">    theta_w = lr * (X.T.dot(Y - out)) / <span class="built_in">int</span>(X.shape[<span class="number">0</span>])  <span class="comment"># 数据量大时取平均</span></span><br><span class="line">    W = W + theta_w</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    update_weight()</span><br><span class="line">    print(<span class="string">&#x27;第&#123;&#125;次迭代：&#x27;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">    print(W)</span><br><span class="line">    out = np.sign(np.dot(X, W))  <span class="comment"># 计算当前输出</span></span><br><span class="line">    <span class="comment"># .all()只有输出的所有预测值都与实际输出一样，才说明模型收敛，循环结束</span></span><br><span class="line">    <span class="keyword">if</span> (out == Y).<span class="built_in">all</span>():</span><br><span class="line">        print(<span class="string">&#x27;Finished , epoch:&#x27;</span>, i)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;上面迭代到最后一次时，W就可以确定分界线的截距和效率了&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 计算分界线的斜率和截距</span></span><br><span class="line">k = -W[<span class="number">1</span>] / W[<span class="number">2</span>]</span><br><span class="line">b = -W[<span class="number">0</span>] / W[<span class="number">2</span>]</span><br><span class="line">print(<span class="string">&#x27;k = &#x27;</span>, k)</span><br><span class="line">print(<span class="string">&#x27;b = &#x27;</span>, b)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;可以把图画出来&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正样本</span></span><br><span class="line">x1 = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">y1 = [<span class="number">3</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment"># 负样本</span></span><br><span class="line">x2 = [<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">y2 = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="comment"># 画图横坐标边界</span></span><br><span class="line">x_range = (<span class="number">0</span>, <span class="number">5</span>)  <span class="comment"># 或者x_range = [0, 5]</span></span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">plt.plot(x_range, x_range * k + b, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">plt.scatter(x1, y1, c=<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">plt.scatter(x2, y2, c=<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823211402590-15968975.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">第<span class="number">0</span>次迭代：</span><br><span class="line">[[<span class="number">0.27110547</span>]</span><br><span class="line"> [<span class="number">0.68355699</span>]</span><br><span class="line"> [<span class="number">0.31271088</span>]]</span><br><span class="line">第<span class="number">1</span>次迭代：</span><br><span class="line">[[<span class="number">0.16110547</span>]</span><br><span class="line"> [<span class="number">0.62855699</span>]</span><br><span class="line"> [<span class="number">0.14771088</span>]]</span><br><span class="line">第<span class="number">2</span>次迭代：</span><br><span class="line">[[ <span class="number">0.05110547</span>]</span><br><span class="line"> [ <span class="number">0.57355699</span>]</span><br><span class="line"> [-<span class="number">0.01728912</span>]]</span><br><span class="line">第<span class="number">3</span>次迭代：</span><br><span class="line">[[-<span class="number">0.05889453</span>]</span><br><span class="line"> [ <span class="number">0.51855699</span>]</span><br><span class="line"> [-<span class="number">0.18228912</span>]]</span><br><span class="line">第<span class="number">4</span>次迭代：</span><br><span class="line">[[-<span class="number">0.11389453</span>]</span><br><span class="line"> [ <span class="number">0.46355699</span>]</span><br><span class="line"> [-<span class="number">0.23728912</span>]]</span><br><span class="line">第<span class="number">5</span>次迭代：</span><br><span class="line">[[-<span class="number">0.16889453</span>]</span><br><span class="line"> [ <span class="number">0.40855699</span>]</span><br><span class="line"> [-<span class="number">0.29228912</span>]]</span><br><span class="line">Finished , epoch: <span class="number">5</span></span><br><span class="line">k =  [<span class="number">1.39778378</span>]</span><br><span class="line">b =  [-<span class="number">0.5778338</span>]</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><p>每次运行结果都不同，因为权值是随机设置的</p>
</li>
<li><p>单层感知器可以帮我们解决一些分类问题</p>
</li>
<li><p>缺点：</p>
<ul>
<li>效果不是很好</li>
<li>不能解决非线性的问题，如异或问题</li>
<li>因为用的激活函数是sign，所以实际标签只能设1和-1</li>
</ul>
</li>
</ul>
<h4 id="线性神经网络"><a href="#线性神经网络" class="headerlink" title="线性神经网络"></a>线性神经网络</h4><ul>
<li><p>线性神经网络在结构上与感知器非常相似，只是激活函数不同。 </p>
<p>  在模型训练时把原来的sign函数改成了purelin函数：y = x</p>
</li>
<li><p>也就是，把单层感知器的 out = np.sign(np.dot(X, W)) 改成 out = np.dot(X, W)即可</p>
</li>
<li><p>Delta学习规则，比单层感知器复杂</p>
</li>
<li><p>解决异或问题(分类)</p>
<p>  <img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823211503725-928056465.png"><br>  <img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823211727796-1996714021.png"></p>
</li>
</ul>
<p><code> 上面a算出来是 w5</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/8</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;x0,x1,x2,x1^2,x1x2,x2^2&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入数据</span></span><br><span class="line">X = np.array([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">              [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">              [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]])</span><br><span class="line"><span class="comment"># 标签</span></span><br><span class="line">Y = np.array([-<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化权值，有6个权值</span></span><br><span class="line">W = (np.random.random(<span class="number">6</span>) - <span class="number">0.5</span>) * <span class="number">2</span></span><br><span class="line"><span class="comment"># 设置学习率</span></span><br><span class="line">lr = <span class="number">0.11</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义更新权值的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_weight</span>():</span></span><br><span class="line">    <span class="keyword">global</span> X, Y, W, lr</span><br><span class="line">    out = np.dot(X, W.T)  <span class="comment"># 计算当前输出  # 神经网络输出,直接得到4个预测值</span></span><br><span class="line">    theta_w = lr * ((Y - out.T).dot(X)) / <span class="built_in">int</span>(X.shape[<span class="number">0</span>])  <span class="comment"># 数据量大时取平均</span></span><br><span class="line">    W = W + theta_w</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义计算预测结果的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate</span>(<span class="params">x, root_num</span>):</span></span><br><span class="line">    <span class="keyword">global</span> W</span><br><span class="line">    a = W[<span class="number">5</span>]</span><br><span class="line">    b = W[<span class="number">2</span>] + x * W[<span class="number">4</span>]</span><br><span class="line">    c = W[<span class="number">0</span>] + x * W[<span class="number">1</span>] + x * x * W[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">if</span> root_num == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> (-b + np.sqrt(b * b - <span class="number">4</span> * a * c)) / (<span class="number">2</span> * a)</span><br><span class="line">    <span class="keyword">if</span> root_num == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> (-b - np.sqrt(b * b - <span class="number">4</span> * a * c)) / (<span class="number">2</span> * a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过增加循环次数，使得分类效果越好</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">    update_weight()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;上面迭代到最后一次时，W就可以确定分界线的截距和效率了&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;可以把图画出来&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正样本</span></span><br><span class="line">x1 = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">y1 = [<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"><span class="comment"># 负样本</span></span><br><span class="line">x2 = [<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">y2 = [<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"><span class="comment"># 画图横坐标边界</span></span><br><span class="line">x_range = np.linspace(-<span class="number">1</span>, <span class="number">3</span>)  <span class="comment"># 或者x_range = [0, 5]</span></span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">plt.plot(x_range, calculate(x_range, <span class="number">1</span>), <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">plt.plot(x_range, calculate(x_range, <span class="number">2</span>), <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">plt.plot(x1, y1, <span class="string">&#x27;bo&#x27;</span>)</span><br><span class="line">plt.plot(x2, y2, <span class="string">&#x27;yo&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 看一下预测结果,迭代次数越多，预测结果越精确</span></span><br><span class="line">out = np.dot(X, W.T)</span><br><span class="line">print(out)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[-1.  1.  1. -1.] #迭代10000次</span><br></pre></td></tr></table></figure>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823211658824-666508626.png"></p>
<h4 id="BP神经网络"><a href="#BP神经网络" class="headerlink" title="BP神经网络"></a>BP神经网络</h4><ul>
<li>公式推导部分参考教程</li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Python机器学习</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>解决PyCharm的插件市场搜索不到的问题</title>
    <url>/2021/01/16/PyCharmPlugin/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  
- PyCharm 2020.3.1 打开插件市场搜索不出想要的插件
- 解决方法：以管理员身份运行PyCharm，然后在去插件市场搜索就有了

]]></content>
      <categories>
        <category>Solution</category>
      </categories>
      <tags>
        <tag>解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>分治法求逆序对</title>
    <url>/2020/10/14/ReversePair/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：分治，归并</p>
<a id="more"></a>

<ul>
<li>使用到归并的思想</li>
<li>一边排序一边计数</li>
</ul>
<h1 id="code"><a href="#code" class="headerlink" title="code"></a>code</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/10/14</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">num = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line">temp = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">low, high, mid</span>):</span></span><br><span class="line">    left = low  <span class="comment"># 左边数组指针</span></span><br><span class="line">    right = mid + <span class="number">1</span>  <span class="comment"># 右边数组指针</span></span><br><span class="line">    k = low  <span class="comment"># temp数组指针</span></span><br><span class="line">    <span class="keyword">global</span> count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> left &lt;= mid <span class="keyword">and</span> right &lt;= high:</span><br><span class="line">        <span class="keyword">if</span> num[left] &gt; num[right]:</span><br><span class="line">            temp[k] = num[right]</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">            right += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 求逆序对</span></span><br><span class="line">            count += mid - left + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            temp[k] = num[left]</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检测左边</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= mid:</span><br><span class="line">        temp[k] = num[left]</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">        left += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查右边</span></span><br><span class="line">    <span class="keyword">while</span> right &lt;= high:</span><br><span class="line">        temp[k] = num[right]</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">        right += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拷贝</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(low, high + <span class="number">1</span>):</span><br><span class="line">        num[i] = temp[i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span>(<span class="params">low, high</span>):</span></span><br><span class="line">    <span class="keyword">if</span> low &gt;= high:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分</span></span><br><span class="line">    mid = (high + low) // <span class="number">2</span></span><br><span class="line">    <span class="comment"># mid = low + (high - low) // 2</span></span><br><span class="line">    merge_sort(low, mid)</span><br><span class="line">    merge_sort(mid + <span class="number">1</span>, high)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 治</span></span><br><span class="line">    merge(low, high, mid)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># test = [3, 5, 2, 4, 6]</span></span><br><span class="line">    <span class="comment"># 输入</span></span><br><span class="line">    num = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    merge_sort(<span class="number">0</span>, <span class="built_in">len</span>(num) - <span class="number">1</span>)</span><br><span class="line">    print(count)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>结果<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 5 2 4 6</span><br><span class="line"></span><br><span class="line">3</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>OJ</tag>
      </tags>
  </entry>
  <entry>
    <title>STL基础部分</title>
    <url>/2020/09/03/STL_base/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：基础部分、string、vector、queue、stack、set、deque、list…</p>
<a id="more"></a>

<h1 id="string"><a href="#string" class="headerlink" title="string"></a>string</h1><h2 id="输入输出字符串"><a href="#输入输出字符串" class="headerlink" title="输入输出字符串"></a>输入输出字符串</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    string s = &quot;12312hello world...&quot;;</span></span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    getline(<span class="built_in">cin</span>, s);<span class="comment">//输入字符串</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;s;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">21314 hello woefsdcsd</span><br><span class="line">21314 hello woefsdcsd</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h2 id="字符串拼凑"><a href="#字符串拼凑" class="headerlink" title="字符串拼凑"></a>字符串拼凑</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    string s = &quot;12312hello world...&quot;;</span></span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    s += <span class="string">&quot;shda s&quot;</span>;</span><br><span class="line">    s += <span class="string">&quot;shda s&quot;</span>;</span><br><span class="line">    s += <span class="string">&#x27;5&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;s;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shda sshda s5</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s = <span class="string">&quot;1523525431873&quot;</span>;</span><br><span class="line">    sort(s.begin(), s.end());</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1122333455578</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<ul>
<li><code>s.begin(), s.end()</code>是迭代器，可以看成是指针</li>
<li>如果要访问最后一个字符，应该是<code>*(--s.end())</code></li>
</ul>
<h2 id="erase删除"><a href="#erase删除" class="headerlink" title="erase删除"></a>erase删除</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s = <span class="string">&quot;1523525431873&quot;</span>;</span><br><span class="line">    s.erase(s.begin());</span><br><span class="line">    s.erase(--s.end());</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">52352543187</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h2 id="substr取子串"><a href="#substr取子串" class="headerlink" title="substr取子串"></a>substr取子串</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s = <span class="string">&quot;1523525431873&quot;</span>;</span><br><span class="line">    s = s.substr(<span class="number">2</span>, <span class="number">3</span>);<span class="comment">//从索引为2开始取，往后取三个</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s;</span><br><span class="line">    s = <span class="string">&quot;1523525431873&quot;</span>;</span><br><span class="line">    s = s.substr(<span class="number">6</span>, <span class="number">-1</span>);<span class="comment">//从索引为6开始取，直到最后一个</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; s;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">235</span><br><span class="line">5431873</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h2 id="几种循环方式"><a href="#几种循环方式" class="headerlink" title="几种循环方式"></a>几种循环方式</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s = <span class="string">&quot;1523525431873&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); ++i)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s[i];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">string</span>::iterator iter = s.begin(); iter != s.end(); iter++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *iter;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : s)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; s;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1523525431873</span><br><span class="line">1523525431873</span><br><span class="line">1523525431873</span><br><span class="line">1523525431873</span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h1><h2 id="初始化、打印"><a href="#初始化、打印" class="headerlink" title="初始化、打印"></a>初始化、打印</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">3</span>, <span class="number">1</span>)</span></span>;<span class="comment">//初始化3个1</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v1</span><span class="params">(<span class="number">3</span>)</span></span>;<span class="comment">//初始化3个0</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;<span class="comment">//初始化5个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x:v)<span class="built_in">cout</span> &lt;&lt; x;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x:v1)<span class="built_in">cout</span> &lt;&lt; x;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x:v2)<span class="built_in">cout</span> &lt;&lt; x;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">111</span><br><span class="line">000</span><br><span class="line">12345</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h2 id="取元素-或者at"><a href="#取元素-或者at" class="headerlink" title="取元素 []或者at()"></a>取元素 []或者at()</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;<span class="comment">//初始化5个数</span></span><br><span class="line">    <span class="comment">//取某个元素</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;v[<span class="number">2</span>];<span class="comment">//取索引为2 元素</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;v.at(<span class="number">4</span>);<span class="comment">//取索引为4的元素</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="追加push-back"><a href="#追加push-back" class="headerlink" title="追加push_back"></a>追加push_back</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;<span class="comment">//初始化5个数</span></span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x:v) <span class="built_in">cout</span> &lt;&lt; x;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12345777</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h2 id="resize重置大小，后面补0"><a href="#resize重置大小，后面补0" class="headerlink" title="resize重置大小，后面补0"></a>resize重置大小，后面补0</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;<span class="comment">//初始化5个数</span></span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x:v) <span class="built_in">cout</span> &lt;&lt; x;</span><br><span class="line">    v.resize(<span class="number">20</span>);<span class="comment">//进行重置大小，后面补0</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x:v) <span class="built_in">cout</span> &lt;&lt; x;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12345777</span><br><span class="line">12345777000000000000</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h2 id="erase删除，在vector中的复杂度为O-n"><a href="#erase删除，在vector中的复杂度为O-n" class="headerlink" title="erase删除，在vector中的复杂度为O(n)"></a>erase删除，在vector中的复杂度为O(n)</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;<span class="comment">//初始化5个数</span></span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x:v) <span class="built_in">cout</span> &lt;&lt; x;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//删除,在这里的复杂度为O(n)</span></span><br><span class="line">    v.erase(v.begin());</span><br><span class="line">    v.erase(--v.end());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x:v) <span class="built_in">cout</span> &lt;&lt; x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12345777</span><br><span class="line">234577</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h2 id="front-back"><a href="#front-back" class="headerlink" title="front(),back()"></a>front(),back()</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;<span class="comment">//初始化5个数</span></span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x:v) <span class="built_in">cout</span> &lt;&lt; x;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//取元素</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v.front() &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; v.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *v.begin() &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; *(--v.end()) &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; v[v.size() - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12345777</span><br><span class="line">1 7</span><br><span class="line">1 7 7</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h2 id="排序sort"><a href="#排序sort" class="headerlink" title="排序sort"></a>排序sort</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v&#123;<span class="number">1</span>, <span class="number">55</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">25</span>&#125;;<span class="comment">//初始化5个数</span></span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x:v) <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    sort(v.begin(), v.end());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x:v) <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    sort(v.rbegin(), v.rend());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x:v) <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 55 15 4 25 7 7 7</span><br><span class="line">1 4 7 7 7 15 25 55</span><br><span class="line">55 25 15 7 7 7 4 1</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<ul>
<li>从大到小还可以用<br><code>sort(v.begin(), v.end(), greater&lt;&gt;());</code><h2 id="循环与string的类似"><a href="#循环与string的类似" class="headerlink" title="循环与string的类似"></a>循环与string的类似</h2></li>
<li>用的较多的是<code>for (auto x:v) cout &lt;&lt; x &lt;&lt; &#39; &#39;;</code></li>
</ul>
<h1 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ul>
<li>一般刷算法题都直接这样写<code> stack&lt;int&gt; s;</code></li>
<li>如果不用<code>&lt;bits/stdc++.h&gt;</code>,那要用<code>&lt;stack&gt;</code><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="push-pop-top"><a href="#push-pop-top" class="headerlink" title="push, pop, top"></a>push, pop, top</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    s.push(<span class="number">2</span>);</span><br><span class="line">    s.push(<span class="number">1</span>);</span><br><span class="line">    s.push(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s.top();</span><br><span class="line">    s.pop();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s.top();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">31</span><br></pre></td></tr></table></figure></li>
<li>push 入栈</li>
<li>pop出栈</li>
<li>top取栈顶</li>
<li>size取长度</li>
<li><code>cout &lt;&lt; s.empty();</code> 是空就返回1，否则为0<h2 id="十进制转二进制"><a href="#十进制转二进制" class="headerlink" title="十进制转二进制"></a>十进制转二进制</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tenToTwo</span><span class="params">(<span class="keyword">int</span> decimal)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (decimal != <span class="number">0</span>) &#123;</span><br><span class="line">        s.push(decimal % <span class="number">2</span>);</span><br><span class="line">        decimal /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!s.empty()) &#123;</span><br><span class="line">        res = res * <span class="number">10</span> + s.top();</span><br><span class="line">        s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; tenToTwo(<span class="number">11</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1011</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h2 id="逆序输出句子单词"><a href="#逆序输出句子单词" class="headerlink" title="逆序输出句子单词"></a>逆序输出句子单词</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    getline(<span class="built_in">cin</span>, str);</span><br><span class="line">    ss &lt;&lt; str;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="built_in">string</span>&gt; s;</span><br><span class="line">    <span class="keyword">while</span> (ss &gt;&gt; str) &#123;</span><br><span class="line">        s.push(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!s.empty()) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s.top();</span><br><span class="line">        <span class="keyword">if</span> (s.size() != <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">we are young man</span><br><span class="line">man young are we</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h2 id="字符串转化为数字"><a href="#字符串转化为数字" class="headerlink" title="字符串转化为数字"></a>字符串转化为数字</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    <span class="built_in">string</span> str = <span class="string">&quot;12455&quot;</span>;</span><br><span class="line">    <span class="comment">//把字符串转换为数字</span></span><br><span class="line">    ss &lt;&lt; str;<span class="comment">//先把“12345”流入ss</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    ss &gt;&gt; num;<span class="comment">//再从ss流入整型num</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; num;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>12455<br>Process finished with exit code 0</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 方法二</span><br><span class="line">​&#96;&#96;&#96;c++</span><br><span class="line">int main() &#123;</span><br><span class="line">    stringstream ss;</span><br><span class="line">    string str &#x3D; &quot;12455&quot;;</span><br><span class="line">    &#x2F;&#x2F;把字符串转换为数字</span><br><span class="line">    int num &#x3D; stoi(str);</span><br><span class="line">    cout &lt;&lt; num;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12455</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h2 id="数字转换为字符串"><a href="#数字转换为字符串" class="headerlink" title="数字转换为字符串"></a>数字转换为字符串</h2><h3 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="comment">//数字转化为字符串</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">12556</span>;</span><br><span class="line">    ss &lt;&lt; num;</span><br><span class="line">    ss &gt;&gt; str;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; str;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12556</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="comment">//数字转化为字符串</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">12556</span>;</span><br><span class="line">    str = to_string(num);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; str;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12556</span><br></pre></td></tr></table></figure>
<h1 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(<span class="number">4</span>);</span><br><span class="line">    q.push(<span class="number">3</span>);</span><br><span class="line">    q.push(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;q.size()&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;q.front();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 4</span><br></pre></td></tr></table></figure>
<h1 id="map-和-unordered-map"><a href="#map-和-unordered-map" class="headerlink" title="map 和 unordered_map"></a>map 和 unordered_map</h1><ul>
<li>map: 有序的，底层是树状结构<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; dict;</span><br><span class="line">    dict[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    dict[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    dict[<span class="number">4</span>] = <span class="number">12</span>;</span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> item: dict)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; item.first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; item.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//另一种打印方式</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> iterator = dict.begin(); iterator != dict.end(); iterator++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; iterator-&gt;first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; iterator-&gt;second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 2</span><br><span class="line">2 0</span><br><span class="line">4 12</span><br><span class="line">1 2</span><br><span class="line">2 0</span><br><span class="line">4 12</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li>unordered——map：无序的，底层是哈希结构</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; dict;</span><br><span class="line">    dict[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    dict[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    dict[<span class="number">4</span>] = <span class="number">12</span>;</span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> item: dict)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; item.first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; item.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//另一种打印方式</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> iterator = dict.begin(); iterator != dict.end(); iterator++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; iterator-&gt;first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; iterator-&gt;second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 12</span><br><span class="line">1 2</span><br><span class="line">2 0</span><br><span class="line">4 12</span><br><span class="line">1 2</span><br><span class="line">2 0</span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>打印出来是无序的<h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="comment">//    set&lt;int&gt; s;</span></span><br><span class="line">    s.insert(<span class="number">2</span>);</span><br><span class="line">    s.insert(<span class="number">2</span>);</span><br><span class="line">    s.insert(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i:s)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">232</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h1 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">deque</span>;</span><br><span class="line">    <span class="built_in">deque</span>.push_back(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">deque</span>.push_back(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">deque</span>.push_front(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">deque</span>.push_front(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i: <span class="built_in">deque</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line">    <span class="built_in">deque</span>.pop_back();</span><br><span class="line">    <span class="built_in">deque</span>.pop_front();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i: <span class="built_in">deque</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4312</span><br><span class="line">31</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h2 id="可以排序"><a href="#可以排序" class="headerlink" title="可以排序"></a>可以排序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">deque</span>;</span><br><span class="line">    <span class="built_in">deque</span>.push_back(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">deque</span>.push_back(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">deque</span>.push_front(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">deque</span>.push_front(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i: <span class="built_in">deque</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line">    sort(<span class="built_in">deque</span>.begin(), <span class="built_in">deque</span>.end());</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i: <span class="built_in">deque</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4312</span><br><span class="line">1234</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h1 id="list"><a href="#list" class="headerlink" title="list"></a>list</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">list</span>;</span><br><span class="line">    <span class="built_in">list</span>.push_front(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">list</span>.push_front(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">list</span>.push_back(<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">list</span>.push_back(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i: <span class="built_in">list</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//插入</span></span><br><span class="line">    <span class="built_in">list</span>.insert(++<span class="built_in">list</span>.begin(), <span class="number">99</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i: <span class="built_in">list</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//里面的值</span></span><br><span class="line">    <span class="built_in">list</span>.remove(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i: <span class="built_in">list</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 2 4 1</span><br><span class="line">3 99 2 4 1</span><br><span class="line">99 2 4 1</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>OJ</tag>
      </tags>
  </entry>
  <entry>
    <title>Scarpy保存数据到json文件</title>
    <url>/2020/08/28/ScrapySaveToJson/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：利用items和命令行保存成json格式的文件</p>
<a id="more"></a>

<h1 id="在items-py中设置需要保存的属性"><a href="#在items-py中设置需要保存的属性" class="headerlink" title="在items.py中设置需要保存的属性"></a>在items.py中设置需要保存的属性</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestscrapyItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    page = scrapy.Field()</span><br><span class="line">    name = scrapy.Field()</span><br><span class="line">    word = scrapy.Field()</span><br></pre></td></tr></table></figure>
<h1 id="在爬虫文件实例Item对象"><a href="#在爬虫文件实例Item对象" class="headerlink" title="在爬虫文件实例Item对象"></a>在爬虫文件实例Item对象</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">item = TestscrapyItem(page=self.page_num, name=people, word=word)</span><br><span class="line"><span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure>
<h1 id="注意item抛回的代码位置"><a href="#注意item抛回的代码位置" class="headerlink" title="注意item抛回的代码位置"></a>注意item抛回的代码位置</h1><ul>
<li>以上次爬取的名人名言为例<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> testScrapy.items <span class="keyword">import</span> TestscrapyItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MassageSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;msg_crawl&#x27;</span>  <span class="comment"># 爬虫的名字，一定要给</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;http://quotes.toscrape.com/page/1/&#x27;</span>]  <span class="comment"># 起始的url</span></span><br><span class="line">    page_num = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对爬到的网页进行解析</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response, **kwargs</span>):</span></span><br><span class="line">        soup = BeautifulSoup(response.body, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        nodes = soup.find_all(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;quote&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">            word = node.find(<span class="string">&#x27;span&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;text&#x27;</span>&#125;).text</span><br><span class="line">            people = node.find(<span class="string">&#x27;small&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;author&#x27;</span>&#125;).text</span><br><span class="line">            item = TestscrapyItem(page=self.page_num, name=people, word=word)</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line">            <span class="comment"># print(&#x27;&#123;0:&lt;4&#125;: &#123;1:&lt;20&#125; said: &#123;2:&lt;20&#125;&#x27;.format(self.page_num, people, word))</span></span><br><span class="line">        print(<span class="string">&#x27;==================ok================&#x27;</span>)</span><br><span class="line">        self.page_num += <span class="number">1</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url = soup.find(<span class="string">&#x27;li&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;next&#x27;</span>&#125;).a[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> url <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                next_link = <span class="string">&#x27;http://quotes.toscrape.com&#x27;</span> + url</span><br><span class="line">                <span class="keyword">yield</span> scrapy.Request(next_link, callback=self.parse)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            print(<span class="string">&#x27;所有页面爬取结束！&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li>每次获取到一页的数据就存回，所以放在for里面</li>
</ul>
<h1 id="输入指令"><a href="#输入指令" class="headerlink" title="输入指令"></a>输入指令</h1><p><code>scrapy crawl &lt;爬虫名字&gt; -o &lt;json文件名&gt; -t json</code><br>或者<br><code>scrapy crawl  &lt;爬虫名字&gt; -o &lt;json文件名&gt; -a tag=humor</code></p>
<ul>
<li><p>eg:</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy crawl msg_crawl -o res.json -t json</span><br></pre></td></tr></table></figure>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy crawl  msg_crawl -o res.json -a tag&#x3D;humor</span><br></pre></td></tr></table></figure></li>
<li><p>对比发现，用第二种不会出现警告，但是两种都是可以保存的</p>
</li>
<li><p>结果如下<br><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200828152112786-954263740.png"><br><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200828152146561-14727478.png"></p>
</li>
</ul>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><ul>
<li>如果还要爬取每个页面的作者的链接，要用<code>yield response.follow(author_link, self.author_parse)</code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 现在找到作者链接后，进去爬里面的数据信息</span></span><br><span class="line">author_link = <span class="string">&#x27;http://quotes.toscrape.com/&#x27;</span> + node.find_all(<span class="string">&#x27;span&#x27;</span>)[<span class="number">1</span>].a[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line"><span class="keyword">yield</span> response.follow(author_link, self.author_parse)</span><br></pre></td></tr></table></figure></li>
<li>然后要保存成json时，和上面一样用item封装起来</li>
<li>具体见我github<br><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200831000400186-1659067932.png"><br><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200831001517182-1565861022.png"></li>
</ul>
]]></content>
      <categories>
        <category>Scrapy网络爬虫</category>
      </categories>
      <tags>
        <tag>人工智能</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Scrapy框架</title>
    <url>/2020/08/24/ScrapySetup/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：python Scrapy框架的安装</p>
<a id="more"></a>

<h1 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h1><ul>
<li><p>在安装scrapy之前，需要先安装几个必须的依赖库</p>
<pre><code> 如果直接pip安装scrapy，那很可能会报错，除非已经安装了依赖库
</code></pre>
</li>
<li><p>win10下，打开cmd/powershell/cmder/…其中一个终端，输入</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install lxml -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip3 install pyOpenSSL -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip3 install pywin32 -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>
<ul>
<li><p>上面这3个大多是已经本来就安装好的了，接下来Twisted就可能会有这种情况<br>要么pip安装时报错，要么pycharm也不行，那就需要去下他的whl</p>
<pre><code>https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted
</code></pre>
</li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200824221618375-138757690.png"></p>
<p>比如我是python3.8的，win64的，所以就按对应的版本下载</p>
<ul>
<li>下载完成后，在下载文件目录打开cmd，或者cd到这个路径<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install Twisted-<span class="number">20.3</span><span class="number">.0</span>-cp38-cp38m-win_amd64.whl</span><br></pre></td></tr></table></figure>
<h1 id="安装scrapy"><a href="#安装scrapy" class="headerlink" title="安装scrapy"></a>安装scrapy</h1></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install scrapy -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<ul>
<li>成功安装<br><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200824222840335-716559278.png"></li>
</ul>
]]></content>
      <categories>
        <category>Scrapy网络爬虫</category>
      </categories>
      <tags>
        <tag>人工智能</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy处理分页</title>
    <url>/2020/08/27/ScrapyPagination/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：scrapy多页爬取识别机制、请求头局部设置</p>
<a id="more"></a>

<h1 id="多页爬取"><a href="#多页爬取" class="headerlink" title="多页爬取"></a>多页爬取</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul>
<li>每一次爬取完当前页的信息时，找到下一页的链接</li>
<li>然后用这个yield不断生成请求，每次调用parse继续往下执行<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">yield</span> scrapy.Request(next_link, callback=self.parse)</span><br></pre></td></tr></table></figure>
<h2 id="以爬取某网站名人名言为例"><a href="#以爬取某网站名人名言为例" class="headerlink" title="以爬取某网站名人名言为例"></a>以爬取某网站名人名言为例</h2></li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200827231630216-1183007258.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/27</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MassageSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;msg_crawl&#x27;</span>  <span class="comment"># 爬虫的名字，一定要给</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;http://quotes.toscrape.com/page/1/&#x27;</span>]  <span class="comment"># 起始的url</span></span><br><span class="line"></span><br><span class="line">    page_num = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对爬到的网页进行解析</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response, **kwargs</span>):</span></span><br><span class="line">        soup = BeautifulSoup(response.body, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        nodes = soup.find_all(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;quote&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">            word = node.find(<span class="string">&#x27;span&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;text&#x27;</span>&#125;).text</span><br><span class="line">            people = node.find(<span class="string">&#x27;small&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;author&#x27;</span>&#125;).text</span><br><span class="line">            print(<span class="string">&#x27;&#123;0:&lt;4&#125;: &#123;1:&lt;20&#125; said: &#123;2:&lt;20&#125;&#x27;</span>.<span class="built_in">format</span>(self.page_num, people, word))</span><br><span class="line"></span><br><span class="line">        self.page_num += <span class="number">1</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url = soup.find(<span class="string">&#x27;li&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;next&#x27;</span>&#125;).a[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> url <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                next_link = <span class="string">&#x27;http://quotes.toscrape.com&#x27;</span> + url</span><br><span class="line">                <span class="keyword">yield</span> scrapy.Request(next_link, callback=self.parse)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            print(<span class="string">&#x27;所有页面爬取结束！&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>结果：<br><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200827231134693-2071176664.png"><br><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200827231224924-1684003206.png"></li>
</ul>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul>
<li><p><code>scrapy.Request</code>的url参数必须是字符串</p>
</li>
<li><p>最后一页结束时要处理没有下一页链接的情况，可以捕获异常</p>
</li>
<li><p>有些爬不了可能是请求头问题，所以要设置模拟浏览器请求头</p>
<ul>
<li><p>需要设置请求头</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">custom_settings = &#123;</span><br><span class="line">       <span class="string">&quot;USER_AGENT&quot;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64)   AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36&#x27;</span>,</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>也可以在setting.py里面设置，具体见网上资料，这里是局部设置</p>
</li>
</ul>
</li>
</ul>
<h2 id="爬取豆瓣某书籍评论"><a href="#爬取豆瓣某书籍评论" class="headerlink" title="爬取豆瓣某书籍评论"></a>爬取豆瓣某书籍评论</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/28</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;comment_spider&#x27;</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;https://book.douban.com/subject/35092383/annotation&#x27;</span>]</span><br><span class="line">    custom_settings = &#123;</span><br><span class="line">        <span class="string">&quot;USER_AGENT&quot;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    page_num = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response, **kwargs</span>):</span></span><br><span class="line">        soup = BeautifulSoup(response.body, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        nodes = soup.find_all(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;short&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&#x27;======================&#123;&#125;======================&#x27;</span>.<span class="built_in">format</span>(self.page_num))</span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">            comment = node.find(<span class="string">&#x27;span&#x27;</span>).text</span><br><span class="line">            print(comment, end=<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line">        self.page_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 其他页链接</span></span><br><span class="line">        num = <span class="number">10</span> * self.page_num</span><br><span class="line">        <span class="keyword">if</span> self.page_num &lt;= <span class="number">28</span>:</span><br><span class="line">            url = <span class="string">&#x27;https://book.douban.com/subject/35092383/annotation?sort=rank&amp;start=&#x27;</span> + <span class="built_in">str</span>(num)</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url, callback=self.parse)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200828132947880-360085597.png"></p>
]]></content>
      <categories>
        <category>Scrapy网络爬虫</category>
      </categories>
      <tags>
        <tag>人工智能</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>用户流失预测</title>
    <url>/2020/09/05/UserChurnForecast/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：逻辑回归应用</p>
<a id="more"></a>

<h1 id="Churn-Modeling"><a href="#Churn-Modeling" class="headerlink" title="Churn Modeling"></a>Churn Modeling</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/9/5</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deal_train</span>(<span class="params">path</span>):</span></span><br><span class="line">    train_data = pd.read_csv(path)</span><br><span class="line">    <span class="comment"># 处理国家转换为数字</span></span><br><span class="line">    train_data.loc[train_data[<span class="string">&#x27;Geography&#x27;</span>] == <span class="string">&#x27;France&#x27;</span>, <span class="string">&#x27;Geography&#x27;</span>] = <span class="number">1</span></span><br><span class="line">    train_data.loc[train_data[<span class="string">&#x27;Geography&#x27;</span>] == <span class="string">&#x27;Spain&#x27;</span>, <span class="string">&#x27;Geography&#x27;</span>] = <span class="number">2</span></span><br><span class="line">    train_data.loc[train_data[<span class="string">&#x27;Geography&#x27;</span>] == <span class="string">&#x27;Germany&#x27;</span>, <span class="string">&#x27;Geography&#x27;</span>] = <span class="number">3</span></span><br><span class="line">    <span class="comment"># 处理性别</span></span><br><span class="line">    train_data.loc[train_data[<span class="string">&#x27;Gender&#x27;</span>] == <span class="string">&#x27;Female&#x27;</span>, <span class="string">&#x27;Gender&#x27;</span>] = <span class="number">0</span></span><br><span class="line">    train_data.loc[train_data[<span class="string">&#x27;Gender&#x27;</span>] == <span class="string">&#x27;Male&#x27;</span>, <span class="string">&#x27;Gender&#x27;</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选取有用的特征</span></span><br><span class="line">    feature = [<span class="string">&#x27;CreditScore&#x27;</span>, <span class="string">&#x27;Geography&#x27;</span>, <span class="string">&#x27;Gender&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;Tenure&#x27;</span>, <span class="string">&#x27;Balance&#x27;</span>, <span class="string">&#x27;NumOfProducts&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;HasCrCard&#x27;</span>, <span class="string">&#x27;IsActiveMember&#x27;</span>, <span class="string">&#x27;EstimatedSalary&#x27;</span>]</span><br><span class="line">    x_data = train_data[feature]</span><br><span class="line">    y_data = train_data[<span class="string">&#x27;Exited&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对数据进行标准化</span></span><br><span class="line">    sc = StandardScaler()</span><br><span class="line">    x_data = sc.fit_transform(x_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x_data, y_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    x_train_data, y_train_data = deal_train(<span class="string">&#x27;data/Churn-Modelling.csv&#x27;</span>)</span><br><span class="line">    x_test, y_test = deal_train(<span class="string">&#x27;data/Churn-Modelling-Test-Data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 建模,可以多试试其他模型</span></span><br><span class="line">    lr = LogisticRegression()</span><br><span class="line">    lr.fit(x_train_data, y_train_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 预测</span></span><br><span class="line">    pred = lr.predict(x_test)</span><br><span class="line">    print(classification_report(pred, y_test))</span><br><span class="line">    print(lr.score(x_test, y_test))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\Anaconda\Anaconda3\python.exe D:&#x2F;Appication&#x2F;PyCharm&#x2F;Git&#x2F;kaggle-project&#x2F;ChurnModelling&#x2F;churn_predict.py</span><br><span class="line">              precision    recall  f1-score   support</span><br><span class="line"></span><br><span class="line">           0       0.96      0.76      0.85       934</span><br><span class="line">           1       0.15      0.61      0.25        66</span><br><span class="line"></span><br><span class="line">    accuracy                           0.75      1000</span><br><span class="line">   macro avg       0.56      0.69      0.55      1000</span><br><span class="line">weighted avg       0.91      0.75      0.81      1000</span><br><span class="line"></span><br><span class="line">0.754</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<ul>
<li>重点是处理好数据</li>
<li>可以使用其他模型进行优化</li>
</ul>
]]></content>
      <categories>
        <category>Kaggle</category>
      </categories>
      <tags>
        <tag>Python机器学习</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>Kaggle——Titanic预测</title>
    <url>/2020/09/01/TitanicPred/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：kaggle竞赛题</p>
<a id="more"></a>

<h1 id="下载数据集到本地"><a href="#下载数据集到本地" class="headerlink" title="下载数据集到本地"></a>下载数据集到本地</h1><p><img src="https://img2020.cnblogs.com/blog/2134757/202009/2134757-20200902005121355-524643337.png"><br><img src="https://img2020.cnblogs.com/blog/2134757/202009/2134757-20200902005244502-2057436871.png"><br><img src="https://img2020.cnblogs.com/blog/2134757/202009/2134757-20200902005322296-2105042406.png"></p>
<h1 id="分析数据"><a href="#分析数据" class="headerlink" title="分析数据"></a>分析数据</h1><ul>
<li>先知晓各个数据特征的含义，观察一下</li>
<li>找到有用的，也就是可以影响到预测标签的数据</li>
<li>没有用的数据不用管</li>
</ul>
<h1 id="处理数据"><a href="#处理数据" class="headerlink" title="处理数据"></a>处理数据</h1><ul>
<li><p>这些有用的数据中，有些可能是空值</p>
<ul>
<li>如果该列数据较多，就取平均值</li>
<li>如果极少，可以删了该行数据</li>
</ul>
</li>
<li><p>有些有用的数据是字符串，不是数值，需要转化为数值</p>
</li>
</ul>
<h1 id="把各类模型跑一遍，找到分最高的"><a href="#把各类模型跑一遍，找到分最高的" class="headerlink" title="把各类模型跑一遍，找到分最高的"></a>把各类模型跑一遍，找到分最高的</h1><ul>
<li>使用交叉验证，对比各个分数</li>
<li>这里只列举部分模型，还可以继续添加模型继续对比，或者调参，选出更好的<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/9/1</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;train.csv&#x27;</span>)</span><br><span class="line"><span class="comment"># print(data)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;先处理空缺的数据&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理空缺的年龄，设为平均年龄</span></span><br><span class="line">data[<span class="string">&#x27;Age&#x27;</span>] = data[<span class="string">&#x27;Age&#x27;</span>].fillna(data[<span class="string">&#x27;Age&#x27;</span>].median())</span><br><span class="line"><span class="comment"># print(data.describe())</span></span><br><span class="line"><span class="comment"># 处理性别，转化维0和1,loc是取数据的，里面传行，列</span></span><br><span class="line">data.loc[data[<span class="string">&#x27;Sex&#x27;</span>] == <span class="string">&#x27;male&#x27;</span>, <span class="string">&#x27;Sex&#x27;</span>] = <span class="number">1</span></span><br><span class="line">data.loc[data[<span class="string">&#x27;Sex&#x27;</span>] == <span class="string">&#x27;female&#x27;</span>, <span class="string">&#x27;Sex&#x27;</span>] = <span class="number">0</span></span><br><span class="line"><span class="comment"># print(data.loc[:, &#x27;Sex&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理Embarked，登录港口</span></span><br><span class="line"><span class="comment"># print(data[&#x27;Embarked&#x27;].unique())  # 看一下里面有几类</span></span><br><span class="line"><span class="comment"># 由于&#x27;S&#x27;比较多，就把空值用S填充</span></span><br><span class="line">data[<span class="string">&#x27;Embarked&#x27;</span>] = data[<span class="string">&#x27;Embarked&#x27;</span>].fillna(<span class="string">&#x27;S&#x27;</span>)</span><br><span class="line"><span class="comment"># 转化为数字</span></span><br><span class="line">data.loc[data[<span class="string">&#x27;Embarked&#x27;</span>] == <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;Embarked&#x27;</span>] = <span class="number">0</span></span><br><span class="line">data.loc[data[<span class="string">&#x27;Embarked&#x27;</span>] == <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;Embarked&#x27;</span>] = <span class="number">1</span></span><br><span class="line">data.loc[data[<span class="string">&#x27;Embarked&#x27;</span>] == <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;Embarked&#x27;</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;接下来选取有用的特征&#x27;&#x27;&#x27;</span></span><br><span class="line">feature = [<span class="string">&#x27;Pclass&#x27;</span>, <span class="string">&#x27;Sex&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;SibSp&#x27;</span>, <span class="string">&#x27;Parch&#x27;</span>, <span class="string">&#x27;Fare&#x27;</span>, <span class="string">&#x27;Embarked&#x27;</span>]</span><br><span class="line">x_data = data[feature]</span><br><span class="line">y_data = data[<span class="string">&#x27;Survived&#x27;</span>]  <span class="comment"># 预测的标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据标准化</span></span><br><span class="line">scaler = StandardScaler()</span><br><span class="line">x_data = scaler.fit_transform(x_data)</span><br><span class="line"><span class="comment"># print(x_data)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;处理完数据之后，现在可以使用各自算法看看效果了&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score  <span class="comment"># 导入交叉验证后的分数</span></span><br><span class="line"><span class="comment"># 逻辑回归</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"></span><br><span class="line">lr = LogisticRegression()</span><br><span class="line"><span class="comment"># 计算交叉验证的误差，分三组</span></span><br><span class="line">scores = cross_val_score(lr, x_data, y_data, cv=<span class="number">3</span>)</span><br><span class="line">print(scores.mean())  <span class="comment"># 求平均</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 神经网络模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn.neural_network <span class="keyword">import</span> MLPClassifier</span><br><span class="line"></span><br><span class="line">mlp = MLPClassifier(hidden_layer_sizes=(<span class="number">20</span>, <span class="number">10</span>), max_iter=<span class="number">2000</span>)</span><br><span class="line"><span class="comment"># 计算交叉验证的误差，分三组</span></span><br><span class="line">scores = cross_val_score(mlp, x_data, y_data, cv=<span class="number">3</span>)</span><br><span class="line">print(scores.mean())  <span class="comment"># 求平均</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kNN</span></span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"></span><br><span class="line">kNN = KNeighborsClassifier(n_neighbors=<span class="number">21</span>)</span><br><span class="line">scores = cross_val_score(kNN, x_data, y_data, cv=<span class="number">3</span>)</span><br><span class="line">print(scores.mean())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 决策树</span></span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最小分割样本数，小于4个就不往下分割了</span></span><br><span class="line">d_tree = DecisionTreeClassifier(max_depth=<span class="number">3</span>, min_samples_split=<span class="number">4</span>)</span><br><span class="line">scores = cross_val_score(d_tree, x_data, y_data, cv=<span class="number">3</span>)</span><br><span class="line">print(scores.mean())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;下面是集成学习&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 随机森林</span></span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"></span><br><span class="line">rf1 = RandomForestClassifier(random_state=<span class="number">1</span>, n_estimators=<span class="number">10</span>, min_samples_split=<span class="number">2</span>)</span><br><span class="line">scores = cross_val_score(rf1, x_data, y_data, cv=<span class="number">3</span>)</span><br><span class="line">print(scores.mean())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 100棵决策树构成</span></span><br><span class="line">rf2 = RandomForestClassifier(n_estimators=<span class="number">100</span>, min_samples_split=<span class="number">4</span>)</span><br><span class="line">scores = cross_val_score(rf2, x_data, y_data, cv=<span class="number">3</span>)</span><br><span class="line">print(scores.mean())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bagging</span></span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> BaggingClassifier</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集成rf2，做20次有放回的抽样,由于rf2也是集成学习模型，所以运行时间有点久</span></span><br><span class="line">bg = BaggingClassifier(rf2, n_estimators=<span class="number">20</span>)</span><br><span class="line">scores = cross_val_score(bg, x_data, y_data, cv=<span class="number">3</span>)</span><br><span class="line">print(scores.mean())</span><br><span class="line"></span><br><span class="line"><span class="comment"># AdaBoostClassifier</span></span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> AdaBoostClassifier</span><br><span class="line"></span><br><span class="line">adb = AdaBoostClassifier(rf2, n_estimators=<span class="number">20</span>)</span><br><span class="line">scores = cross_val_score(adb, x_data, y_data, cv=<span class="number">3</span>)</span><br><span class="line">print(scores.mean())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Stacking</span></span><br><span class="line"><span class="keyword">from</span> mlxtend.classifier <span class="keyword">import</span> StackingClassifier</span><br><span class="line"></span><br><span class="line">stacking = StackingClassifier(classifiers=[bg, mlp, lr],</span><br><span class="line">                              meta_classifier=LogisticRegression())</span><br><span class="line">scores = cross_val_score(stacking, x_data, y_data, cv=<span class="number">3</span>)</span><br><span class="line">print(scores.mean())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Voting</span></span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> VotingClassifier</span><br><span class="line"></span><br><span class="line">voting = VotingClassifier([(<span class="string">&#x27;ado&#x27;</span>, adb), (<span class="string">&#x27;mlp&#x27;</span>, mlp),</span><br><span class="line">                           (<span class="string">&#x27;LR&#x27;</span>, lr), (<span class="string">&#x27;kNN&#x27;</span>, kNN),</span><br><span class="line">                           (<span class="string">&#x27;d_tree&#x27;</span>, d_tree)])</span><br><span class="line">scores = cross_val_score(voting, x_data, y_data, cv=<span class="number">3</span>)</span><br><span class="line">print(scores.mean())</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>结果<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.7901234567901234</span><br><span class="line">0.8024691358024691</span><br><span class="line">0.8125701459034792</span><br><span class="line">0.8103254769921436</span><br><span class="line">0.8013468013468014</span><br><span class="line">0.819304152637486</span><br><span class="line">0.8204264870931538</span><br><span class="line">0.7991021324354658</span><br><span class="line">0.819304152637486</span><br><span class="line">0.8170594837261503</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></li>
<li>可以发现Bagging集成随机森林的效果相对不错</li>
<li>接下来就用它来试试</li>
</ul>
<h1 id="使用该较好模型进行预测"><a href="#使用该较好模型进行预测" class="headerlink" title="使用该较好模型进行预测"></a>使用该较好模型进行预测</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/9/2</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> BaggingClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先处理空缺的数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deal_train</span>(<span class="params">train_data</span>):</span></span><br><span class="line">    <span class="comment"># 处理空缺的年龄，设为平均年龄</span></span><br><span class="line">    train_data[<span class="string">&#x27;Age&#x27;</span>] = train_data[<span class="string">&#x27;Age&#x27;</span>].fillna(train_data[<span class="string">&#x27;Age&#x27;</span>].median())</span><br><span class="line">    <span class="comment"># print(train_data.describe())</span></span><br><span class="line">    <span class="comment"># 处理性别，转化维0和1,loc是取数据的，里面传行，列</span></span><br><span class="line">    train_data.loc[train_data[<span class="string">&#x27;Sex&#x27;</span>] == <span class="string">&#x27;male&#x27;</span>, <span class="string">&#x27;Sex&#x27;</span>] = <span class="number">1</span></span><br><span class="line">    train_data.loc[train_data[<span class="string">&#x27;Sex&#x27;</span>] == <span class="string">&#x27;female&#x27;</span>, <span class="string">&#x27;Sex&#x27;</span>] = <span class="number">0</span></span><br><span class="line">    <span class="comment"># print(train_data.loc[:, &#x27;Sex&#x27;])</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理Embarked，登录港口</span></span><br><span class="line">    <span class="comment"># print(train_data[&#x27;Embarked&#x27;].unique())  # 看一下里面有几类</span></span><br><span class="line">    <span class="comment"># 由于&#x27;S&#x27;比较多，就把空值用S填充</span></span><br><span class="line">    train_data[<span class="string">&#x27;Embarked&#x27;</span>] = train_data[<span class="string">&#x27;Embarked&#x27;</span>].fillna(<span class="string">&#x27;S&#x27;</span>)</span><br><span class="line">    <span class="comment"># 转化为数字</span></span><br><span class="line">    train_data.loc[train_data[<span class="string">&#x27;Embarked&#x27;</span>] == <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;Embarked&#x27;</span>] = <span class="number">0</span></span><br><span class="line">    train_data.loc[train_data[<span class="string">&#x27;Embarked&#x27;</span>] == <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;Embarked&#x27;</span>] = <span class="number">1</span></span><br><span class="line">    train_data.loc[train_data[<span class="string">&#x27;Embarked&#x27;</span>] == <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;Embarked&#x27;</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;接下来选取有用的特征&#x27;&#x27;&#x27;</span></span><br><span class="line">    feature = [<span class="string">&#x27;Pclass&#x27;</span>, <span class="string">&#x27;Sex&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;SibSp&#x27;</span>, <span class="string">&#x27;Parch&#x27;</span>, <span class="string">&#x27;Fare&#x27;</span>, <span class="string">&#x27;Embarked&#x27;</span>]</span><br><span class="line">    x_data = train_data[feature]</span><br><span class="line">    y_data = train_data[<span class="string">&#x27;Survived&#x27;</span>]  <span class="comment"># 预测的标签</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据标准化</span></span><br><span class="line">    scaler = StandardScaler()</span><br><span class="line">    x_data = scaler.fit_transform(x_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x_data, y_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理测试集数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deal_test</span>(<span class="params">test_data, label_data</span>):</span></span><br><span class="line">    <span class="comment"># 填充年龄和Fare</span></span><br><span class="line">    test_data[<span class="string">&#x27;Age&#x27;</span>] = test_data[<span class="string">&#x27;Age&#x27;</span>].fillna(test_data[<span class="string">&#x27;Age&#x27;</span>].median())</span><br><span class="line">    test_data[<span class="string">&#x27;Fare&#x27;</span>] = test_data[<span class="string">&#x27;Fare&#x27;</span>].fillna(test_data[<span class="string">&#x27;Fare&#x27;</span>].median())</span><br><span class="line">    <span class="comment"># 处理性别字符串为数值</span></span><br><span class="line">    test_data.loc[test_data[<span class="string">&#x27;Sex&#x27;</span>] == <span class="string">&#x27;male&#x27;</span>, <span class="string">&#x27;Sex&#x27;</span>] = <span class="number">1</span></span><br><span class="line">    test_data.loc[test_data[<span class="string">&#x27;Sex&#x27;</span>] == <span class="string">&#x27;female&#x27;</span>, <span class="string">&#x27;Sex&#x27;</span>] = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 处理登岸地点为数值</span></span><br><span class="line">    test_data.loc[test_data[<span class="string">&#x27;Embarked&#x27;</span>] == <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;Embarked&#x27;</span>] = <span class="number">0</span></span><br><span class="line">    test_data.loc[test_data[<span class="string">&#x27;Embarked&#x27;</span>] == <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;Embarked&#x27;</span>] = <span class="number">1</span></span><br><span class="line">    test_data.loc[test_data[<span class="string">&#x27;Embarked&#x27;</span>] == <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;Embarked&#x27;</span>] = <span class="number">2</span></span><br><span class="line">    <span class="comment"># 接下来选取有用的特征&#x27;&#x27;&#x27;</span></span><br><span class="line">    feature = [<span class="string">&#x27;Pclass&#x27;</span>, <span class="string">&#x27;Sex&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;SibSp&#x27;</span>, <span class="string">&#x27;Parch&#x27;</span>, <span class="string">&#x27;Fare&#x27;</span>, <span class="string">&#x27;Embarked&#x27;</span>]</span><br><span class="line">    x_data = test_data[feature]</span><br><span class="line">    y_data = label_data[<span class="string">&#x27;Survived&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据标准化</span></span><br><span class="line">    scaler = StandardScaler()</span><br><span class="line">    x_data = scaler.fit_transform(x_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x_data, y_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 读入训练集和测试集</span></span><br><span class="line">    train_data = pd.read_csv(<span class="string">&#x27;data/train.csv&#x27;</span>)</span><br><span class="line">    test_data = pd.read_csv(<span class="string">&#x27;data/test.csv&#x27;</span>)</span><br><span class="line">    real_label_data = pd.read_csv(<span class="string">&#x27;data/gender_submission.csv&#x27;</span>)</span><br><span class="line">    <span class="comment"># 队训练集和测试集进行处理</span></span><br><span class="line">    x_train, y_train = deal_train(train_data)</span><br><span class="line">    x_test, y_test = deal_test(test_data, real_label_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 建立模型</span></span><br><span class="line">    rf = RandomForestClassifier(n_estimators=<span class="number">10</span>, max_depth=<span class="number">3</span>, min_samples_split=<span class="number">4</span>)</span><br><span class="line">    bagging = BaggingClassifier(rf, n_estimators=<span class="number">12</span>)</span><br><span class="line">    bagging.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 预测</span></span><br><span class="line">    prediction = bagging.predict(x_test)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评估</span></span><br><span class="line">    print(bagging.score(x_test, y_test))</span><br><span class="line">    print((classification_report(prediction, y_test)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存预测结果为csv</span></span><br><span class="line">    submission = pd.DataFrame(&#123;</span><br><span class="line">        <span class="string">&quot;PassengerId&quot;</span>: test_data[<span class="string">&quot;PassengerId&quot;</span>],</span><br><span class="line">        <span class="string">&quot;Survived&quot;</span>: prediction</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    submission.to_csv(<span class="string">&#x27;predict.csv&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>结果<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.9282296650717703</span><br><span class="line">              precision    recall  f1-score   support</span><br><span class="line"></span><br><span class="line">           0       0.99      0.91      0.95       290</span><br><span class="line">           1       0.82      0.98      0.89       128</span><br><span class="line"></span><br><span class="line">    accuracy                           0.93       418</span><br><span class="line">   macro avg       0.91      0.94      0.92       418</span><br><span class="line">weighted avg       0.94      0.93      0.93       418</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></li>
<li>在迭代测试时发现，效果最好的是score为0.98+</li>
</ul>
<h1 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h1><ul>
<li>有满意的效果就提交看看</li>
<li>注意提交的格式</li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202009/2134757-20200902011042861-424687738.png"></p>
<ul>
<li>直接把生成的csv预测结果文件拖过去<br><img src="https://img2020.cnblogs.com/blog/2134757/202009/2134757-20200902011236260-145576359.png"></li>
<li>然后他就会给出分数和排名<br><img src="https://img2020.cnblogs.com/blog/2134757/202009/2134757-20200902012639118-848280883.png"></li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>要想得到好的预测集上传的高分的话，可以通过不断迭代，找到接近最好的参数</li>
<li>也可以使用更加好的算法和模型拿高分</li>
</ul>
]]></content>
      <categories>
        <category>Kaggle</category>
      </categories>
      <tags>
        <tag>Python机器学习</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>python模拟bfs和dfs，只需修改一处</title>
    <url>/2020/11/08/bfsAndDfsByPython/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：BFS，DFS</p>
<a id="more"></a>

<h1 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/11/8</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 广搜</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span>(<span class="params">graph, start</span>):</span></span><br><span class="line">    queue = [start]  <span class="comment"># 先把起点入队列</span></span><br><span class="line">    visited = <span class="built_in">set</span>()  <span class="comment"># 访问国的点加入</span></span><br><span class="line">    visited.add(start)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(queue):</span><br><span class="line">        vertex = queue.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 找到队列首元素的连接点</span></span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> graph[vertex]:</span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                queue.append(v)</span><br><span class="line">                visited.add(v)</span><br><span class="line">        <span class="comment"># 打印弹出队列的该头元素</span></span><br><span class="line">        print(vertex, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    graph = &#123;</span><br><span class="line">        <span class="string">&#x27;A&#x27;</span>: [<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;I&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;B&#x27;</span>: [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;F&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;C&#x27;</span>: [<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;I&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;D&#x27;</span>: [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;F&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;E&#x27;</span>: [<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;H&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;F&#x27;</span>: [<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;H&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;G&#x27;</span>: [<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;H&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;H&#x27;</span>: [<span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;I&#x27;</span>: [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bfs(graph, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A B D I F C H E G </span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h1 id="BFS-1"><a href="#BFS-1" class="headerlink" title="BFS"></a>BFS</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/11/8</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 深搜</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">graph, start</span>):</span></span><br><span class="line">    stack = [start]</span><br><span class="line">    visited = <span class="built_in">set</span>()</span><br><span class="line">    visited.add(start)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(stack):</span><br><span class="line">        vertex = stack.pop()  <span class="comment"># 找到栈顶元素</span></span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> graph[vertex]:</span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                stack.append(v)</span><br><span class="line">                visited.add(v)</span><br><span class="line"></span><br><span class="line">        print(vertex, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    graph = &#123;</span><br><span class="line">        <span class="string">&#x27;A&#x27;</span>: [<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;I&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;B&#x27;</span>: [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;F&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;C&#x27;</span>: [<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;I&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;D&#x27;</span>: [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;F&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;E&#x27;</span>: [<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;H&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;F&#x27;</span>: [<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;H&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;G&#x27;</span>: [<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;H&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;H&#x27;</span>: [<span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;I&#x27;</span>: [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs(graph, <span class="string">&#x27;E&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E H G F B A I D C </span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>很明显一个用了队列，一个用了栈</li>
<li>利用python语言优势，只需改动pop即可</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>OJ</tag>
      </tags>
  </entry>
  <entry>
    <title>广搜bfs求解迷宫问题</title>
    <url>/2020/10/06/bfsMaze/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：bfs求解迷宫问题</p>
<a id="more"></a>

<ul>
<li>解决的问题同上一篇</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/10/6</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x, y, step</span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">        self.step = step</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">queue = []</span><br><span class="line">dx = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>]</span><br><span class="line">dy = [<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">graph = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line">flags = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    m, n = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        l = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            graph[i][j] = l[j]</span><br><span class="line"></span><br><span class="line">    start_x, start_y = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    end_x, end_y = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">    start_point = Point(start_x, start_y, <span class="number">0</span>)</span><br><span class="line">    queue.append(start_point)</span><br><span class="line">    flags[start_x][start_y] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(queue) != <span class="number">0</span>:</span><br><span class="line">        x = queue[<span class="number">0</span>].x</span><br><span class="line">        y = queue[<span class="number">0</span>].y</span><br><span class="line">        <span class="keyword">if</span> x == end_x <span class="keyword">and</span> y == end_y:</span><br><span class="line">            flag = <span class="number">1</span></span><br><span class="line">            print(<span class="string">&#x27;step = &#x27;</span>, queue[<span class="number">0</span>].step)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">            tx = x + dx[k]</span><br><span class="line">            ty = y + dy[k]</span><br><span class="line">            <span class="keyword">if</span> graph[tx][ty] == <span class="number">1</span> <span class="keyword">and</span> flags[tx][ty] == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 入队</span></span><br><span class="line">                temp = Point(tx, ty, queue[<span class="number">0</span>].step + <span class="number">1</span>)</span><br><span class="line">                queue.append(temp)</span><br><span class="line">                flags[tx][ty] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        queue.pop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">&#x27;no ans&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li><p>相比之下，得到的结果一定是最小值</p>
</li>
<li><p>不用回溯，在这里的速度比dfs快</p>
</li>
<li><p>牺牲空间换时间</p>
</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>OJ</tag>
      </tags>
  </entry>
  <entry>
    <title>分类</title>
    <url>/2020/08/23/classification/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  


<h2 id="分类算法"><a href="#分类算法" class="headerlink" title="分类算法"></a>分类算法</h2><a id="more"></a>



<h4 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h4><ul>
<li><p>垃圾邮件分类 </p>
</li>
<li><p>预测肿瘤是良性还是恶性 </p>
</li>
<li><p>预测某人的信用是否良好</p>
</li>
</ul>
<img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823205518598-1186189920.png" style="zoom:67%;">


<ul>
<li><p>0.5是个分界，上面是g(x)图像</p>
</li>
<li><p>逻辑回归的代价函数</p>
  <img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823205604621-1611243231.png" style="zoom: 67%;">


</li>
</ul>
<ul>
<li>一般使用梯度下降法求解</li>
</ul>
<h5 id="评估分类的结果"><a href="#评估分类的结果" class="headerlink" title="评估分类的结果"></a>评估分类的结果</h5><ul>
<li><strong>正确率/召回率/F1指标</strong></li>
</ul>
<blockquote>
<p>正确率就是检索出来的条目有多少是正确的</p>
<p>召回率就是 所有正确的条目有多少被检索出来了</p>
<img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823205643851-272051049.png" style="zoom:50%;">
</blockquote>
<ul>
<li><p>这几个指标的取值都在0-1之间，数值越接近于1，效果越好</p>
<ul>
<li><p>某池塘有1400条鲤鱼，300只虾，300只鳖。现在以捕鲤鱼为目的。 </p>
<p>  撒一大网，逮着了700条鲤鱼，200只虾，100只鳖。那么，这些指标 </p>
<p>  分别如下： </p>
<p>  正确率 = 700 / (700 + 200 + 100) = 70% </p>
<p>  召回率 = 700 / 1400 = 50% </p>
<p>  F值 = 70% * 50% * 2 / (70% + 50%) = 58.3%</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>使用classification_report得到<strong>正确率/召回率/F1指标</strong></p>
<ul>
<li><p>eg</p>
<p>  <img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823205732288-1226968292.png"></p>
</li>
</ul>
</li>
</ul>
<h5 id="使用梯度下降法解决逻辑回归"><a href="#使用梯度下降法解决逻辑回归" class="headerlink" title="使用梯度下降法解决逻辑回归"></a>使用梯度下降法解决逻辑回归</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/6</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"></span><br><span class="line"><span class="comment"># False的话不做数据标准化</span></span><br><span class="line">scale = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑回归预测函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span> / (<span class="number">1</span> + np.exp(-x))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代价函数,传入训练数据，标签，权值，三者都是矩阵形式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost</span>(<span class="params">x_mat, y_mat, ws</span>):</span></span><br><span class="line">    left = np.multiply(y_mat, np.log(sigmoid(x_mat * ws)))</span><br><span class="line">    right = np.multiply(<span class="number">1</span> - y_mat, np.log(<span class="number">1</span> - sigmoid(x_mat * ws)))</span><br><span class="line">    <span class="keyword">return</span> np.<span class="built_in">sum</span>(left + right) / -(<span class="built_in">len</span>(x_mat))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求梯度，用梯度改变权值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradAscent</span>(<span class="params">xArr, yArr</span>):</span></span><br><span class="line">    <span class="keyword">if</span> scale:</span><br><span class="line">        xArr = preprocessing.scale(xArr)</span><br><span class="line">    xMat = np.mat(xArr)</span><br><span class="line">    yMat = np.mat(yArr)</span><br><span class="line"></span><br><span class="line">    lr = <span class="number">0.001</span></span><br><span class="line">    epochs = <span class="number">10000</span></span><br><span class="line">    costList = []</span><br><span class="line">    <span class="comment"># 计算数据行列数</span></span><br><span class="line">    <span class="comment"># 行代表数据个数，列代表权值个数</span></span><br><span class="line">    m, n = np.shape(xMat)</span><br><span class="line">    <span class="comment"># 初始化权值</span></span><br><span class="line">    ws = np.mat(np.ones((n, <span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(epochs + <span class="number">1</span>):</span><br><span class="line">        <span class="comment"># xMat和weights矩阵相乘</span></span><br><span class="line">        h = sigmoid(xMat * ws)</span><br><span class="line">        <span class="comment"># 计算误差</span></span><br><span class="line">        ws_grad = xMat.T * (h - yMat) / m</span><br><span class="line">        ws = ws - lr * ws_grad</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">50</span> == <span class="number">0</span>:</span><br><span class="line">            costList.append(cost(xMat, yMat, ws))</span><br><span class="line">    <span class="keyword">return</span> ws, costList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = np.genfromtxt(<span class="string">&#x27;LR-testSet.csv&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">x_data = data[:, :-<span class="number">1</span>]</span><br><span class="line">y_data = data[:, -<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切分数据,并画出散点图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_plot</span>():</span></span><br><span class="line">    <span class="comment"># 切分成两种类别，0和1</span></span><br><span class="line">    <span class="comment"># x0和y0是0类别的那两列数据，x1，y1同理</span></span><br><span class="line">    x0 = []</span><br><span class="line">    y0 = []</span><br><span class="line">    x1 = []</span><br><span class="line">    y1 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x_data)):</span><br><span class="line">        <span class="keyword">if</span> y_data[i] == <span class="number">0</span>:</span><br><span class="line">            x0.append(x_data[i, <span class="number">0</span>])</span><br><span class="line">            y0.append(x_data[i, <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x1.append(x_data[i, <span class="number">0</span>])</span><br><span class="line">            y1.append(x_data[i, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 画出散点图</span></span><br><span class="line">    scatter0 = plt.scatter(x0, y0, c=<span class="string">&#x27;b&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">    scatter1 = plt.scatter(x1, y1, c=<span class="string">&#x27;r&#x27;</span>, marker=<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    <span class="comment"># 画图例</span></span><br><span class="line">    plt.legend(handles=[scatter0, scatter1], labels=[<span class="string">&#x27;label0&#x27;</span>, <span class="string">&#x27;label1&#x27;</span>], loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切分数据,并画出散点图</span></span><br><span class="line">split_plot()</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># 把y_data变成二维</span></span><br><span class="line">y_data = y_data[:, np.newaxis]</span><br><span class="line"><span class="comment"># 给样本提价偏置项</span></span><br><span class="line">X_data = np.concatenate((np.ones((<span class="number">100</span>, <span class="number">1</span>)), x_data), axis=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 训练模型，得到权值和cost值的变化</span></span><br><span class="line">ws, costList = gradAscent(X_data, y_data)</span><br><span class="line">print(ws)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不做数据标准化时，才画出这个图</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> scale:</span><br><span class="line">    <span class="comment"># 画图决策边界</span></span><br><span class="line">    split_plot()</span><br><span class="line">    x_test = [[-<span class="number">4</span>], [<span class="number">3</span>]]</span><br><span class="line">    <span class="comment"># 这里ws[0],ws[1],ws[2]满足ws[0]+ws[1]*x+ws[2]*y = 0</span></span><br><span class="line">    <span class="comment"># 而这条线就是两个类别的分界线</span></span><br><span class="line">    y_test = (-ws[<span class="number">0</span>] - x_test * ws[<span class="number">1</span>]) / ws[<span class="number">2</span>]</span><br><span class="line">    plt.plot(x_test, y_test, <span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图 loss值的变化</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10000</span>, <span class="number">201</span>)</span><br><span class="line">plt.plot(x, costList, c=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Train&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epochs&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Cost&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span>(<span class="params">x_data, ws</span>):</span></span><br><span class="line">    <span class="keyword">if</span> scale == <span class="literal">True</span>:</span><br><span class="line">        x_data = preprocessing.scale(x_data)</span><br><span class="line">    xMat = np.mat(x_data)</span><br><span class="line">    ws = np.mat(ws)</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span> <span class="keyword">if</span> x &gt;= <span class="number">0.5</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> sigmoid(xMat * ws)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">predictions = predict(X_data, ws)</span><br><span class="line">print(classification_report(y_data, predictions))</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>参考： <a href="https://www.bilibili.com/video/BV1Rt411q7WJ?p=26">https://www.bilibili.com/video/BV1Rt411q7WJ?p=26</a></li>
</ul>
<h5 id="sklearn解决逻辑回归"><a href="#sklearn解决逻辑回归" class="headerlink" title="sklearn解决逻辑回归"></a>sklearn解决逻辑回归</h5><ul>
<li>比较方便</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/6</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression  <span class="comment"># 导入逻辑回归模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report  <span class="comment"># 用来对模型的预测效果做评估</span></span><br><span class="line"></span><br><span class="line">data = np.genfromtxt(<span class="string">&#x27;LR-testSet.csv&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">x_data = data[:, :-<span class="number">1</span>]</span><br><span class="line">y_data = data[:, -<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切分有效数据，可以画出散点图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_scatter</span>():</span></span><br><span class="line">    x0 = []</span><br><span class="line">    x1 = []</span><br><span class="line">    y0 = []</span><br><span class="line">    y1 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x_data)):</span><br><span class="line">        <span class="keyword">if</span> y_data[i] == <span class="number">0</span>:</span><br><span class="line">            x0.append(x_data[i, <span class="number">0</span>])</span><br><span class="line">            y0.append(x_data[i, <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x1.append(x_data[i, <span class="number">0</span>])</span><br><span class="line">            y1.append(x_data[i, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># plt.plot(x0, y0, &#x27;b.&#x27;)</span></span><br><span class="line">    <span class="comment"># plt.plot(x1, y1, &#x27;rx&#x27;)</span></span><br><span class="line">    <span class="comment"># plt.show()</span></span><br><span class="line">    <span class="comment"># 画出散点图</span></span><br><span class="line">    scatter0 = plt.scatter(x0, y0, c=<span class="string">&#x27;b&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">    scatter1 = plt.scatter(x1, y1, c=<span class="string">&#x27;r&#x27;</span>, marker=<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    <span class="comment"># 画图例</span></span><br><span class="line">    plt.legend(handles=[scatter0, scatter1], labels=[<span class="string">&#x27;label0&#x27;</span>, <span class="string">&#x27;label1&#x27;</span>], loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先把散点图画出来看看</span></span><br><span class="line">show_scatter()</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># 建模，拟合</span></span><br><span class="line">model = LogisticRegression()</span><br><span class="line">model.fit(x_data, y_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出决策边界,数据无标准化</span></span><br><span class="line">show_scatter()</span><br><span class="line">x_test = np.array([[-<span class="number">4</span>], [<span class="number">3</span>]])</span><br><span class="line">y_test = (-model.intercept_ - x_test * model.coef_[<span class="number">0</span>][<span class="number">0</span>]) / model.coef_[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">plt.plot(x_test, y_test, <span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果要把这个模型拿来预测，可以这样做</span></span><br><span class="line">prediction = model.predict(x_data)</span><br><span class="line">print(prediction)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对预测模型进行评估</span></span><br><span class="line">print(classification_report(y_data, prediction))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823205837795-316602647.png"></p>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823205842132-861892572.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">0.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">1.</span></span><br><span class="line"> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">1.</span></span><br><span class="line"> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span></span><br><span class="line"> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span></span><br><span class="line"> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line">              precision    recall  f1-score   support</span><br><span class="line"></span><br><span class="line">         <span class="number">0.0</span>       <span class="number">0.96</span>      <span class="number">0.94</span>      <span class="number">0.95</span>        <span class="number">47</span></span><br><span class="line">         <span class="number">1.0</span>       <span class="number">0.94</span>      <span class="number">0.96</span>      <span class="number">0.95</span>        <span class="number">53</span></span><br><span class="line"></span><br><span class="line">    accuracy                           <span class="number">0.95</span>       <span class="number">100</span></span><br><span class="line">   macro avg       <span class="number">0.95</span>      <span class="number">0.95</span>      <span class="number">0.95</span>       <span class="number">100</span></span><br><span class="line">weighted avg       <span class="number">0.95</span>      <span class="number">0.95</span>      <span class="number">0.95</span>       <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><p>由于上面的show_scatter是针对于只有两列特征的，如果是多列特征的话，还要继续切分，道理一样的</p>
</li>
<li><p>model.coef_里面包含了所有带x和y项的系数</p>
</li>
<li><p>model.intercept_是个常数</p>
</li>
</ul>
<h4 id="非线性逻辑回归"><a href="#非线性逻辑回归" class="headerlink" title="非线性逻辑回归"></a>非线性逻辑回归</h4><ul>
<li><p>数据的扁平化：</p>
</li>
<li><p>eg：[[1, 2], [3, 4]]————&gt;扁平化得到：[1, 2, 3, 4]</p>
</li>
<li><p>非线性逻辑回归可以用梯度下降法或者sklearn实现</p>
<ul>
<li>梯度下降法： <a href="https://www.bilibili.com/video/BV1Rt411q7WJ?p=28">https://www.bilibili.com/video/BV1Rt411q7WJ?p=28</a> </li>
</ul>
</li>
<li><p>sklearn：会更加方便些</p>
</li>
</ul>
<h5 id="sklearn非线性逻辑回归分类"><a href="#sklearn非线性逻辑回归分类" class="headerlink" title="sklearn非线性逻辑回归分类"></a>sklearn非线性逻辑回归分类</h5><ul>
<li><p>有个更加方便的产生数据的方法：</p>
<ul>
<li><p>样本的n_samples，n_features，n_classes可以自己设</p>
</li>
<li><p>相应地，画图时，x_data[:, 0], x_data[0:, 1]也相应的修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_gaussian_quantiles  <span class="comment"># 用于产生数据集</span></span><br><span class="line"><span class="comment"># 生成数据集，生成的是2维正态分布，可以自己设置类别</span></span><br><span class="line"><span class="comment"># 这里设为500个样本，2个样本特征，类别是2类，也可以设为多类</span></span><br><span class="line">x_data, y_data = make_gaussian_quantiles(n_samples=<span class="number">500</span>, n_features=<span class="number">2</span>, n_classes=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以画出来看看,分类传到颜色c</span></span><br><span class="line">plt.scatter(x_data[:, <span class="number">0</span>], x_data[<span class="number">0</span>:, <span class="number">1</span>], c=y_data)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>在使用model = LogisticRegression()和model.fit(x_poly, y_data)建模之前，要产生非线性特征：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义多项式回归，用degree来调节多项式特征</span></span><br><span class="line">poly_reg = PolynomialFeatures(degree=<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 特征处理</span></span><br><span class="line">x_poly = poly_reg.fit_transform(x_data)</span><br></pre></td></tr></table></figure></li>
<li><p>模型评估可以使用model.score(x_poly, y_data)，记住是传x_poly</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/7</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_gaussian_quantiles  <span class="comment"># 用于产生数据集</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> PolynomialFeatures</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成数据集，生成的是2维正态分布，可以自己设置类别</span></span><br><span class="line"><span class="comment"># 这里设为500个样本，2个样本特征，类别是2类，也可以设为多类</span></span><br><span class="line">x_data, y_data = make_gaussian_quantiles(n_samples=<span class="number">500</span>, n_features=<span class="number">2</span>, n_classes=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以画出来看看,分类传到颜色c</span></span><br><span class="line">plt.scatter(x_data[:, <span class="number">0</span>], x_data[<span class="number">0</span>:, <span class="number">1</span>], c=y_data)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;因为是非线性的，所以需要产生非线性特征&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义多项式回归，用degree来调节多项式特征</span></span><br><span class="line">poly_reg = PolynomialFeatures(degree=<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 特征处理</span></span><br><span class="line">x_poly = poly_reg.fit_transform(x_data)</span><br><span class="line"><span class="comment"># 建模拟合</span></span><br><span class="line">model = LogisticRegression()</span><br><span class="line">model.fit(x_poly, y_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 评估</span></span><br><span class="line">print(<span class="string">&#x27;score: &#x27;</span>, model.score(x_poly, y_data))</span><br><span class="line"><span class="comment"># 预测测试</span></span><br><span class="line">print(<span class="string">&#x27;原来的分类结果：\n&#x27;</span>, y_data)</span><br><span class="line">print(<span class="string">&#x27;预测第5行的结果是&#x27;</span>, model.predict(x_poly)[<span class="number">5</span>])</span><br><span class="line">print(<span class="string">&#x27;所有的预测结果： \n&#x27;</span>, model.predict(x_poly))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;上面已经建好模型了，可以直接去预测了，接下来是画图&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据值所在的范围,这里是确定图的边框范围</span></span><br><span class="line">x_min, x_max = x_data[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x_data[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line">y_min, y_max = x_data[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, x_data[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成网格矩阵，即很多点构成的背景图，尽量密集些</span></span><br><span class="line">xx, yy = np.meshgrid(np.arange(x_min, x_max, <span class="number">0.02</span>),</span><br><span class="line">                     np.arange(y_min, y_max, <span class="number">0.02</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测,ravel与flatten类似，多维数据转一维。flatten不会改变原始数据，ravel会改变原始数据</span></span><br><span class="line">z = model.predict(poly_reg.fit_transform(np.c_[xx.ravel(), yy.ravel()]))</span><br><span class="line">z = z.reshape(xx.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等高线图</span></span><br><span class="line">cs = plt.contourf(xx, yy, z)</span><br><span class="line"><span class="comment"># 散点图</span></span><br><span class="line">plt.scatter(x_data[:, <span class="number">0</span>], x_data[<span class="number">0</span>:, <span class="number">1</span>], c=y_data)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823205953143-1711336089.png"><br><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823205956382-1384872502.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score:  <span class="number">0.988</span></span><br><span class="line">原来的分类结果：</span><br><span class="line"> [<span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line">预测第<span class="number">5</span>行的结果是 <span class="number">1</span></span><br><span class="line">所有的预测结果： </span><br><span class="line"> [<span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Python机器学习</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>混淆矩阵的理解</title>
    <url>/2020/08/24/confusion_matrix/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：机器学习混淆矩阵，模型评估</p>
<a id="more"></a>

<h1 id="以手写数字识别为例"><a href="#以手写数字识别为例" class="headerlink" title="以手写数字识别为例"></a>以手写数字识别为例</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/9/7</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> sklearn.neural_network <span class="keyword">import</span> MLPClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_digits</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler  <span class="comment"># 减去平均值再除以方差</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report, confusion_matrix</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    digits_data = load_digits()</span><br><span class="line">    x_data = digits_data.data</span><br><span class="line">    y_data = digits_data.target</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对数据进行标准化</span></span><br><span class="line">    sc = StandardScaler()</span><br><span class="line">    x_data = sc.fit_transform(x_data)</span><br><span class="line">    <span class="comment"># 切分数据</span></span><br><span class="line">    x_train, x_test, y_train, y_test = train_test_split(x_data, y_data)</span><br><span class="line">    <span class="comment"># 建模</span></span><br><span class="line">    model = MLPClassifier(hidden_layer_sizes=(<span class="number">100</span>, <span class="number">50</span>), max_iter=<span class="number">100</span>)</span><br><span class="line">    model.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 预测</span></span><br><span class="line">    prediction = model.predict(x_test)</span><br><span class="line">    <span class="comment"># 评估</span></span><br><span class="line">    print(classification_report(prediction, y_test))</span><br><span class="line">    print(confusion_matrix(y_test, prediction))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">              precision    recall  f1-score   support</span><br><span class="line"></span><br><span class="line">           0       1.00      1.00      1.00        44</span><br><span class="line">           1       1.00      0.96      0.98        50</span><br><span class="line">           2       0.98      0.98      0.98        48</span><br><span class="line">           3       0.97      0.97      0.97        35</span><br><span class="line">           4       0.98      0.98      0.98        42</span><br><span class="line">           5       0.96      1.00      0.98        48</span><br><span class="line">           6       1.00      1.00      1.00        43</span><br><span class="line">           7       1.00      0.98      0.99        45</span><br><span class="line">           8       0.96      1.00      0.98        49</span><br><span class="line">           9       0.98      0.96      0.97        46</span><br><span class="line"></span><br><span class="line">    accuracy                           0.98       450</span><br><span class="line">   macro avg       0.98      0.98      0.98       450</span><br><span class="line">weighted avg       0.98      0.98      0.98       450</span><br><span class="line"></span><br><span class="line">[[44  0  0  0  0  0  0  0  0  0]</span><br><span class="line"> [ 0 48  0  0  0  0  0  0  0  0]</span><br><span class="line"> [ 0  1 47  0  0  0  0  0  0  0]</span><br><span class="line"> [ 0  0  0 34  0  0  0  1  0  0]</span><br><span class="line"> [ 0  0  0  0 41  0  0  0  0  1]</span><br><span class="line"> [ 0  0  0  0  1 48  0  0  0  1]</span><br><span class="line"> [ 0  0  0  0  0  0 43  0  0  0]</span><br><span class="line"> [ 0  0  0  0  0  0  0 44  0  0]</span><br><span class="line"> [ 0  1  1  0  0  0  0  0 49  0]</span><br><span class="line"> [ 0  0  0  1  0  0  0  0  0 44]]</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="confusion-matrix理解"><a href="#confusion-matrix理解" class="headerlink" title="confusion_matrix理解"></a>confusion_matrix理解</h1><ul>
<li>如下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[44  0  0  0  0  0  0  0  0  0]</span><br><span class="line"> [ 0 48  0  0  0  0  0  0  0  0]</span><br><span class="line"> [ 0  1 47  0  0  0  0  0  0  0]</span><br><span class="line"> [ 0  0  0 34  0  0  0  1  0  0]</span><br><span class="line"> [ 0  0  0  0 41  0  0  0  0  1]</span><br><span class="line"> [ 0  0  0  0  1 48  0  0  0  1]</span><br><span class="line"> [ 0  0  0  0  0  0 43  0  0  0]</span><br><span class="line"> [ 0  0  0  0  0  0  0 44  0  0]</span><br><span class="line"> [ 0  1  1  0  0  0  0  0 49  0]</span><br><span class="line"> [ 0  0  0  1  0  0  0  0  0 44]]</span><br></pre></td></tr></table></figure></li>
<li>对角线越大越好， 最理想的情况是只有对角线有值</li>
<li>其他地方出现值代表该分类被识别成其他的类别</li>
<li>比如上面第0、1行很完美，说明都识别正确了</li>
<li>但是第2行对角线有个1，说明有一个图片本来是2的，却识别成了1</li>
<li>其他同理</li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Python机器学习</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>计数排序</title>
    <url>/2020/10/29/countSort/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：计数排序，少种类</p>
<a id="more"></a>

<h1 id="counting-sort"><a href="#counting-sort" class="headerlink" title="counting sort"></a>counting sort</h1><ul>
<li>适用于数据量大，但是数据的范围较小的情况</li>
<li>时间复杂度是O(1),空间复杂度是O(n)</li>
</ul>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/10/29</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_sort</span>(<span class="params">array: <span class="built_in">list</span></span>):</span></span><br><span class="line">    max_val = <span class="built_in">max</span>(array)</span><br><span class="line">    cnt = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(max_val + <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> array:</span><br><span class="line">        cnt[i] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    print(cnt)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cnt)):</span><br><span class="line">        print(<span class="built_in">str</span>(i) * cnt[i], end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    test = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    count_sort(test)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2 3 4 1 2 2 4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>结果 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 3 4 1 2 2 4</span><br><span class="line">[0, 1, 3, 1, 2]</span><br><span class="line">1222344</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>OJ</tag>
      </tags>
  </entry>
  <entry>
    <title>决策树</title>
    <url>/2020/08/23/decisionTree/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<h1 id="决策树、分类"><a href="#决策树、分类" class="headerlink" title="决策树、分类"></a>决策树、分类</h1><a id="more"></a>

<h3 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h3><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823214016728-1137440775.png" style="zoom:67%;">


<ul>
<li> <a href="https://www.bilibili.com/video/BV1Rt411q7WJ?p=45">https://www.bilibili.com/video/BV1Rt411q7WJ?p=45</a> </li>
</ul>
<table>
<thead>
<tr>
<th>RID</th>
<th>age</th>
<th>income</th>
<th>student</th>
<th>credit_rating</th>
<th align="center">class_buys_computer</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>youth</td>
<td>high</td>
<td>no</td>
<td>fair</td>
<td align="center">no</td>
</tr>
<tr>
<td>2</td>
<td>youth</td>
<td>high</td>
<td>no</td>
<td>excellent</td>
<td align="center">no</td>
</tr>
<tr>
<td>3</td>
<td>middle_aged</td>
<td>high</td>
<td>no</td>
<td>fair</td>
<td align="center">yes</td>
</tr>
<tr>
<td>4</td>
<td>senior</td>
<td>medium</td>
<td>no</td>
<td>fair</td>
<td align="center">yes</td>
</tr>
<tr>
<td>5</td>
<td>senior</td>
<td>low</td>
<td>yes</td>
<td>fair</td>
<td align="center">yes</td>
</tr>
<tr>
<td>6</td>
<td>senior</td>
<td>low</td>
<td>yes</td>
<td>excellent</td>
<td align="center">no</td>
</tr>
<tr>
<td>7</td>
<td>middle_aged</td>
<td>low</td>
<td>yes</td>
<td>excellent</td>
<td align="center">yes</td>
</tr>
<tr>
<td>8</td>
<td>youth</td>
<td>medium</td>
<td>no</td>
<td>fair</td>
<td align="center">no</td>
</tr>
<tr>
<td>9</td>
<td>youth</td>
<td>low</td>
<td>yes</td>
<td>fair</td>
<td align="center">yes</td>
</tr>
<tr>
<td>10</td>
<td>senior</td>
<td>medium</td>
<td>yes</td>
<td>fair</td>
<td align="center">yes</td>
</tr>
<tr>
<td>11</td>
<td>youth</td>
<td>medium</td>
<td>yes</td>
<td>excellent</td>
<td align="center">yes</td>
</tr>
<tr>
<td>12</td>
<td>middle_aged</td>
<td>medium</td>
<td>no</td>
<td>excellent</td>
<td align="center">yes</td>
</tr>
<tr>
<td>13</td>
<td>middle_aged</td>
<td>high</td>
<td>yes</td>
<td>fair</td>
<td align="center">yes</td>
</tr>
<tr>
<td>14</td>
<td>senior</td>
<td>medium</td>
<td>no</td>
<td>excellent</td>
<td align="center">no</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/3</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction <span class="keyword">import</span> DictVectorizer  <span class="comment"># 把字符数据转化成0和1</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree  <span class="comment"># 导入决策树</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入数据</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">r&#x27;AllElectronics.csv&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">reader = csv.reader(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取csv文件第一行数据，即特征</span></span><br><span class="line">header = reader.__next__()</span><br><span class="line"><span class="comment"># print(header)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义特征和标签列表</span></span><br><span class="line">feature_list = []</span><br><span class="line">label_list = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取1-6列有效数据</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">    <span class="comment"># print(row)</span></span><br><span class="line">    <span class="comment"># 把label存入list</span></span><br><span class="line">    label_list.append(row[-<span class="number">1</span>])</span><br><span class="line">    row_dict = &#123;&#125;</span><br><span class="line">    <span class="comment"># 第0列数据是序号，没有用的，所以不要，最后一列也不取</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(row) - <span class="number">1</span>):</span><br><span class="line">        row_dict[header[i]] = row[i]</span><br><span class="line">    <span class="comment"># 得到有效的特征数据</span></span><br><span class="line">    feature_list.append(row_dict)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;feature_list :\n&#x27;</span>, feature_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把数据转化成01,先实例化一个对象</span></span><br><span class="line">vec = DictVectorizer()</span><br><span class="line">x_data = vec.fit_transform(feature_list).toarray()</span><br><span class="line">print(<span class="string">&#x27;x_data : \n&#x27;</span>, x_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印特征名称</span></span><br><span class="line">print(vec.get_feature_names())</span><br><span class="line"><span class="comment"># 打印标签列表</span></span><br><span class="line">print(label_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把标签也转换为01</span></span><br><span class="line">label = preprocessing.LabelBinarizer()</span><br><span class="line">y_data = label.fit_transform(label_list)</span><br><span class="line">print(<span class="string">&#x27;y_data : \n&#x27;</span>, y_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建决策树模型,分类器是属性为entropy的分类器</span></span><br><span class="line">tree_model = tree.DecisionTreeClassifier(criterion=<span class="string">&#x27;entropy&#x27;</span>)</span><br><span class="line"><span class="comment"># 输入数据建立模型</span></span><br><span class="line">tree_model.fit(x_data, y_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先拿个训练数据来测试一下</span></span><br><span class="line">x_test = x_data[<span class="number">0</span>]</span><br><span class="line">print(<span class="string">&#x27;x_test:&#x27;</span>, x_test)</span><br><span class="line"><span class="comment"># print(x_test.reshape(1, -1))</span></span><br><span class="line"><span class="comment"># reshape(1, -1)是把x_test从一维变成二维，predict里面要求传二维数据</span></span><br><span class="line">prediction = tree_model.predict(x_test.reshape(<span class="number">1</span>, -<span class="number">1</span>))</span><br><span class="line">print(<span class="string">&#x27;预测结果是：&#x27;</span>, prediction)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">feature_list :</span><br><span class="line"> [&#123;<span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;youth&#x27;</span>, <span class="string">&#x27;income&#x27;</span>: <span class="string">&#x27;high&#x27;</span>, <span class="string">&#x27;student&#x27;</span>: <span class="string">&#x27;no&#x27;</span>, <span class="string">&#x27;credit_rating&#x27;</span>: <span class="string">&#x27;fair&#x27;</span>&#125;, &#123;<span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;youth&#x27;</span>, <span class="string">&#x27;income&#x27;</span>: <span class="string">&#x27;high&#x27;</span>, <span class="string">&#x27;student&#x27;</span>: <span class="string">&#x27;no&#x27;</span>, <span class="string">&#x27;credit_rating&#x27;</span>: <span class="string">&#x27;excellent&#x27;</span>&#125;, &#123;<span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;middle_aged&#x27;</span>, <span class="string">&#x27;income&#x27;</span>: <span class="string">&#x27;high&#x27;</span>, <span class="string">&#x27;student&#x27;</span>: <span class="string">&#x27;no&#x27;</span>, <span class="string">&#x27;credit_rating&#x27;</span>: <span class="string">&#x27;fair&#x27;</span>&#125;, &#123;<span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;senior&#x27;</span>, <span class="string">&#x27;income&#x27;</span>: <span class="string">&#x27;medium&#x27;</span>, <span class="string">&#x27;student&#x27;</span>: <span class="string">&#x27;no&#x27;</span>, <span class="string">&#x27;credit_rating&#x27;</span>: <span class="string">&#x27;fair&#x27;</span>&#125;, &#123;<span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;senior&#x27;</span>, <span class="string">&#x27;income&#x27;</span>: <span class="string">&#x27;low&#x27;</span>, <span class="string">&#x27;student&#x27;</span>: <span class="string">&#x27;yes&#x27;</span>, <span class="string">&#x27;credit_rating&#x27;</span>: <span class="string">&#x27;fair&#x27;</span>&#125;, &#123;<span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;senior&#x27;</span>, <span class="string">&#x27;income&#x27;</span>: <span class="string">&#x27;low&#x27;</span>, <span class="string">&#x27;student&#x27;</span>: <span class="string">&#x27;yes&#x27;</span>, <span class="string">&#x27;credit_rating&#x27;</span>: <span class="string">&#x27;excellent&#x27;</span>&#125;, &#123;<span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;middle_aged&#x27;</span>, <span class="string">&#x27;income&#x27;</span>: <span class="string">&#x27;low&#x27;</span>, <span class="string">&#x27;student&#x27;</span>: <span class="string">&#x27;yes&#x27;</span>, <span class="string">&#x27;credit_rating&#x27;</span>: <span class="string">&#x27;excellent&#x27;</span>&#125;, &#123;<span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;youth&#x27;</span>, <span class="string">&#x27;income&#x27;</span>: <span class="string">&#x27;medium&#x27;</span>, <span class="string">&#x27;student&#x27;</span>: <span class="string">&#x27;no&#x27;</span>, <span class="string">&#x27;credit_rating&#x27;</span>: <span class="string">&#x27;fair&#x27;</span>&#125;, &#123;<span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;youth&#x27;</span>, <span class="string">&#x27;income&#x27;</span>: <span class="string">&#x27;low&#x27;</span>, <span class="string">&#x27;student&#x27;</span>: <span class="string">&#x27;yes&#x27;</span>, <span class="string">&#x27;credit_rating&#x27;</span>: <span class="string">&#x27;fair&#x27;</span>&#125;, &#123;<span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;senior&#x27;</span>, <span class="string">&#x27;income&#x27;</span>: <span class="string">&#x27;medium&#x27;</span>, <span class="string">&#x27;student&#x27;</span>: <span class="string">&#x27;yes&#x27;</span>, <span class="string">&#x27;credit_rating&#x27;</span>: <span class="string">&#x27;fair&#x27;</span>&#125;, &#123;<span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;youth&#x27;</span>, <span class="string">&#x27;income&#x27;</span>: <span class="string">&#x27;medium&#x27;</span>, <span class="string">&#x27;student&#x27;</span>: <span class="string">&#x27;yes&#x27;</span>, <span class="string">&#x27;credit_rating&#x27;</span>: <span class="string">&#x27;excellent&#x27;</span>&#125;, &#123;<span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;middle_aged&#x27;</span>, <span class="string">&#x27;income&#x27;</span>: <span class="string">&#x27;medium&#x27;</span>, <span class="string">&#x27;student&#x27;</span>: <span class="string">&#x27;no&#x27;</span>, <span class="string">&#x27;credit_rating&#x27;</span>: <span class="string">&#x27;excellent&#x27;</span>&#125;, &#123;<span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;middle_aged&#x27;</span>, <span class="string">&#x27;income&#x27;</span>: <span class="string">&#x27;high&#x27;</span>, <span class="string">&#x27;student&#x27;</span>: <span class="string">&#x27;yes&#x27;</span>, <span class="string">&#x27;credit_rating&#x27;</span>: <span class="string">&#x27;fair&#x27;</span>&#125;, &#123;<span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;senior&#x27;</span>, <span class="string">&#x27;income&#x27;</span>: <span class="string">&#x27;medium&#x27;</span>, <span class="string">&#x27;student&#x27;</span>: <span class="string">&#x27;no&#x27;</span>, <span class="string">&#x27;credit_rating&#x27;</span>: <span class="string">&#x27;excellent&#x27;</span>&#125;]</span><br><span class="line">x_data : </span><br><span class="line"> [[<span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span>]</span><br><span class="line"> [<span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">1.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">1.</span>]</span><br><span class="line"> [<span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">0.</span>]]</span><br><span class="line">[<span class="string">&#x27;age=middle_aged&#x27;</span>, <span class="string">&#x27;age=senior&#x27;</span>, <span class="string">&#x27;age=youth&#x27;</span>, <span class="string">&#x27;credit_rating=excellent&#x27;</span>, <span class="string">&#x27;credit_rating=fair&#x27;</span>, <span class="string">&#x27;income=high&#x27;</span>, <span class="string">&#x27;income=low&#x27;</span>, <span class="string">&#x27;income=medium&#x27;</span>, <span class="string">&#x27;student=no&#x27;</span>, <span class="string">&#x27;student=yes&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;no&#x27;</span>, <span class="string">&#x27;no&#x27;</span>, <span class="string">&#x27;yes&#x27;</span>, <span class="string">&#x27;yes&#x27;</span>, <span class="string">&#x27;yes&#x27;</span>, <span class="string">&#x27;no&#x27;</span>, <span class="string">&#x27;yes&#x27;</span>, <span class="string">&#x27;no&#x27;</span>, <span class="string">&#x27;yes&#x27;</span>, <span class="string">&#x27;yes&#x27;</span>, <span class="string">&#x27;yes&#x27;</span>, <span class="string">&#x27;yes&#x27;</span>, <span class="string">&#x27;yes&#x27;</span>, <span class="string">&#x27;no&#x27;</span>]</span><br><span class="line">y_data : </span><br><span class="line"> [[<span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">0</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">0</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span>]</span><br><span class="line"> [<span class="number">0</span>]]</span><br><span class="line">x_test: [<span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span>]</span><br><span class="line">预测结果是： [<span class="number">0</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>reshape(1, -1)是把x_test从一维变成二维，predict里面要求传二维数据</li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Python机器学习</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>layui中文乱码解决</title>
    <url>/2021/01/16/layuiProblem/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：jsp页面显示的layui中文乱码问题解决</p>
<a id="more"></a>

<h1 id="layui中文乱码解决"><a href="#layui中文乱码解决" class="headerlink" title="layui中文乱码解决"></a>layui中文乱码解决</h1><ul>
<li>原来是这样的<br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210116151352562-1945800077.png"></li>
</ul>
<ul>
<li><p>jsp页面最上面加上这句</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210116151330093-895384780.png"></p>
</li>
<li><p>就完美解决了</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Solution</category>
      </categories>
      <tags>
        <tag>解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>深搜dfs求解迷宫问题</title>
    <url>/2020/10/05/dfsMaze/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：dfs求解迷宫问题</p>
<a id="more"></a>

<h1 id="深搜dfs求解迷宫问题"><a href="#深搜dfs求解迷宫问题" class="headerlink" title="深搜dfs求解迷宫问题"></a>深搜dfs求解迷宫问题</h1><ul>
<li>需要确定起点和终点<br><img src="https://img2020.cnblogs.com/blog/2134757/202010/2134757-20201005224558705-514784224.png"></li>
</ul>
<h1 id="基本模板"><a href="#基本模板" class="headerlink" title="基本模板"></a>基本模板</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/10/5</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 迷宫二维列表 n行m列 ：[[0 for i in range(m)] for j in range(n)]</span></span><br><span class="line"><span class="comment"># 假设1 是空地，2 是障碍物</span></span><br><span class="line">a = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="comment"># 标志是否访问, 0是未访问，1是已经访问</span></span><br><span class="line">flag = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="comment"># 目标坐标</span></span><br><span class="line"><span class="comment"># p, q = 0, 0</span></span><br><span class="line"><span class="comment"># 设最短路径长度</span></span><br><span class="line">min_dis = <span class="number">99999999</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">x, y, step</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x == p <span class="keyword">and</span> y == q:</span><br><span class="line">        <span class="keyword">global</span> min_dis</span><br><span class="line">        <span class="keyword">if</span> step &lt; min_dis:</span><br><span class="line">            min_dis = step</span><br><span class="line">        <span class="comment"># 回退</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;顺时针试探&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 右边</span></span><br><span class="line">    <span class="keyword">if</span> a[x][y + <span class="number">1</span>] == <span class="number">1</span> <span class="keyword">and</span> flag[x][y + <span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">        flag[x][y + <span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">        dfs(x, y + <span class="number">1</span>, step + <span class="number">1</span>)</span><br><span class="line">        flag[x][y + <span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 下</span></span><br><span class="line">    <span class="keyword">if</span> a[x + <span class="number">1</span>][y] == <span class="number">1</span> <span class="keyword">and</span> flag[x + <span class="number">1</span>][y] == <span class="number">0</span>:</span><br><span class="line">        flag[x + <span class="number">1</span>][y] = <span class="number">1</span></span><br><span class="line">        dfs(x + <span class="number">1</span>, y, step + <span class="number">1</span>)</span><br><span class="line">        flag[x + <span class="number">1</span>][y] = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 左</span></span><br><span class="line">    <span class="keyword">if</span> a[x][y - <span class="number">1</span>] == <span class="number">1</span> <span class="keyword">and</span> flag[x][y - <span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">        flag[x][y - <span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">        dfs(x, y - <span class="number">1</span>, step + <span class="number">1</span>)</span><br><span class="line">        flag[x][y - <span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 上</span></span><br><span class="line">    <span class="keyword">if</span> a[x - <span class="number">1</span>][y] == <span class="number">1</span> <span class="keyword">and</span> flag[x - <span class="number">1</span>][y] == <span class="number">0</span>:</span><br><span class="line">        flag[x - <span class="number">1</span>][y] = <span class="number">1</span></span><br><span class="line">        dfs(x - <span class="number">1</span>, y, step + <span class="number">1</span>)</span><br><span class="line">        flag[x - <span class="number">1</span>][y] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 输入m行n列</span></span><br><span class="line">    m, n = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    <span class="comment"># 给地图赋值,空地、障碍物</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, m):</span><br><span class="line">        temp = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n):</span><br><span class="line">            <span class="comment"># a[i][j] = int(input())</span></span><br><span class="line">            a[i][j] = temp[j]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入起点和终点坐标</span></span><br><span class="line">    start_x, start_y = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    <span class="comment"># global p, q</span></span><br><span class="line">    p, q = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从起点开始，所以起点设置为已经访问状态</span></span><br><span class="line">    flag[start_x][start_y] = <span class="number">1</span></span><br><span class="line">    dfs(start_x, start_y, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    print(min_dis)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">5 4</span></span><br><span class="line"><span class="string">1 1 2 1</span></span><br><span class="line"><span class="string">1 1 1 1</span></span><br><span class="line"><span class="string">1 1 2 1</span></span><br><span class="line"><span class="string">1 2 1 1</span></span><br><span class="line"><span class="string">1 1 1 2</span></span><br><span class="line"><span class="string">0 0</span></span><br><span class="line"><span class="string">3 2</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="优化后的模板"><a href="#优化后的模板" class="headerlink" title="优化后的模板"></a>优化后的模板</h1><ul>
<li>添加方向数组</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/10/5</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 迷宫二维列表 n行m列 ：[[0 for i in range(m)] for j in range(n)]</span></span><br><span class="line"><span class="comment"># 假设1 是空地，2 是障碍物</span></span><br><span class="line">a = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line"><span class="comment"># 标志是否访问, 0是未访问，1是已经访问</span></span><br><span class="line">flag = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line"><span class="comment"># 方向数组</span></span><br><span class="line">dx = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>]</span><br><span class="line">dy = [<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设最短路径长度</span></span><br><span class="line">min_dis = <span class="number">99999999</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">x, y, step</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x == p <span class="keyword">and</span> y == q:</span><br><span class="line">        <span class="keyword">global</span> min_dis</span><br><span class="line">        <span class="keyword">if</span> step &lt; min_dis:</span><br><span class="line">            min_dis = step</span><br><span class="line">        <span class="comment"># 回退</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;顺时针试探&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">        tx = x + dx[i]</span><br><span class="line">        ty = y + dy[i]</span><br><span class="line">        <span class="keyword">if</span> a[tx][ty] == <span class="number">1</span> <span class="keyword">and</span> flag[tx][ty] == <span class="number">0</span>:</span><br><span class="line">            flag[tx][ty] = <span class="number">1</span></span><br><span class="line">            dfs(tx, ty, step + <span class="number">1</span>)</span><br><span class="line">            flag[tx][ty] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 输入m行n列</span></span><br><span class="line">    m, n = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    <span class="comment"># 给地图赋值,空地、障碍物</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, m):</span><br><span class="line">        temp = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n):</span><br><span class="line">            <span class="comment"># a[i][j] = int(input())</span></span><br><span class="line">            a[i][j] = temp[j]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入起点和终点坐标</span></span><br><span class="line">    start_x, start_y = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    <span class="comment"># global p, q</span></span><br><span class="line">    p, q = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从起点开始，所以起点设置为已经访问状态</span></span><br><span class="line">    flag[start_x][start_y] = <span class="number">1</span></span><br><span class="line">    dfs(start_x, start_y, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    print(min_dis)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">5 4</span></span><br><span class="line"><span class="string">1 1 2 1</span></span><br><span class="line"><span class="string">1 1 1 1</span></span><br><span class="line"><span class="string">1 1 2 1</span></span><br><span class="line"><span class="string">1 2 1 1</span></span><br><span class="line"><span class="string">1 1 1 2</span></span><br><span class="line"><span class="string">0 0</span></span><br><span class="line"><span class="string">3 2</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 4</span><br><span class="line">1 1 2 1</span><br><span class="line">1 1 1 1</span><br><span class="line">1 1 2 1</span><br><span class="line">1 2 1 1</span><br><span class="line">1 1 1 2</span><br><span class="line">0 0</span><br><span class="line">3 2</span><br><span class="line">7</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>OJ</tag>
      </tags>
  </entry>
  <entry>
    <title>解决hexo init 一直停在&quot;checking installable status&quot;的问题</title>
    <url>/2021/01/28/hexoInitProblem/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：npm、hexo init</p>
<a id="more"></a>

<h1 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h1><ul>
<li>旧的npm缓存与项目冲突</li>
</ul>
<h1 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h1><ul>
<li>步骤一<br><code>sudo npm cache clean</code></li>
<li>如果是win下的cmd就直接<code>npm cache clean</code>就行了</li>
<li>步骤二<br><code>npm config set registry https://registry.npm.taobao.org</code></li>
<li>实测有效，之后就再次执行<code>hexo init xxx</code>就完美解决了</li>
</ul>
<h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><ul>
<li><a href="https://blog.csdn.net/nicai_xiaoqinxi/article/details/86322578">https://blog.csdn.net/nicai_xiaoqinxi/article/details/86322578</a></li>
</ul>
]]></content>
      <categories>
        <category>Solution</category>
      </categories>
      <tags>
        <tag>解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客搭建</title>
    <url>/2021/01/28/first-test/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  
hexo+github搭建博客

<a id="more"></a>

<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul>
<li>git</li>
<li>github账号<ul>
<li>创建仓库：用户名.github.io</li>
</ul>
</li>
<li>node.js</li>
<li>npm可选择配置一下淘宝镜像</li>
</ul>
<h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><ul>
<li>github Pages + Hexo</li>
<li>Hexo 使用 nexT主题</li>
</ul>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="网络图片显示问题"><a href="#网络图片显示问题" class="headerlink" title="网络图片显示问题"></a>网络图片显示问题</h3><ul>
<li><p>在md文章的前面添加一句话就可以了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;referrer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-referrer&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210129144652737-506864194.png" style="zoom:70%;">

</li>
</ul>
<h3 id="中文显示问题"><a href="#中文显示问题" class="headerlink" title="中文显示问题"></a>中文显示问题</h3><ul>
<li>最新版的next主题设为：<code>zh-CN</code>，这个亲测有效</li>
<li>老版本设为：<code>zh-Hans</code></li>
</ul>
<h3 id="每次hexo-d都要输入账号和密码问题"><a href="#每次hexo-d都要输入账号和密码问题" class="headerlink" title="每次hexo d都要输入账号和密码问题"></a>每次hexo d都要输入账号和密码问题</h3><ul>
<li>将配置文件的repo使用ssh链接，不要用html链接，就可以每次都不用输入账号和密码了，使用html链接还会出现登录失败的情况，然后要输入用户名和密码，很麻烦，所以使用SSH更加方便。</li>
</ul>
<h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><ul>
<li>网上基本都可以找到解决方案</li>
</ul>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul>
<li>可以使用cdn加速(参考网上)</li>
<li>背景图片过大的话，加载速度慢</li>
<li>尽量不要搞得太花里胡哨的，影响阅读，而且影响加载速度</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li>网上配置美化主题的资料很多</li>
<li><a href="https://www.bilibili.com/video/BV16W411t7mq?p=18">B站教程</a>，但是注意一下版本问题，个别配置还是有差异的</li>
</ul>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>PCA主成分分析</title>
    <url>/2020/08/24/pca/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：PCA降维，可以处理多标签问题，把多个标签降维到几个影响程度比较大的标签，再建模来解决问题。</p>
<a id="more"></a>

<h2 id="PCA主成分分析"><a href="#PCA主成分分析" class="headerlink" title="PCA主成分分析"></a>PCA主成分分析</h2><h4 id="是一种降维算法"><a href="#是一种降维算法" class="headerlink" title="是一种降维算法"></a>是一种降维算法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/21</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> sklearn.neural_network <span class="keyword">import</span> MLPClassifier  <span class="comment"># 待会用神经网络预测降维后的数据</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_digits  <span class="comment"># 手写数据集</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA  <span class="comment"># 导入PCA模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report, confusion_matrix</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># from mpl_toolkits.mplot3d import Axes3D</span></span><br><span class="line"></span><br><span class="line">digits = load_digits()</span><br><span class="line">x_data = digits.data  <span class="comment"># 数据</span></span><br><span class="line">y_data = digits.target  <span class="comment"># 标签</span></span><br><span class="line"><span class="comment"># 切分数据</span></span><br><span class="line">x_train, x_test, y_train, y_text = train_test_split(x_data, y_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立神经网络模型,包含两个隐藏层，分别有100和50个神经元</span></span><br><span class="line">model = MLPClassifier(hidden_layer_sizes=(<span class="number">100</span>, <span class="number">50</span>), max_iter=<span class="number">500</span>)</span><br><span class="line">model.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 评估</span></span><br><span class="line">prediction = model.predict(x_test)</span><br><span class="line">print(prediction)</span><br><span class="line">print(classification_report(prediction, y_text))</span><br><span class="line">print(confusion_matrix(prediction, y_text))</span><br><span class="line"><span class="comment"># 进行pca降维,这里n_components是降成2维</span></span><br><span class="line">pca = PCA(n_components=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 直接返回降维后的数据,如果不返回新数据，就用fit</span></span><br><span class="line">new_data = pca.fit_transform(x_data)</span><br><span class="line">print(new_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出降维后的数据</span></span><br><span class="line">new_x_data = new_data[:, <span class="number">0</span>]</span><br><span class="line">new_y_data = new_data[:, <span class="number">1</span>]</span><br><span class="line">plt.scatter(new_x_data, new_y_data, c=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里的是只拟合，不返回重构的新数据</span></span><br><span class="line">pca = model.fit(x_train, y_train)</span><br><span class="line">pred = model.predict(x_data)</span><br><span class="line">print(classification_report(pred, y_data))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出预测的聚类图</span></span><br><span class="line">plt.scatter(new_x_data, new_y_data, c=pred)</span><br><span class="line"><span class="comment"># plt.scatter(new_x_data, new_y_data, c=y_data)</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;降成3个维度&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pca = PCA(n_components=<span class="number">3</span>)</span><br><span class="line">new_data = pca.fit_transform(x_data)</span><br><span class="line"><span class="comment"># 画出降维后的数据</span></span><br><span class="line">new_x_data = new_data[:, <span class="number">0</span>]</span><br><span class="line">new_y_data = new_data[:, <span class="number">1</span>]</span><br><span class="line">new_z_data = new_data[:, <span class="number">2</span>]</span><br><span class="line">ax = plt.figure().add_subplot(<span class="number">111</span>, projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line">ax.scatter(new_x_data, new_y_data, new_z_data, c=pred, s=<span class="number">10</span>)</span><br><span class="line"><span class="comment"># ax.scatter(new_x_data, new_y_data, new_z_data, c=y_data, s=10)</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><p>运行结果<br><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823010327643-1524522678.png"><br><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823010332560-359279175.png"><br><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823010337798-75088185.png"></p>
</li>
<li><p>输出结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">4</span> <span class="number">8</span> <span class="number">4</span> <span class="number">9</span> <span class="number">7</span> <span class="number">8</span> <span class="number">5</span> <span class="number">7</span> <span class="number">0</span> <span class="number">4</span> <span class="number">4</span> <span class="number">2</span> <span class="number">6</span> <span class="number">3</span> <span class="number">6</span> <span class="number">4</span> <span class="number">5</span> <span class="number">8</span> <span class="number">4</span> <span class="number">1</span> <span class="number">8</span> <span class="number">7</span> <span class="number">4</span> <span class="number">5</span> <span class="number">4</span> <span class="number">5</span> <span class="number">7</span> <span class="number">6</span> <span class="number">4</span> <span class="number">4</span> <span class="number">5</span> <span class="number">1</span> <span class="number">5</span> <span class="number">7</span> <span class="number">0</span> <span class="number">1</span> <span class="number">5</span></span><br><span class="line"> <span class="number">3</span> <span class="number">4</span> <span class="number">8</span> <span class="number">3</span> <span class="number">5</span> <span class="number">4</span> <span class="number">6</span> <span class="number">3</span> <span class="number">9</span> <span class="number">3</span> <span class="number">8</span> <span class="number">0</span> <span class="number">1</span> <span class="number">7</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">4</span> <span class="number">8</span> <span class="number">0</span> <span class="number">4</span> <span class="number">2</span> <span class="number">8</span> <span class="number">9</span> <span class="number">6</span> <span class="number">7</span> <span class="number">9</span> <span class="number">4</span> <span class="number">6</span> <span class="number">2</span> <span class="number">5</span> <span class="number">7</span> <span class="number">5</span> <span class="number">8</span> <span class="number">6</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"> <span class="number">8</span> <span class="number">8</span> <span class="number">3</span> <span class="number">0</span> <span class="number">6</span> <span class="number">7</span> <span class="number">6</span> <span class="number">8</span> <span class="number">5</span> <span class="number">0</span> <span class="number">0</span> <span class="number">9</span> <span class="number">4</span> <span class="number">8</span> <span class="number">4</span> <span class="number">3</span> <span class="number">9</span> <span class="number">8</span> <span class="number">9</span> <span class="number">8</span> <span class="number">4</span> <span class="number">0</span> <span class="number">7</span> <span class="number">2</span> <span class="number">0</span> <span class="number">3</span> <span class="number">8</span> <span class="number">5</span> <span class="number">4</span> <span class="number">2</span> <span class="number">6</span> <span class="number">5</span> <span class="number">9</span> <span class="number">2</span> <span class="number">0</span> <span class="number">6</span> <span class="number">3</span></span><br><span class="line"> <span class="number">8</span> <span class="number">1</span> <span class="number">1</span> <span class="number">7</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">4</span> <span class="number">6</span> <span class="number">7</span> <span class="number">5</span> <span class="number">8</span> <span class="number">7</span> <span class="number">5</span> <span class="number">1</span> <span class="number">8</span> <span class="number">1</span> <span class="number">8</span> <span class="number">4</span> <span class="number">2</span> <span class="number">7</span> <span class="number">4</span> <span class="number">2</span> <span class="number">5</span> <span class="number">8</span> <span class="number">9</span> <span class="number">8</span> <span class="number">9</span> <span class="number">2</span> <span class="number">5</span> <span class="number">5</span> <span class="number">9</span> <span class="number">6</span> <span class="number">1</span> <span class="number">7</span> <span class="number">7</span> <span class="number">6</span></span><br><span class="line"> <span class="number">7</span> <span class="number">0</span> <span class="number">4</span> <span class="number">4</span> <span class="number">9</span> <span class="number">3</span> <span class="number">2</span> <span class="number">4</span> <span class="number">4</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">6</span> <span class="number">5</span> <span class="number">5</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">0</span> <span class="number">3</span> <span class="number">1</span> <span class="number">7</span> <span class="number">6</span> <span class="number">9</span> <span class="number">2</span> <span class="number">9</span> <span class="number">8</span> <span class="number">5</span> <span class="number">9</span> <span class="number">8</span> <span class="number">8</span> <span class="number">9</span> <span class="number">4</span> <span class="number">0</span> <span class="number">9</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"> <span class="number">6</span> <span class="number">4</span> <span class="number">1</span> <span class="number">8</span> <span class="number">5</span> <span class="number">9</span> <span class="number">6</span> <span class="number">6</span> <span class="number">5</span> <span class="number">8</span> <span class="number">0</span> <span class="number">8</span> <span class="number">1</span> <span class="number">2</span> <span class="number">9</span> <span class="number">8</span> <span class="number">1</span> <span class="number">5</span> <span class="number">5</span> <span class="number">0</span> <span class="number">1</span> <span class="number">3</span> <span class="number">7</span> <span class="number">2</span> <span class="number">7</span> <span class="number">9</span> <span class="number">0</span> <span class="number">3</span> <span class="number">0</span> <span class="number">1</span> <span class="number">8</span> <span class="number">7</span> <span class="number">5</span> <span class="number">9</span> <span class="number">5</span> <span class="number">1</span> <span class="number">9</span></span><br><span class="line"> <span class="number">3</span> <span class="number">6</span> <span class="number">5</span> <span class="number">1</span> <span class="number">1</span> <span class="number">8</span> <span class="number">7</span> <span class="number">7</span> <span class="number">2</span> <span class="number">0</span> <span class="number">7</span> <span class="number">3</span> <span class="number">7</span> <span class="number">1</span> <span class="number">1</span> <span class="number">7</span> <span class="number">4</span> <span class="number">4</span> <span class="number">1</span> <span class="number">9</span> <span class="number">9</span> <span class="number">3</span> <span class="number">2</span> <span class="number">0</span> <span class="number">8</span> <span class="number">2</span> <span class="number">4</span> <span class="number">7</span> <span class="number">9</span> <span class="number">2</span> <span class="number">5</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">1</span> <span class="number">0</span> <span class="number">4</span></span><br><span class="line"> <span class="number">3</span> <span class="number">0</span> <span class="number">6</span> <span class="number">5</span> <span class="number">0</span> <span class="number">7</span> <span class="number">4</span> <span class="number">3</span> <span class="number">6</span> <span class="number">5</span> <span class="number">9</span> <span class="number">9</span> <span class="number">6</span> <span class="number">1</span> <span class="number">6</span> <span class="number">9</span> <span class="number">9</span> <span class="number">5</span> <span class="number">1</span> <span class="number">4</span> <span class="number">5</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">8</span> <span class="number">5</span> <span class="number">3</span> <span class="number">0</span> <span class="number">2</span> <span class="number">6</span> <span class="number">6</span> <span class="number">2</span> <span class="number">9</span> <span class="number">3</span></span><br><span class="line"> <span class="number">7</span> <span class="number">3</span> <span class="number">0</span> <span class="number">0</span> <span class="number">4</span> <span class="number">3</span> <span class="number">3</span> <span class="number">2</span> <span class="number">4</span> <span class="number">7</span> <span class="number">6</span> <span class="number">8</span> <span class="number">5</span> <span class="number">5</span> <span class="number">9</span> <span class="number">2</span> <span class="number">9</span> <span class="number">0</span> <span class="number">7</span> <span class="number">2</span> <span class="number">0</span> <span class="number">9</span> <span class="number">8</span> <span class="number">2</span> <span class="number">3</span> <span class="number">6</span> <span class="number">5</span> <span class="number">1</span> <span class="number">8</span> <span class="number">7</span> <span class="number">5</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">9</span> <span class="number">3</span> <span class="number">6</span></span><br><span class="line"> <span class="number">4</span> <span class="number">2</span> <span class="number">8</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">0</span> <span class="number">2</span> <span class="number">9</span> <span class="number">6</span> <span class="number">5</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">8</span> <span class="number">5</span> <span class="number">1</span> <span class="number">4</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">3</span> <span class="number">3</span> <span class="number">7</span> <span class="number">0</span> <span class="number">8</span> <span class="number">0</span> <span class="number">8</span> <span class="number">6</span> <span class="number">5</span> <span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">2</span> <span class="number">8</span> <span class="number">8</span></span><br><span class="line"> <span class="number">1</span> <span class="number">4</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">5</span> <span class="number">5</span> <span class="number">6</span> <span class="number">9</span> <span class="number">9</span> <span class="number">5</span> <span class="number">8</span> <span class="number">4</span> <span class="number">9</span> <span class="number">7</span> <span class="number">2</span> <span class="number">9</span> <span class="number">6</span> <span class="number">3</span> <span class="number">6</span> <span class="number">5</span> <span class="number">7</span> <span class="number">5</span> <span class="number">9</span> <span class="number">8</span> <span class="number">9</span> <span class="number">6</span> <span class="number">9</span> <span class="number">0</span> <span class="number">0</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">1</span> <span class="number">6</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"> <span class="number">2</span> <span class="number">9</span> <span class="number">5</span> <span class="number">1</span> <span class="number">2</span> <span class="number">9</span> <span class="number">2</span> <span class="number">5</span> <span class="number">8</span> <span class="number">5</span> <span class="number">2</span> <span class="number">4</span> <span class="number">2</span> <span class="number">0</span> <span class="number">3</span> <span class="number">1</span> <span class="number">0</span> <span class="number">4</span> <span class="number">5</span> <span class="number">8</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">5</span> <span class="number">1</span> <span class="number">2</span> <span class="number">6</span> <span class="number">2</span> <span class="number">5</span> <span class="number">7</span> <span class="number">0</span> <span class="number">3</span> <span class="number">3</span> <span class="number">6</span> <span class="number">7</span> <span class="number">3</span> <span class="number">7</span></span><br><span class="line"> <span class="number">8</span> <span class="number">2</span> <span class="number">3</span> <span class="number">8</span> <span class="number">4</span> <span class="number">8</span>]</span><br><span class="line">              precision    recall  f1-score   support</span><br><span class="line"></span><br><span class="line">           <span class="number">0</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>        <span class="number">40</span></span><br><span class="line">           <span class="number">1</span>       <span class="number">0.97</span>      <span class="number">1.00</span>      <span class="number">0.99</span>        <span class="number">37</span></span><br><span class="line">           <span class="number">2</span>       <span class="number">0.97</span>      <span class="number">0.97</span>      <span class="number">0.97</span>        <span class="number">38</span></span><br><span class="line">           <span class="number">3</span>       <span class="number">0.98</span>      <span class="number">0.93</span>      <span class="number">0.96</span>        <span class="number">46</span></span><br><span class="line">           <span class="number">4</span>       <span class="number">1.00</span>      <span class="number">0.96</span>      <span class="number">0.98</span>        <span class="number">55</span></span><br><span class="line">           <span class="number">5</span>       <span class="number">0.97</span>      <span class="number">0.95</span>      <span class="number">0.96</span>        <span class="number">59</span></span><br><span class="line">           <span class="number">6</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>        <span class="number">40</span></span><br><span class="line">           <span class="number">7</span>       <span class="number">0.97</span>      <span class="number">1.00</span>      <span class="number">0.99</span>        <span class="number">39</span></span><br><span class="line">           <span class="number">8</span>       <span class="number">0.93</span>      <span class="number">1.00</span>      <span class="number">0.96</span>        <span class="number">52</span></span><br><span class="line">           <span class="number">9</span>       <span class="number">1.00</span>      <span class="number">0.98</span>      <span class="number">0.99</span>        <span class="number">44</span></span><br><span class="line"></span><br><span class="line">    accuracy                           <span class="number">0.98</span>       <span class="number">450</span></span><br><span class="line">   macro avg       <span class="number">0.98</span>      <span class="number">0.98</span>      <span class="number">0.98</span>       <span class="number">450</span></span><br><span class="line">weighted avg       <span class="number">0.98</span>      <span class="number">0.98</span>      <span class="number">0.98</span>       <span class="number">450</span></span><br><span class="line"></span><br><span class="line">[[<span class="number">40</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>]</span><br><span class="line"> [ <span class="number">0</span> <span class="number">37</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>]</span><br><span class="line"> [ <span class="number">0</span>  <span class="number">0</span> <span class="number">37</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>]</span><br><span class="line"> [ <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span> <span class="number">43</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>]</span><br><span class="line"> [ <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span> <span class="number">53</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>]</span><br><span class="line"> [ <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span> <span class="number">56</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">2</span>  <span class="number">0</span>]</span><br><span class="line"> [ <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span> <span class="number">40</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>]</span><br><span class="line"> [ <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span> <span class="number">39</span>  <span class="number">0</span>  <span class="number">0</span>]</span><br><span class="line"> [ <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span> <span class="number">52</span>  <span class="number">0</span>]</span><br><span class="line"> [ <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span> <span class="number">43</span>]]</span><br><span class="line">[[ -<span class="number">1.25946953</span>  <span class="number">21.2748899</span> ]</span><br><span class="line"> [  <span class="number">7.95760889</span> -<span class="number">20.76869375</span>]</span><br><span class="line"> [  <span class="number">6.99192912</span>  -<span class="number">9.95599846</span>]</span><br><span class="line"> ...</span><br><span class="line"> [ <span class="number">10.80128058</span>  -<span class="number">6.9602433</span> ]</span><br><span class="line"> [ -<span class="number">4.87210255</span>  <span class="number">12.42397333</span>]</span><br><span class="line"> [ -<span class="number">0.34439116</span>   <span class="number">6.36555361</span>]]</span><br><span class="line">              precision    recall  f1-score   support</span><br><span class="line"></span><br><span class="line">           <span class="number">0</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>       <span class="number">178</span></span><br><span class="line">           <span class="number">1</span>       <span class="number">0.99</span>      <span class="number">0.99</span>      <span class="number">0.99</span>       <span class="number">183</span></span><br><span class="line">           <span class="number">2</span>       <span class="number">1.00</span>      <span class="number">0.99</span>      <span class="number">1.00</span>       <span class="number">178</span></span><br><span class="line">           <span class="number">3</span>       <span class="number">0.99</span>      <span class="number">0.99</span>      <span class="number">0.99</span>       <span class="number">182</span></span><br><span class="line">           <span class="number">4</span>       <span class="number">0.99</span>      <span class="number">0.99</span>      <span class="number">0.99</span>       <span class="number">182</span></span><br><span class="line">           <span class="number">5</span>       <span class="number">0.99</span>      <span class="number">0.98</span>      <span class="number">0.99</span>       <span class="number">183</span></span><br><span class="line">           <span class="number">6</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>       <span class="number">181</span></span><br><span class="line">           <span class="number">7</span>       <span class="number">0.99</span>      <span class="number">1.00</span>      <span class="number">1.00</span>       <span class="number">178</span></span><br><span class="line">           <span class="number">8</span>       <span class="number">0.97</span>      <span class="number">0.98</span>      <span class="number">0.98</span>       <span class="number">172</span></span><br><span class="line">           <span class="number">9</span>       <span class="number">0.99</span>      <span class="number">0.99</span>      <span class="number">0.99</span>       <span class="number">180</span></span><br><span class="line"></span><br><span class="line">    accuracy                           <span class="number">0.99</span>      <span class="number">1797</span></span><br><span class="line">   macro avg       <span class="number">0.99</span>      <span class="number">0.99</span>      <span class="number">0.99</span>      <span class="number">1797</span></span><br><span class="line">weighted avg       <span class="number">0.99</span>      <span class="number">0.99</span>      <span class="number">0.99</span>      <span class="number">1797</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Python机器学习</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>MNIST 数据集简单识别程序</title>
    <url>/2020/09/21/minist/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  
摘要：Pytorch深度学习、Minist数据集

<a id="more"></a>

<h1 id="MNIST-数据集简单识别程序"><a href="#MNIST-数据集简单识别程序" class="headerlink" title="MNIST 数据集简单识别程序"></a>MNIST 数据集简单识别程序</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/10/20</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn, optim</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Net, self).__init__()</span><br><span class="line">        <span class="comment"># 结构中只有输入和输出层</span></span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">784</span>, <span class="number">10</span>)</span><br><span class="line">        <span class="comment"># 给一个激活函数,dim=1是第一个维度，即输出第一个维度的概率</span></span><br><span class="line">        self.softmax = nn.Softmax(dim=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="comment"># 全连接层把(64, 1, 28, 28)转换为二维(64, 784),view相当于reshape,784=1*28*28</span></span><br><span class="line">        x = x.view(x.size()[<span class="number">0</span>], -<span class="number">1</span>)</span><br><span class="line">        x = self.fc1(x)</span><br><span class="line">        x = self.softmax(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 训练集</span></span><br><span class="line">    train_data = datasets.MNIST(root=<span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">                                train=<span class="literal">True</span>,</span><br><span class="line">                                transform=transforms.ToTensor(),</span><br><span class="line">                                download=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 测试集</span></span><br><span class="line">    test_data = datasets.MNIST(root=<span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">                               train=<span class="literal">False</span>,</span><br><span class="line">                               transform=transforms.ToTensor(),</span><br><span class="line">                               download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 批次大小，即一次加载多少数据</span></span><br><span class="line">    batch_size = <span class="number">64</span></span><br><span class="line">    <span class="comment"># 装载训练集，shuffle=True将数据打乱</span></span><br><span class="line">    train_load = DataLoader(dataset=train_data,</span><br><span class="line">                            batch_size=batch_size,</span><br><span class="line">                            shuffle=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 装载测试集，将数据打乱</span></span><br><span class="line">    test_load = DataLoader(dataset=test_data,</span><br><span class="line">                           batch_size=batch_size,</span><br><span class="line">                           shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># for i, data in enumerate(train_load):</span></span><br><span class="line">    <span class="comment">#     inputs, labels = data</span></span><br><span class="line">    <span class="comment">#     print(inputs.shape)</span></span><br><span class="line">    <span class="comment">#     print(labels.shape)</span></span><br><span class="line">    <span class="comment">#     print(labels)</span></span><br><span class="line">    <span class="comment">#     break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义模型,损失函数，优化器</span></span><br><span class="line">    model = Net()</span><br><span class="line">    mse_loss = nn.MSELoss()</span><br><span class="line">    opt = optim.SGD(model.parameters(), lr=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train</span>():</span></span><br><span class="line">        <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_load):</span><br><span class="line">            <span class="comment"># 每一次迭代都返回一组输入数据和标签</span></span><br><span class="line">            input_data, labels = data</span><br><span class="line">            <span class="comment"># 获得模型的结果</span></span><br><span class="line">            out = model(input_data)</span><br><span class="line">            <span class="comment"># (64)——&gt;(64, 1)</span></span><br><span class="line">            labels = labels.reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 转换为独热编码</span></span><br><span class="line">            one_hot = torch.zeros(input_data.shape[<span class="number">0</span>], <span class="number">10</span>).scatter(<span class="number">1</span>, labels, <span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 计算loss,out, one_hot的shape要一致</span></span><br><span class="line">            loss = mse_loss(out, one_hot)</span><br><span class="line">            <span class="comment"># 梯度清零</span></span><br><span class="line">            opt.zero_grad()</span><br><span class="line">            <span class="comment"># 计算梯度</span></span><br><span class="line">            loss.backward()</span><br><span class="line">            <span class="comment"># 修改权值</span></span><br><span class="line">            opt.step()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义一个测试数据的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">        correct = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(test_load):</span><br><span class="line">            <span class="comment"># 每一次迭代都返回一组输入数据和标签</span></span><br><span class="line">            input_data, labels = data</span><br><span class="line">            <span class="comment"># 获得模型的结果</span></span><br><span class="line">            out = model(input_data)</span><br><span class="line">            <span class="comment"># 获得第一个维度的最大值，以及最大值所在的位置</span></span><br><span class="line">            max_value, pred_index = torch.<span class="built_in">max</span>(out, <span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 用这64个预测数据与标签做一个对比，统计预测正确的数量</span></span><br><span class="line">            correct += (pred_index == labels).<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&#x27;准确率：&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(correct.item() / <span class="built_in">len</span>(test_data)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练和测试10个周期</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        print(i, <span class="string">&#x27;:&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        train()</span><br><span class="line">        test()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>结果：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> :准确率：<span class="number">0.8881</span></span><br><span class="line"><span class="number">1</span> :准确率：<span class="number">0.9025</span></span><br><span class="line"><span class="number">2</span> :准确率：<span class="number">0.9067</span></span><br><span class="line"><span class="number">3</span> :准确率：<span class="number">0.9104</span></span><br><span class="line"><span class="number">4</span> :准确率：<span class="number">0.9147</span></span><br><span class="line"><span class="number">5</span> :准确率：<span class="number">0.9159</span></span><br><span class="line"><span class="number">6</span> :准确率：<span class="number">0.9165</span></span><br><span class="line"><span class="number">7</span> :准确率：<span class="number">0.9184</span></span><br><span class="line"><span class="number">8</span> :准确率：<span class="number">0.9187</span></span><br><span class="line"><span class="number">9</span> :准确率：<span class="number">0.9199</span></span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Pytorch</category>
      </categories>
      <tags>
        <tag>人工智能</tag>
        <tag>Python深度学习</tag>
        <tag>机器视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch GPU版本的安装</title>
    <url>/2021/01/21/pytorchGPU/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：pytorch gpu版的安装</p>
<a id="more"></a>

<h1 id="先查看自己电脑英伟达CUDA支持的版本信息"><a href="#先查看自己电脑英伟达CUDA支持的版本信息" class="headerlink" title="先查看自己电脑英伟达CUDA支持的版本信息"></a>先查看自己电脑英伟达CUDA支持的版本信息</h1><ul>
<li>点帮助——系统信息：<br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210118204602900-1331583185.png"></li>
<li>或者cmd查一下<br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210118225052201-1965735017.png"></li>
</ul>
<h1 id="下载相关CUDA驱动"><a href="#下载相关CUDA驱动" class="headerlink" title="下载相关CUDA驱动"></a>下载相关CUDA驱动</h1><ul>
<li>CUDA下载：<a href="https://developer.nvidia.com/cuda-toolkit-archive">https://developer.nvidia.com/cuda-toolkit-archive</a> </li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210118210106416-585840722.png"></p>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210118210047866-246321417.png"></p>
<ul>
<li>CUDNN下载：<a href="https://developer.nvidia.com/rdp/cudnn-download">https://developer.nvidia.com/rdp/cudnn-download</a> </li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210118211043029-1654699330.png"></p>
<ul>
<li><p>登录后下载<br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210118211849079-1353660430.png"><br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210118212120967-1201392807.png"><br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210118214624942-709353672.png"></p>
</li>
<li><p>以管理员身份运行安装<br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210118214826818-1403326827.png"><br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210118215008009-552130242.png"><br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210118215109849-725365987.png"><br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210118215131944-969395178.png"></p>
</li>
<li><p>如果当前版本比新版本小，那就打勾继续下一步，否则把勾去掉：<br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210118215302971-1969854070.png"><br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210118215543506-68127787.png"><br>继续安装<br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210118215741057-291972430.png"><br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210118231944042-241593146.png"></p>
</li>
<li><p>测试一下安装成功没<br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210118221039591-275765290.png"><br>有这个版本就成功了</p>
</li>
</ul>
<h1 id="cudnn"><a href="#cudnn" class="headerlink" title="cudnn"></a>cudnn</h1><ul>
<li>把另一个压缩包解压，点进去重命名<br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210118221558772-746508545.png"></li>
<li>然后复制到刚刚安装的这个v10.2里面<br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210118232846140-562493373.png"></li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210118232725905-1252139530.png"></p>
<ul>
<li>配置环境变量<br>加这两个就行了<br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210118232549717-1989083141.png"></li>
</ul>
<h1 id="pytorch-GPU版本的安装"><a href="#pytorch-GPU版本的安装" class="headerlink" title="pytorch GPU版本的安装"></a>pytorch GPU版本的安装</h1><ul>
<li><p>pytorch下载：pytorch.org<br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210118235908456-2112798044.png"></p>
</li>
<li><p>复制命令执行即可，要是速度慢或者中间报错，就加个镜像源给他<br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210119000125485-1385846789.png"><br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210119000144317-1878799838.png"></p>
</li>
<li><p>安装后测试一下<br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210119000439226-1220171770.png"></p>
</li>
<li><p>说是少这个，那就装一下，一般都没有提示这个的，应该是我重装系统后这个东西没有了<br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210119000414587-2046218832.png"></p>
</li>
<li><p>重启<br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210119000647785-656121443.png"><br>如果输出True，那就是安装成功且可以使用gpu加速了</p>
</li>
<li><p>如果是用conda安装，加速可以参考下面链接</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/144575524">https://zhuanlan.zhihu.com/p/144575524</a></li>
<li><a href="https://blog.csdn.net/qq_41936559/article/details/102699082">https://blog.csdn.net/qq_41936559/article/details/102699082</a></li>
</ul>
</li>
<li><p>结果<br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210119004428917-1846753032.png"><br>如果输出True，那就是安装成功且可以使用gpu加速了<br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210119004537229-1763915927.png"><br><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210119004615924-641044948.png"></p>
</li>
</ul>
<h3 id="完美"><a href="#完美" class="headerlink" title="=====完美====="></a>=====完美=====</h3>]]></content>
      <categories>
        <category>Pytorch</category>
      </categories>
      <tags>
        <tag>人工智能</tag>
        <tag>Python深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch实现神经网络模型求解线性回归</title>
    <url>/2020/09/14/pytorchLinear/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  
摘要：Pytorch深度学习

<a id="more"></a>

<h2 id="autograd-及Variable"><a href="#autograd-及Variable" class="headerlink" title="autograd 及Variable"></a>autograd 及Variable</h2><h3 id="Autograd-自动微分"><a href="#Autograd-自动微分" class="headerlink" title="Autograd: 自动微分"></a><strong>Autograd: 自动微分</strong></h3><p>autograd包是PyTorch中神经网络的核心, 它可以为基于tensor的的所有操作提供自动微分的功能, 这是一个逐个运行的框架, 意味着反向传播是根据你的代码来运行的, 并且每一次的迭代运行都可能不同.</p>
<h3 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a><strong>Variable</strong></h3><p>tensor是硬币的话，那Variable就是钱包，它记录着里面的钱的多少，和钱的流向</p>
<ul>
<li>详细见<a href="https://zhuanlan.zhihu.com/p/34298983">https://zhuanlan.zhihu.com/p/34298983</a></li>
</ul>
<h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><ul>
<li><a href="https://www.bilibili.com/video/BV1iv41117Zg?p=9">https://www.bilibili.com/video/BV1iv41117Zg?p=9</a></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/9/14</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn, optim</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&#x27;KMP_DUPLICATE_LIB_OK&#x27;</span>] = <span class="string">&#x27;True&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建神经网络模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinearRegression</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="comment"># 定义网络结构</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()  <span class="comment"># 初始化父类</span></span><br><span class="line">        <span class="comment"># 全连接层</span></span><br><span class="line">        self.fc = nn.Linear(<span class="number">1</span>, <span class="number">1</span>)  <span class="comment"># 输入1个，输出1个</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义网络计算，(前向的计算)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="comment"># x 是整个网络的输入,传给全连接层做计算</span></span><br><span class="line">        output = self.fc(x)</span><br><span class="line">        <span class="keyword">return</span> output  <span class="comment"># 返回输出值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 随机生成0-1内的100个数据</span></span><br><span class="line">    x_data = np.random.rand(<span class="number">100</span>)</span><br><span class="line">    <span class="comment"># 0-0.01内的噪点数据，尺寸和x_data一样</span></span><br><span class="line">    noise = np.random.normal(<span class="number">0</span>, <span class="number">0.01</span>, x_data.shape)</span><br><span class="line">    <span class="comment"># print(noise.shape,x_data.shape)</span></span><br><span class="line">    <span class="comment"># 因变量</span></span><br><span class="line">    y_data = x_data * <span class="number">0.1</span> + <span class="number">0.2</span> + noise</span><br><span class="line">    print(y_data.shape)</span><br><span class="line"></span><br><span class="line">    plt.scatter(x_data, y_data)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转成2维</span></span><br><span class="line">    x_data = x_data.reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    y_data = y_data.reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 把numpy类型转成tensor</span></span><br><span class="line">    x_data = torch.FloatTensor(x_data)</span><br><span class="line">    y_data = torch.FloatTensor(y_data)</span><br><span class="line">    <span class="comment"># 转换成pytorch环境里面的变量</span></span><br><span class="line">    inputs = Variable(x_data)</span><br><span class="line">    target = Variable(y_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 建模,神经网络模型</span></span><br><span class="line">    model = LinearRegression()</span><br><span class="line">    <span class="comment"># 定义代价函数,取均方差代价函数</span></span><br><span class="line">    loss = nn.MSELoss()</span><br><span class="line">    <span class="comment"># 定义优化器，取梯度下降法,传入模型参数和学习率</span></span><br><span class="line">    optimizer = optim.SGD(model.parameters(), lr=<span class="number">0.1</span>)</span><br><span class="line">    <span class="comment"># for name, param in model.named_parameters():</span></span><br><span class="line">    <span class="comment">#     print(name,param)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练模型1000次</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        out = model(inputs)</span><br><span class="line">        <span class="comment"># 计算loss</span></span><br><span class="line">        mse_loss = loss(out, target)</span><br><span class="line">        <span class="comment"># 梯度清零</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        <span class="comment"># 计算梯度</span></span><br><span class="line">        mse_loss.backward()</span><br><span class="line">        <span class="comment"># 修改权值</span></span><br><span class="line">        optimizer.step()</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">200</span> == <span class="number">0</span>:</span><br><span class="line">            print(i, mse_loss.item())</span><br><span class="line"></span><br><span class="line">    predict = model(inputs)</span><br><span class="line">    plt.scatter(x_data, y_data)</span><br><span class="line">    plt.plot(x_data, predict.data.numpy(), <span class="string">&#x27;r-&#x27;</span>, lw=<span class="number">3</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\Anaconda\Anaconda3\python.exe D:&#x2F;Appication&#x2F;PyCharm&#x2F;Git&#x2F;computer-vision&#x2F;PytorchLearning&#x2F;LinearRegression&#x2F;linear_regression.py</span><br><span class="line">(100,)</span><br><span class="line">0 0.1716347187757492</span><br><span class="line">200 0.00019752216758206487</span><br><span class="line">400 0.00011990861094091088</span><br><span class="line">600 0.00011977301619481295</span><br><span class="line">800 0.00011977282701991498</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><img src="https://img2020.cnblogs.com/blog/2134757/202009/2134757-20200915003840100-1459674930.png"></p>
]]></content>
      <categories>
        <category>Pytorch</category>
      </categories>
      <tags>
        <tag>人工智能</tag>
        <tag>Python深度学习</tag>
        <tag>机器视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 创建WebStorm快捷方式</title>
    <url>/2020/12/02/ubuntuWebstorm/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：webstorm快捷方式</p>
<a id="more"></a>

<h1 id="Ubuntu20-创建WebStorm快捷方式"><a href="#Ubuntu20-创建WebStorm快捷方式" class="headerlink" title="Ubuntu20 创建WebStorm快捷方式"></a>Ubuntu20 创建WebStorm快捷方式</h1><ul>
<li>在<code>/usr/share/applications</code>中创建<code>webstorm.desktop</code>文件，</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gedit webstorm.desktop</span><br></pre></td></tr></table></figure>


<p>把下面拷贝进去，并保存。<br>注意：需要把 [/home/…/WebStorm-2020.3/WebStorm-203.5981.135/bin] 换成自己的路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name &#x3D; WebStorm</span><br><span class="line">Comment&#x3D; WebStorm</span><br><span class="line">Exec&#x3D;&#x2F;home&#x2F;...&#x2F;WebStorm-2020.3&#x2F;WebStorm-203.5981.135&#x2F;bin&#x2F;webstorm.sh</span><br><span class="line">Icon&#x3D;&#x2F;home&#x2F;...&#x2F;WebStorm-2020.3&#x2F;WebStorm-203.5981.135&#x2F;bin&#x2F;webstorm.png</span><br><span class="line">Terminal&#x3D;false</span><br><span class="line">Type&#x3D;Application</span><br></pre></td></tr></table></figure>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202012/2134757-20201201194057217-787796834.png"></p>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202012/2134757-20201201194116100-520028535.png"></p>
<ul>
<li>掌握这种方法，设置其他软件的图标也是一样的道理</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>webstorm</tag>
      </tags>
  </entry>
  <entry>
    <title>vue在win10中的安装，创建项目</title>
    <url>/2020/11/28/vueSetupInWin10/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：vue.js</p>
<a id="more"></a>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul>
<li><p>B站有个讲的不错的</p>
<ul>
<li><p><a href="https://www.bilibili.com/video/BV1if4y1X7BS?from=search&amp;seid=13331891292206694699">https://www.bilibili.com/video/BV1if4y1X7BS?from=search&amp;seid=13331891292206694699</a></p>
</li>
<li><p>win10环境下注意尽量用管理员身份操作命令</p>
</li>
</ul>
</li>
<li><p>B站看了一下上面那个教程，在win10上还是很有用的</p>
</li>
<li><p>创建项目<br><code>vue create test</code><br><code>cd test</code><br><code>npm run serve</code></p>
</li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202011/2134757-20201128124714612-2060254054.png"></p>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202011/2134757-20201128124738236-282890014.png"></p>
<ul>
<li>然后在打开这个8080端口就有了<br><img src="https://img2020.cnblogs.com/blog/2134757/202011/2134757-20201128124949279-25565746.png"></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy的基本使用</title>
    <url>/2020/08/27/useScrapy/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：项目创建、启动、基本例子的运行</p>
<a id="more"></a>

<h1 id="创建一个scrapy项目"><a href="#创建一个scrapy项目" class="headerlink" title="创建一个scrapy项目"></a>创建一个scrapy项目</h1><ul>
<li><p>在终端输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy startproject &lt;项目名&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200827155958476-199784315.png"></p>
</li>
<li><p>接下可以用pycharm打开<br><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200827160204027-388362013.png"></p>
<h1 id="写爬虫代码"><a href="#写爬虫代码" class="headerlink" title="写爬虫代码"></a>写爬虫代码</h1></li>
<li><p>在文件夹spiders里面写自己的爬虫代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MassageSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;msg_crawl&#x27;</span>  <span class="comment"># 爬虫的名字，一定要给</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;http://www.cae.cn/cae/html/main/col48/column_48_1.html&#x27;</span>]  <span class="comment"># 起始的url</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对爬到的网页进行解析</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response, **kwargs</span>):</span></span><br><span class="line">        print(response.url)</span><br></pre></td></tr></table></figure></li>
<li><p>response会自动去获取start_urls里面的url</p>
</li>
<li><p>启动爬虫：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy crawl &lt;爬虫的名字&gt;</span><br></pre></td></tr></table></figure>
<p>eg</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scrapy crawl msg_crawl</span><br></pre></td></tr></table></figure>
<p><code>记得切换到根目录</code><br><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200827174153464-1659126069.png"></p>
</li>
</ul>
<h1 id="爬取中科院院士信息为例"><a href="#爬取中科院院士信息为例" class="headerlink" title="爬取中科院院士信息为例"></a>爬取中科院院士信息为例</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/27</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MassageSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;msg_crawl&#x27;</span>  <span class="comment"># 爬虫的名字，一定要给</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;http://www.cae.cn/cae/html/main/col48/column_48_1.html&#x27;</span>]  <span class="comment"># 起始的url</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对爬到的网页进行解析</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response, **kwargs</span>):</span></span><br><span class="line">        soup = BeautifulSoup(response.body, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        nodes = soup.find_all(<span class="string">&#x27;li&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;name_list&#x27;</span>&#125;)</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            people_name = node.find(<span class="string">&#x27;a&#x27;</span>).text</span><br><span class="line">            link = <span class="string">&#x27;http://www.cae.cn/&#x27;</span> + node.find(<span class="string">&#x27;a&#x27;</span>)[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">            print(<span class="string">&#x27;&#123;&#125;. &#123;&#125;: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i, people_name, link))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><p>结果如下：<br><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200827180139794-2102099363.png"><br><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200827180158997-2057957749.png"></p>
</li>
<li><p>所以基本上处理网页就是在<code> def parse(self, response, **kwargs)</code> 这里了</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Scrapy网络爬虫</category>
      </categories>
      <tags>
        <tag>人工智能</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>SVM支持向量机基础</title>
    <url>/2020/08/24/svm/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：SVM支持向量机：基础使用、处理非线性问题，低维映射到高维、核函数、推导</p>
<a id="more"></a>

<h1 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h1><ul>
<li>用于图像识别、人脸识别等复杂的分类情况</li>
<li>但是效果没有深度学习好，所以现在SVM的很多领域被深度学习取代了</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/21</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC  <span class="comment"># 导入svm的分类器SVC</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二维的情况</span></span><br><span class="line">x = [[<span class="number">3</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">1</span>]]</span><br><span class="line">y = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]  <span class="comment"># 分类标签，2个类</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建模, 核函数为线性</span></span><br><span class="line">model = SVC(kernel=<span class="string">&#x27;linear&#x27;</span>)</span><br><span class="line">model.fit(x, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印支持向量</span></span><br><span class="line">print(<span class="string">&#x27;支持向量：\n&#x27;</span>, model.support_vectors_)</span><br><span class="line"><span class="comment"># 看看哪几个点是支持向量，打印出来是第2和第0个</span></span><br><span class="line">print(<span class="string">&#x27;第几个点是支持向量：\n&#x27;</span>, model.support_)</span><br><span class="line"><span class="comment"># 支持向量的分布情况，在分界线两端,这里打出来是各有1个</span></span><br><span class="line">print(<span class="string">&#x27;支持向量在分界线两端的分布情况\n&#x27;</span>, model.n_support_)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测类别</span></span><br><span class="line">print(<span class="string">&#x27;预测坐标(%d, %d)的类别是：&#x27;</span> % (-<span class="number">8</span>, <span class="number">3</span>), model.predict([[-<span class="number">8</span>, <span class="number">3</span>]]))</span><br><span class="line">print(<span class="string">&#x27;预测坐标(%d, %d)的类别是：&#x27;</span> % (<span class="number">4</span>, <span class="number">3</span>), model.predict([[<span class="number">4</span>, <span class="number">3</span>]]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 看看系数和截距</span></span><br><span class="line">print(<span class="string">&#x27;系数：\n&#x27;</span>, model.coef_)</span><br><span class="line">print(<span class="string">&#x27;截距:\n&#x27;</span>, model.intercept_)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">支持向量：</span><br><span class="line"> [[1. 1.]</span><br><span class="line"> [3. 3.]]</span><br><span class="line">第几个点是支持向量：</span><br><span class="line"> [2 0]</span><br><span class="line">支持向量在分界线两端的分布情况</span><br><span class="line"> [1 1]</span><br><span class="line">预测坐标(-8, 3)的类别是： [0]</span><br><span class="line">预测坐标(4, 3)的类别是： [1]</span><br><span class="line">系数：</span><br><span class="line"> [[0.5 0.5]]</span><br><span class="line">截距:</span><br><span class="line"> [-2.]</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="svm处理非线性问题，低维映射到高维"><a href="#svm处理非线性问题，低维映射到高维" class="headerlink" title="svm处理非线性问题，低维映射到高维"></a>svm处理非线性问题，低维映射到高维</h1><ul>
<li>如2维转3维，找到切平面，在投影到2维平面，可能是个圆或者椭圆的分界线</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/22</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;用于解决非线性问题&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 制造数据</span></span><br><span class="line">x_data, y_data = datasets.make_circles(n_samples=<span class="number">500</span>, factor=<span class="number">0.3</span>, noise=<span class="number">0.1</span>)</span><br><span class="line"><span class="comment"># 画出来看看</span></span><br><span class="line">plt.scatter(x_data[:, <span class="number">0</span>], x_data[:, <span class="number">1</span>], c=y_data)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;接下来把2维映射到3维&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">z_data = x_data[:, <span class="number">0</span>] ** <span class="number">2</span> + x_data[:, <span class="number">1</span>] ** <span class="number">2</span></span><br><span class="line"><span class="comment"># 画3d图</span></span><br><span class="line">ax = plt.figure().add_subplot(<span class="number">111</span>, projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line">ax.scatter(x_data[:, <span class="number">0</span>], x_data[:, <span class="number">1</span>], z_data, c=y_data, s=<span class="number">10</span>)  <span class="comment"># s是大小</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823004743724-1988786159.png"></p>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823004757923-1357665534.png"></p>
<h2 id="投影到二维平面"><a href="#投影到二维平面" class="headerlink" title="投影到二维平面"></a>投影到二维平面</h2><p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823004822810-1981330144.png"></p>
<h1 id="核函数"><a href="#核函数" class="headerlink" title="核函数"></a>核函数</h1><p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823222419733-960063708.png"></p>
<h1 id="svm推导过程"><a href="#svm推导过程" class="headerlink" title="svm推导过程"></a>svm推导过程</h1><ul>
<li>推导过程理解起来较为复杂，见其他机器学习教材或者相关资料</li>
</ul>
<h1 id="svm处理多分类问题"><a href="#svm处理多分类问题" class="headerlink" title="svm处理多分类问题"></a>svm处理多分类问题</h1><ul>
<li>一般svm是处理二值分类问题的，如果处理多个类别的，使用下面三种方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">model &#x3D; svm.SVC(decision_function_shape&#x3D;&#39;ovo&#39;)</span><br><span class="line">model &#x3D; svm.SVC(decision_function_shape&#x3D;&#39;ovr&#39;)</span><br><span class="line">model &#x3D; svm.SVC(probability&#x3D;True)</span><br></pre></td></tr></table></figure>
<ul>
<li><p>以下是先用pca降维后，再用svm进行分类的例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/30</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;data/wine.csv&#x27;</span>)</span><br><span class="line">y_data = data.iloc[:, <span class="number">0</span>]</span><br><span class="line">x_data = data.iloc[:, <span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x_data, y_data)</span><br><span class="line">pca = PCA(n_components=<span class="number">2</span>)</span><br><span class="line">new_data = pca.fit_transform(x_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出来看一下</span></span><br><span class="line">plt.scatter(new_data[:, <span class="number">0</span>], new_data[:, <span class="number">1</span>], c=y_data)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建模预测,多分类的三种方法，有时候会警告,不影响</span></span><br><span class="line"><span class="comment"># model = svm.SVC(decision_function_shape=&#x27;ovo&#x27;)</span></span><br><span class="line">model = svm.SVC(decision_function_shape=<span class="string">&#x27;ovr&#x27;</span>)</span><br><span class="line"><span class="comment"># model = svm.SVC(probability=True)</span></span><br><span class="line">model.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line">prediction = model.predict(x_data)</span><br><span class="line"></span><br><span class="line">print(model.score(x_test, y_test))</span><br><span class="line">print(classification_report(y_data, prediction))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出预测的</span></span><br><span class="line">plt.scatter(new_data[:, <span class="number">0</span>], new_data[<span class="number">0</span>:, <span class="number">1</span>], c=prediction)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li>
<li><p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.6888888888888889</span><br><span class="line">              precision    recall  f1-score   support</span><br><span class="line"></span><br><span class="line">           1       0.89      0.85      0.87        59</span><br><span class="line">           2       0.70      0.72      0.71        71</span><br><span class="line">           3       0.49      0.50      0.49        48</span><br><span class="line"></span><br><span class="line">    accuracy                           0.70       178</span><br><span class="line">   macro avg       0.69      0.69      0.69       178</span><br><span class="line">weighted avg       0.71      0.70      0.70       178</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></li>
<li><p><strong>原始的</strong><br><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200830170449831-780268746.png"></p>
</li>
<li><p><strong>预测的</strong><br><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200830170513507-1029056927.png"></p>
</li>
<li><p>改进<br>上面这个题用随机森林的效果会更好，无论降到2/3/5维，预测效果几乎完美<br><code>model = RandomForestClassifier(n_estimators=100)</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Python机器学习</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>CppLearning</title>
    <url>/2021/01/05/CppLearning/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：面向对象</p>
<a id="more"></a>



<h1 id="防卫式头文件"><a href="#防卫式头文件" class="headerlink" title="防卫式头文件"></a>防卫式头文件</h1><ul>
<li><p>在头文件前后加</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ALGORITHM_COMPETITION_TRAINING_GUARD_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ALGORITHM_COMPETITION_TRAINING_GUARD_H</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//ALGORITHM_COMPETITION_TRAINING_GUARD_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>ALGORITHM_COMPETITION_TRAINING_GUARD_H名字随便取</li>
</ul>
</li>
</ul>
<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><ul>
<li>类分两种<ul>
<li>一种带指针，大多是需要写析构函数的</li>
<li>一种不带指针，一般(九成以上)是不用在类内写析构函数的</li>
</ul>
</li>
</ul>
<h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><ul>
<li><p>高级的写法</p>
<ul>
<li><p>赋值时，使用列表参数</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> re, im;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Complex(<span class="keyword">double</span> r = <span class="number">0</span>, <span class="keyword">double</span> i = <span class="number">0</span>) : re(r), im(i) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>上面写法等价于：</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Complex(<span class="keyword">double</span> r = <span class="number">0</span>, <span class="keyword">double</span> i = <span class="number">0</span>) &#123;</span><br><span class="line">      re = r;</span><br><span class="line">      im = i;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>  两者的区别是第一种更加高效。</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>重载</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> re, im;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Complex(<span class="keyword">double</span> r, <span class="keyword">double</span> i) : re(r), im(i) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex() : re(<span class="number">0</span>), im(<span class="number">0</span>) &#123;&#125;<span class="comment">//与上面冲突</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>由于带参的构造函数是有默认参数的，所以<code>Complex() : re(0), im(0) &#123;&#125;</code>会发生冲突。因为如果类外定义了一个<code>Complex c1;</code> 那么它会去找构造函数，发现两个构造函数都可以，就不知道要哪一个，所以报错</li>
</ul>
</li>
<li><p><a href="https://www.bilibili.com/video/BV1gb411g7pa?p=3">https://www.bilibili.com/video/BV1gb411g7pa?p=3</a></p>
</li>
<li><p>构造函数如果放在私有里面，则外面是无法创建对象调用的</p>
</li>
</ul>
<h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><ul>
<li><p>对于不改变函数里面的数据的，加上const，好习惯</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> re, im;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Complex(<span class="keyword">double</span> r, <span class="keyword">double</span> i) : re(r), im(i) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">real</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;<span class="comment">//不改变函数里面的数据</span></span><br><span class="line">        <span class="keyword">return</span> re;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">imag</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="comment">//不改变函数里面的数据</span></span><br><span class="line">        <span class="keyword">return</span> im;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>比如在设计一个类时，有些方法是拿数据出来而不改变数据，就加上const</li>
<li>如果不加const，那么在类外用<code>const Complex complex(2, 1);</code>会报错</li>
</ul>
</li>
</ul>
<h1 id="操作符重载"><a href="#操作符重载" class="headerlink" title="操作符重载"></a>操作符重载</h1><ul>
<li><p>所有的成员函数都有this参数，只是没写出来</p>
</li>
<li><p>谁调用改成员函数，谁就是this</p>
</li>
<li><p><a href="https://www.bilibili.com/video/BV1gb411g7pa?p=5">https://www.bilibili.com/video/BV1gb411g7pa?p=5</a></p>
</li>
</ul>
<ul>
<li><p>类外定义的，必定不用返回引用类型，因为函数调用已结束所有局部变量就消失了，所以返回的是值</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">inline</span> Complex <span class="keyword">operator</span> + (<span class="keyword">const</span> Complex &amp;x, <span class="keyword">const</span> Complex &amp;y) &#123;</span><br><span class="line">    <span class="keyword">return</span> Complex(x.real() + y.real(), x.imag() + y.imag());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> Complex <span class="keyword">operator</span>+(<span class="keyword">const</span> Complex &amp;x, <span class="keyword">const</span> <span class="keyword">double</span> y) &#123;</span><br><span class="line">    <span class="keyword">return</span> Complex(x.real() + y, x.imag());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> Complex <span class="keyword">operator</span>+(<span class="keyword">const</span> <span class="keyword">double</span> x, <span class="keyword">const</span> Complex &amp;y) &#123;</span><br><span class="line">    <span class="keyword">return</span> Complex(y.real() + x, y.imag());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> Complex <span class="keyword">operator</span>+(<span class="keyword">const</span> Complex &amp;x) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> Complex <span class="keyword">operator</span>-(<span class="keyword">const</span> Complex &amp;x) &#123;</span><br><span class="line">    <span class="keyword">return</span> Complex(-x.real(), -x.imag());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>如果返回引用类型，说明得到的结果会放在一个已经存在的变量里面，如下是this</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> re, im;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Complex(<span class="keyword">double</span> r, <span class="keyword">double</span> i) : re(r), im(i) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">real</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> re;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">imag</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> im;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">fun</span><span class="params">(<span class="keyword">const</span> Complex &amp;c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c.re + c.im;</span><br><span class="line">    &#125;</span><br><span class="line">    Complex&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> Complex&amp;);<span class="comment">//声明</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> Complex&amp; Complex::<span class="keyword">operator</span> += (<span class="keyword">const</span> Complex&amp; <span class="built_in">complex</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;re += <span class="built_in">complex</span>.re;</span><br><span class="line">    <span class="keyword">this</span>-&gt;im += <span class="built_in">complex</span>.im;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;<span class="comment">//返回引用类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出&lt;&lt;重载见<a href="https://www.bilibili.com/video/BV1gb411g7pa?p=5">https://www.bilibili.com/video/BV1gb411g7pa?p=5</a></p>
</li>
</ul>
<h1 id="拷贝和析构"><a href="#拷贝和析构" class="headerlink" title="拷贝和析构"></a>拷贝和析构</h1><ul>
<li><p>拷贝构造</p>
<p>  构造函数的参数是该类的类型</p>
</li>
<li><p>拷贝赋值</p>
</li>
<li><p>如果类中有指针成员，那么一定要写拷贝构造和拷贝赋值，拷贝构造即深拷贝</p>
<p>  不写的话是浅拷贝，会造成内存泄漏</p>
  <img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210109225140965-101007426.png" style="zoom:80%;">

</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MakeString</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span> *data1;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> *data;</span><br><span class="line">    MakeString(<span class="keyword">const</span> <span class="keyword">char</span> *str);</span><br><span class="line"></span><br><span class="line">    MakeString(<span class="keyword">const</span> MakeString &amp;str);<span class="comment">//拷贝构造</span></span><br><span class="line">    MakeString&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> MakeString &amp;str);<span class="comment">//拷贝赋值</span></span><br><span class="line"></span><br><span class="line">    ~MakeString();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">MakeString::MakeString</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str) &#123;</span><br><span class="line">        data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(str) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(data, str);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//未指定初值</span></span><br><span class="line">        data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1</span>];</span><br><span class="line">        *data = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//深拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">MakeString::MakeString</span><span class="params">(<span class="keyword">const</span> MakeString &amp;str)</span> </span>&#123;</span><br><span class="line">    data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(str.data) + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(data, str.data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MakeString &amp;MakeString::<span class="keyword">operator</span>=(<span class="keyword">const</span> MakeString &amp;str) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;str) &#123;<span class="comment">//检测自我赋值，一定要写</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>[] data;</span><br><span class="line">    data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(str.data) + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(data, str.data);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MakeString::~MakeString() &#123;</span><br><span class="line">    <span class="keyword">delete</span>[] data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//test MakeString</span></span><br><span class="line"> MakeString *m1 = <span class="keyword">new</span> MakeString(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"> <span class="function">MakeString <span class="title">m2</span><span class="params">(<span class="string">&quot;&quot;</span>)</span></span>;</span><br><span class="line"> <span class="function">MakeString <span class="title">m3</span><span class="params">(<span class="string">&quot;world&quot;</span>)</span></span>;</span><br><span class="line"> <span class="built_in">cout</span>&lt;&lt;m3.data&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> <span class="built_in">cout</span>&lt;&lt;m1-&gt;data&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> m2 = m3;</span><br><span class="line"> <span class="built_in">cout</span>&lt;&lt;m2.data&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> <span class="function">MakeString <span class="title">m4</span><span class="params">(m3)</span></span>;</span><br><span class="line"> <span class="built_in">cout</span>&lt;&lt;m4.data&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">world</span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line">world</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210109232032233-943600339.png" style="zoom: 67%;">

<h1 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h1><p>​        <img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210110152821109-820912770.png" style="zoom:80%;"></p>
<ul>
<li><p>只要用到array new， 就一定要用array delete</p>
  <img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210110200447951-291187031.png" style="zoom:80%;">

</li>
</ul>
<h1 id="Static"><a href="#Static" class="headerlink" title="Static"></a>Static</h1><ul>
<li><p>类内加了static的变量是所有类内成员函数共享的</p>
</li>
<li><p>静态函数和一般的成员函数的区别是：静态函数没有this指针</p>
<ul>
<li>所以静态函数只能存取处理静态数据</li>
</ul>
</li>
<li><p>定义了静态数据后，一定要在类外加一行，如下所示：</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> rate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">set_rate</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span> &amp;x)</span> </span>&#123;</span><br><span class="line">        rate = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> Account::rate = <span class="number">5.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Account account;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;Account::rate&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    account.set_rate(<span class="number">9</span>);<span class="comment">//Account::set_rate(9);</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;Account::rate&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">9</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<ul>
<li>静态变量可以通过对象或者类名调用</li>
</ul>
</li>
<li><p>static <a href="https://www.bilibili.com/video/BV1gb411g7pa?p=10">https://www.bilibili.com/video/BV1gb411g7pa?p=10</a></p>
</li>
</ul>
<h1 id="模板类"><a href="#模板类" class="headerlink" title="模板类"></a>模板类</h1><h2 id="class-template类模板"><a href="#class-template类模板" class="headerlink" title="class template类模板"></a>class template类模板</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T a, b;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    People(T a1, T b1) : a(a1), b(b1) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">function</span><span class="params">(T a1, T b1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a1 * b1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">People&lt;<span class="keyword">int</span>&gt; <span class="title">people1</span><span class="params">(<span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">    <span class="function">People&lt;<span class="keyword">double</span>&gt; <span class="title">people2</span><span class="params">(<span class="number">1.2</span>, <span class="number">3.4</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="function-template函数模板"><a href="#function-template函数模板" class="headerlink" title="function template函数模板"></a>function template函数模板</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span><span class="comment">//或者template&lt;typename T&gt;</span></span><br><span class="line"><span class="function">T &amp;<span class="title">min</span><span class="params">(T &amp;a1, T &amp;b1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a1 &lt; b1 ? a1 : b1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">9</span>, b = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">float</span> c = <span class="number">1</span>, d = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; min(a, b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; min(c, d) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h1><ul>
<li><p>标准库的所有东西都放在namespace std里面</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="built_in">std</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>三种使用方式</p>
<ul>
<li><p>第一种最常用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span> &lt;&lt; ...;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ...;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &lt;&lt; ...;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ...;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &lt;&lt; ;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ...;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
<h1 id="几种关系"><a href="#几种关系" class="headerlink" title="几种关系"></a>几种关系</h1><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><ul>
<li><p>一个类里面的数据类型是另一个类</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>&#123;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">  B &lt;T&gt; data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>构造顺序是由内到外，如上是先调用B的构造函数，再A的</p>
</li>
<li><p>析构顺序是由外到内</p>
</li>
</ul>
<h2 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringRep</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">String</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    String();</span><br><span class="line">    String(<span class="keyword">const</span> <span class="keyword">char</span>* s);</span><br><span class="line">    String(<span class="keyword">const</span> String&amp; s);</span><br><span class="line">    String &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> String&amp; s);</span><br><span class="line">    ~String();</span><br><span class="line">    . . . .</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    StringRep* rep; <span class="comment">// pimpl</span></span><br><span class="line">&#125;;	</span><br></pre></td></tr></table></figure>
<p>然后把具体的实现放在StringRep类里面</p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul>
<li><p>先调用父类的构造函数，再子类的(构造由内到外)</p>
</li>
<li><p>先定义子类的析构函数，再父类的(析构由外到内)</p>
</li>
<li><p>父类的析构函数必须是virtual的//养成良好的编程习惯</p>
</li>
<li><p>继承搭配虚函数使用更好</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">( )</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;<span class="comment">//纯虚函数后面带const = 0，一定要重写</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; msg)</span></span>;<span class="comment">//可以被重写</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">objectID</span><span class="params">( )</span> <span class="keyword">const</span></span>;<span class="comment">//不可被重写</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span> <span class="keyword">public</span> Shape &#123; ... &#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ellipse</span>:</span> <span class="keyword">public</span> Shape &#123; ... &#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>如果是父类中想要子类被重写的函数，就加virtual</li>
</ul>
</li>
</ul>
<ul>
<li><p>继承+组合</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    A(<span class="keyword">int</span> age1) : age(age1) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;age birth is &quot;</span> &lt;&lt; age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~A() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;over A class\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dad</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Dad(<span class="built_in">string</span> str) : name(str) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;father is &quot;</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~Dad() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;over father\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span> <span class="keyword">public</span> Dad &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    A age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Son(<span class="keyword">const</span> <span class="built_in">string</span> &amp;str, <span class="keyword">const</span> <span class="built_in">string</span> &amp;name1, <span class="keyword">const</span> A &amp;age1) : Dad(str), name(name1), age(age1) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;son is &quot;</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~Son() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;over son\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Son(<span class="string">&quot;Nick&quot;</span>, <span class="string">&quot;Tom&quot;</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">age birth is 20</span><br><span class="line">father is Nick</span><br><span class="line">son is Tom</span><br><span class="line">over son</span><br><span class="line">over A class</span><br><span class="line">over father</span><br><span class="line">over A class</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>调用构造函数的顺序是：先A类，再父类，再子类</li>
<li>析构的顺序与构造相反</li>
</ul>
</li>
</ul>
<h1 id="STL基础"><a href="#STL基础" class="headerlink" title="STL基础"></a>STL基础</h1><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><h3 id="输入输出字符串"><a href="#输入输出字符串" class="headerlink" title="输入输出字符串"></a>输入输出字符串</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    string s = &quot;12312hello world...&quot;;</span></span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    getline(<span class="built_in">cin</span>, s);<span class="comment">//输入字符串</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;s;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">21314 hello woefsdcsd</span><br><span class="line">21314 hello woefsdcsd</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h3 id="字符串拼凑"><a href="#字符串拼凑" class="headerlink" title="字符串拼凑"></a>字符串拼凑</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    string s = &quot;12312hello world...&quot;;</span></span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    s += <span class="string">&quot;shda s&quot;</span>;</span><br><span class="line">    s += <span class="string">&quot;shda s&quot;</span>;</span><br><span class="line">    s += <span class="string">&#x27;5&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;s;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shda sshda s5</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s = <span class="string">&quot;1523525431873&quot;</span>;</span><br><span class="line">    sort(s.begin(), s.end());</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1122333455578</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<ul>
<li><code>s.begin(), s.end()</code>是迭代器，可以看成是指针</li>
<li>如果要访问最后一个字符，应该是<code>*(--s.end())</code></li>
</ul>
<h3 id="erase删除"><a href="#erase删除" class="headerlink" title="erase删除"></a>erase删除</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s = <span class="string">&quot;1523525431873&quot;</span>;</span><br><span class="line">    s.erase(s.begin());</span><br><span class="line">    s.erase(--s.end());</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">52352543187</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h3 id="substr取子串"><a href="#substr取子串" class="headerlink" title="substr取子串"></a>substr取子串</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s = <span class="string">&quot;1523525431873&quot;</span>;</span><br><span class="line">    s = s.substr(<span class="number">2</span>, <span class="number">3</span>);<span class="comment">//从索引为2开始取，往后取三个</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s;</span><br><span class="line">    s = <span class="string">&quot;1523525431873&quot;</span>;</span><br><span class="line">    s = s.substr(<span class="number">6</span>, <span class="number">-1</span>);<span class="comment">//从索引为6开始取，直到最后一个</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; s;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">235</span><br><span class="line">5431873</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h3 id="几种循环方式"><a href="#几种循环方式" class="headerlink" title="几种循环方式"></a>几种循环方式</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s = <span class="string">&quot;1523525431873&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); ++i)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s[i];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">string</span>::iterator iter = s.begin(); iter != s.end(); iter++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *iter;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : s)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; s;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1523525431873</span><br><span class="line">1523525431873</span><br><span class="line">1523525431873</span><br><span class="line">1523525431873</span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><h3 id="初始化、打印"><a href="#初始化、打印" class="headerlink" title="初始化、打印"></a>初始化、打印</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">3</span>, <span class="number">1</span>)</span></span>;<span class="comment">//初始化3个1</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v1</span><span class="params">(<span class="number">3</span>)</span></span>;<span class="comment">//初始化3个0</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;<span class="comment">//初始化5个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x:v)<span class="built_in">cout</span> &lt;&lt; x;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x:v1)<span class="built_in">cout</span> &lt;&lt; x;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x:v2)<span class="built_in">cout</span> &lt;&lt; x;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">111</span><br><span class="line">000</span><br><span class="line">12345</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h3 id="取元素-或者at"><a href="#取元素-或者at" class="headerlink" title="取元素 []或者at()"></a>取元素 []或者at()</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;<span class="comment">//初始化5个数</span></span><br><span class="line">    <span class="comment">//取某个元素</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;v[<span class="number">2</span>];<span class="comment">//取索引为2 元素</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;v.at(<span class="number">4</span>);<span class="comment">//取索引为4的元素</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="追加push-back"><a href="#追加push-back" class="headerlink" title="追加push_back"></a>追加push_back</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;<span class="comment">//初始化5个数</span></span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x:v) <span class="built_in">cout</span> &lt;&lt; x;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12345777</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h3 id="resize重置大小，后面补0"><a href="#resize重置大小，后面补0" class="headerlink" title="resize重置大小，后面补0"></a>resize重置大小，后面补0</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;<span class="comment">//初始化5个数</span></span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x:v) <span class="built_in">cout</span> &lt;&lt; x;</span><br><span class="line">    v.resize(<span class="number">20</span>);<span class="comment">//进行重置大小，后面补0</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x:v) <span class="built_in">cout</span> &lt;&lt; x;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12345777</span><br><span class="line">12345777000000000000</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h3 id="erase删除，在vector中的复杂度为O-n"><a href="#erase删除，在vector中的复杂度为O-n" class="headerlink" title="erase删除，在vector中的复杂度为O(n)"></a>erase删除，在vector中的复杂度为O(n)</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;<span class="comment">//初始化5个数</span></span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x:v) <span class="built_in">cout</span> &lt;&lt; x;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//删除,在这里的复杂度为O(n)</span></span><br><span class="line">    v.erase(v.begin());</span><br><span class="line">    v.erase(--v.end());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x:v) <span class="built_in">cout</span> &lt;&lt; x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12345777</span><br><span class="line">234577</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h3 id="front-back"><a href="#front-back" class="headerlink" title="front(),back()"></a>front(),back()</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;<span class="comment">//初始化5个数</span></span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x:v) <span class="built_in">cout</span> &lt;&lt; x;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//取元素</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v.front() &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; v.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *v.begin() &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; *(--v.end()) &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; v[v.size() - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12345777</span><br><span class="line">1 7</span><br><span class="line">1 7 7</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h3 id="排序sort"><a href="#排序sort" class="headerlink" title="排序sort"></a>排序sort</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v&#123;<span class="number">1</span>, <span class="number">55</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">25</span>&#125;;<span class="comment">//初始化5个数</span></span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    v.push_back(<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x:v) <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    sort(v.begin(), v.end());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x:v) <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    sort(v.rbegin(), v.rend());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x:v) <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 55 15 4 25 7 7 7</span><br><span class="line">1 4 7 7 7 15 25 55</span><br><span class="line">55 25 15 7 7 7 4 1</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<ul>
<li><p>从大到小还可以用<br><code>sort(v.begin(), v.end(), greater&lt;&gt;());</code></p>
<h3 id="循环与string的类似"><a href="#循环与string的类似" class="headerlink" title="循环与string的类似"></a>循环与string的类似</h3></li>
<li><p>用的较多的是<code>for (auto x:v) cout &lt;&lt; x &lt;&lt; &#39; &#39;;</code></p>
</li>
</ul>
<h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul>
<li>一般刷算法题都直接这样写<code> stack&lt;int&gt; s;</code></li>
<li>如果不用<code>&lt;bits/stdc++.h&gt;</code>,那要用<code>&lt;stack&gt;</code><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="push-pop-top"><a href="#push-pop-top" class="headerlink" title="push, pop, top"></a>push, pop, top</h3></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    s.push(<span class="number">2</span>);</span><br><span class="line">    s.push(<span class="number">1</span>);</span><br><span class="line">    s.push(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s.top();</span><br><span class="line">    s.pop();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s.top();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">31</span><br></pre></td></tr></table></figure>
<ul>
<li>push 入栈</li>
<li>pop出栈</li>
<li>top取栈顶</li>
<li>size取长度</li>
<li><code>cout &lt;&lt; s.empty();</code> 是空就返回1，否则为0<h3 id="十进制转二进制"><a href="#十进制转二进制" class="headerlink" title="十进制转二进制"></a>十进制转二进制</h3></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tenToTwo</span><span class="params">(<span class="keyword">int</span> decimal)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (decimal != <span class="number">0</span>) &#123;</span><br><span class="line">        s.push(decimal % <span class="number">2</span>);</span><br><span class="line">        decimal /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!s.empty()) &#123;</span><br><span class="line">        res = res * <span class="number">10</span> + s.top();</span><br><span class="line">        s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; tenToTwo(<span class="number">11</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1011</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h3 id="逆序输出句子单词"><a href="#逆序输出句子单词" class="headerlink" title="逆序输出句子单词"></a>逆序输出句子单词</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    getline(<span class="built_in">cin</span>, str);</span><br><span class="line">    ss &lt;&lt; str;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="built_in">string</span>&gt; s;</span><br><span class="line">    <span class="keyword">while</span> (ss &gt;&gt; str) &#123;</span><br><span class="line">        s.push(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!s.empty()) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s.top();</span><br><span class="line">        <span class="keyword">if</span> (s.size() != <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">we are young man</span><br><span class="line">man young are we</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h3 id="字符串转化为数字"><a href="#字符串转化为数字" class="headerlink" title="字符串转化为数字"></a>字符串转化为数字</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    <span class="built_in">string</span> str = <span class="string">&quot;12455&quot;</span>;</span><br><span class="line">    <span class="comment">//把字符串转换为数字</span></span><br><span class="line">    ss &lt;&lt; str;<span class="comment">//先把“12345”流入ss</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    ss &gt;&gt; num;<span class="comment">//再从ss流入整型num</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; num;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12455</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    <span class="built_in">string</span> str = <span class="string">&quot;12455&quot;</span>;</span><br><span class="line">    <span class="comment">//把字符串转换为数字</span></span><br><span class="line">    <span class="keyword">int</span> num = stoi(str);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; num;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12455</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h3 id="数字转换为字符串"><a href="#数字转换为字符串" class="headerlink" title="数字转换为字符串"></a>数字转换为字符串</h3><h4 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="comment">//数字转化为字符串</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">12556</span>;</span><br><span class="line">    ss &lt;&lt; num;</span><br><span class="line">    ss &gt;&gt; str;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; str;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12556</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h4 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="comment">//数字转化为字符串</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">12556</span>;</span><br><span class="line">    str = to_string(num);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; str;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12556</span><br></pre></td></tr></table></figure>
<h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(<span class="number">4</span>);</span><br><span class="line">    q.push(<span class="number">3</span>);</span><br><span class="line">    q.push(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;q.size()&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;q.front();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 4</span><br></pre></td></tr></table></figure>
<h2 id="map-和-unordered-map"><a href="#map-和-unordered-map" class="headerlink" title="map 和 unordered_map"></a>map 和 unordered_map</h2><ul>
<li>map: 有序的，底层是树状结构<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; dict;</span><br><span class="line">    dict[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    dict[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    dict[<span class="number">4</span>] = <span class="number">12</span>;</span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> item: dict)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; item.first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; item.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//另一种打印方式</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> iterator = dict.begin(); iterator != dict.end(); iterator++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; iterator-&gt;first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; iterator-&gt;second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 2</span><br><span class="line">2 0</span><br><span class="line">4 12</span><br><span class="line">1 2</span><br><span class="line">2 0</span><br><span class="line">4 12</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></li>
<li>unordered——map：无序的，底层是哈希结构</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; dict;</span><br><span class="line">    dict[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    dict[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    dict[<span class="number">4</span>] = <span class="number">12</span>;</span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> item: dict)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; item.first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; item.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//另一种打印方式</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> iterator = dict.begin(); iterator != dict.end(); iterator++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; iterator-&gt;first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; iterator-&gt;second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 12</span><br><span class="line">1 2</span><br><span class="line">2 0</span><br><span class="line">4 12</span><br><span class="line">1 2</span><br><span class="line">2 0</span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>打印出来是无序的<h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="comment">//    set&lt;int&gt; s;</span></span><br><span class="line">    s.insert(<span class="number">2</span>);</span><br><span class="line">    s.insert(<span class="number">2</span>);</span><br><span class="line">    s.insert(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i:s)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">232</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">deque</span>;</span><br><span class="line">    <span class="built_in">deque</span>.push_back(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">deque</span>.push_back(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">deque</span>.push_front(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">deque</span>.push_front(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i: <span class="built_in">deque</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line">    <span class="built_in">deque</span>.pop_back();</span><br><span class="line">    <span class="built_in">deque</span>.pop_front();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i: <span class="built_in">deque</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4312</span><br><span class="line">31</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h2 id="可以排序"><a href="#可以排序" class="headerlink" title="可以排序"></a>可以排序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">deque</span>;</span><br><span class="line">    <span class="built_in">deque</span>.push_back(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">deque</span>.push_back(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">deque</span>.push_front(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">deque</span>.push_front(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i: <span class="built_in">deque</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line">    sort(<span class="built_in">deque</span>.begin(), <span class="built_in">deque</span>.end());</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i: <span class="built_in">deque</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4312</span><br><span class="line">1234</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">list</span>;</span><br><span class="line">    <span class="built_in">list</span>.push_front(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">list</span>.push_front(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">list</span>.push_back(<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">list</span>.push_back(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i: <span class="built_in">list</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//插入</span></span><br><span class="line">    <span class="built_in">list</span>.insert(++<span class="built_in">list</span>.begin(), <span class="number">99</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i: <span class="built_in">list</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//里面的值</span></span><br><span class="line">    <span class="built_in">list</span>.remove(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i: <span class="built_in">list</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 2 4 1</span><br><span class="line">3 99 2 4 1</span><br><span class="line">99 2 4 1</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>










]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>回归</title>
    <url>/2020/08/23/regression/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

  <meta name="referrer" content="no-referrer"> 



<h1 id="回归分析"><a href="#回归分析" class="headerlink" title="回归分析"></a>回归分析</h1><a id="more"></a>

<h1 id="一元线性回归"><a href="#一元线性回归" class="headerlink" title="一元线性回归"></a>一元线性回归</h1><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823200844549-1429657003.png" style="zoom: 67%;">


<ul>
<li>被预测的变量是因变量，即输出</li>
<li>用来进行预测的变量是自变量，即输入</li>
<li>一元线性回归包括一个自变量，一个因变量</li>
<li>如果是多元线性回归，那就有多个自变量</li>
</ul>
<h1 id="代价函数（损失函数）"><a href="#代价函数（损失函数）" class="headerlink" title="代价函数（损失函数）"></a>代价函数（损失函数）</h1><ul>
<li>m是有m个样本</li>
<li>1/2是为了求导时候形式好看一些，其实可有可无</li>
<li>θ0和θ1是截距和斜率</li>
<li>参考： <a href="https://www.bilibili.com/video/BV1Rt411q7WJ?p=5">https://www.bilibili.com/video/BV1Rt411q7WJ?p=5</a> </li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823201137966-1372018192.png"></p>
<ul>
<li>代价函数的形式是多种多样的，但是含义是差不多的，上面是一元线性回归的代价函数</li>
</ul>
<h1 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h1><h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823201329222-1139416992.png"></p>
<ul>
<li>目的是找到全局最小值</li>
<li>缺点，可能找到的是局部最小值，不是全局</li>
<li>所以要不断迭代，直到找到全局最小值<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面是找到全局最小值</span><br></pre></td></tr></table></figure>
<img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823203833877-1941502730.png"></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面是找到局部最小值</span><br></pre></td></tr></table></figure>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823203911608-1682273060.png"></p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823201740248-732371951.png"></p>
<ul>
<li><p>学习率的大小是有讲究的</p>
<ul>
<li><p>学习率不能太小，也不能太大，可以多尝试一些值 </p>
<p>  0.1,0.03,0.01,0.003,0.001,0.0003,0.0001…</p>
</li>
</ul>
</li>
<li><p>线性回归的代价函数是凸函数</p>
</li>
</ul>
<h2 id="用梯度下降法解决一元回归线性问题"><a href="#用梯度下降法解决一元回归线性问题" class="headerlink" title="用梯度下降法解决一元回归线性问题"></a>用梯度下降法解决一元回归线性问题</h2><ul>
<li><p>参考： <a href="https://www.bilibili.com/video/BV1Rt411q7WJ?p=7">https://www.bilibili.com/video/BV1Rt411q7WJ?p=7</a></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 载入数据</span></span><br><span class="line">data = np.genfromtxt(<span class="string">&#x27;data.csv&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li><p>genfromtxt是将csv的读取方式是从txt读取进来，因为在csv打开时两列数据是以逗号隔开的，所以用法如上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/4</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最小二乘法，返回代价函数的值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_error</span>(<span class="params">b, k, x_data, y_data</span>):</span></span><br><span class="line">    total_error = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(x_data)):</span><br><span class="line">        total_error += (k * x_data[i] + b - y_data[i]) ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> total_error / (<span class="number">2.0</span> * <span class="built_in">len</span>(x_data))  <span class="comment"># 这里除以2可有可无</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新b和k</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_bk</span>(<span class="params">x_data, y_data, b, k, lr, epochs</span>):</span></span><br><span class="line">    <span class="comment"># 计算总数据量</span></span><br><span class="line">    m = <span class="built_in">len</span>(x_data)</span><br><span class="line">    <span class="comment"># 循环epochs次</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">        <span class="comment"># 临时变量</span></span><br><span class="line">        b_grad = <span class="number">0</span></span><br><span class="line">        k_grad = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 计算梯度的总和再求平均</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, m):</span><br><span class="line">            b_grad += (<span class="number">1</span> / m) * (k * x_data[j] + b - y_data[j])</span><br><span class="line">            k_grad += (<span class="number">1</span> / m) * (k * x_data[j] + b - y_data[j]) * x_data[j]</span><br><span class="line">        <span class="comment"># 更新b，k</span></span><br><span class="line">        b = b - lr * b_grad</span><br><span class="line">        k = k - lr * k_grad</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> b, k</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 载入数据</span></span><br><span class="line">data = np.genfromtxt(<span class="string">&#x27;data.csv&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">x_data = data[:, <span class="number">0</span>]  <span class="comment"># 所有行都要，但只要第0列</span></span><br><span class="line">y_data = data[:, <span class="number">1</span>]  <span class="comment"># 只要第1列</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出分布图</span></span><br><span class="line">plt.scatter(x_data, y_data)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;接下来求解回归直线，先求那两个参数&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先定义一些参数</span></span><br><span class="line"><span class="comment"># 设置学习率learning rate,截距，斜率</span></span><br><span class="line">lr = <span class="number">0.0001</span></span><br><span class="line">b = <span class="number">0</span></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="comment"># 最大迭代次数</span></span><br><span class="line">epochs = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;开始时：b = &#123;&#125;, k = &#123;&#125;, error = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(b, k, compute_error(b, k, x_data, y_data)))</span><br><span class="line">print(<span class="string">&#x27;正在建模......&#x27;</span>)</span><br><span class="line">b, k = get_bk(x_data, y_data, b, k, lr, epochs)</span><br><span class="line">print(<span class="string">&#x27;迭代&#123;&#125;次后， b = &#123;&#125;, k = &#123;&#125;, error = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(epochs, b, k, compute_error(b, k, x_data, y_data)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出图像</span></span><br><span class="line">plt.plot(x_data, y_data, <span class="string">&#x27;b.&#x27;</span>)</span><br><span class="line"><span class="comment"># 画出回归直线</span></span><br><span class="line">plt.plot(x_data, k * x_data + b, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823201959228-43547949.png"></p>
</li>
</ul>
</li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823202013268-475104715.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">开始时：b = <span class="number">0</span>, k = <span class="number">0</span>, error = <span class="number">2782.5539172416056</span></span><br><span class="line">正在建模......</span><br><span class="line">迭代<span class="number">50</span>次后， b = <span class="number">0.030569950649287983</span>, k = <span class="number">1.4788903781318357</span>, error = <span class="number">56.32488184238028</span></span><br></pre></td></tr></table></figure>
<ul>
<li>可以看到error变小了</li>
</ul>
<h2 id="用sklearn解决一元线性回归"><a href="#用sklearn解决一元线性回归" class="headerlink" title="用sklearn解决一元线性回归"></a>用sklearn解决一元线性回归</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/4</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression  <span class="comment"># 导入线性回归模型</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">data = np.genfromtxt(<span class="string">&#x27;data.csv&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">x_data = data[:, <span class="number">0</span>]</span><br><span class="line">y_data = data[:, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">plt.scatter(x_data, y_data)</span><br><span class="line">plt.show()</span><br><span class="line">print(x_data.shape)  <span class="comment"># 打印出来是(100,)  ，表示一维向量，有100个数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于fit需要传入二维数据，所以需要对x_data和y_data做处理</span></span><br><span class="line"><span class="comment"># 给他们加个维度变成2维</span></span><br><span class="line">x_data = data[:, <span class="number">0</span>, np.newaxis]</span><br><span class="line">y_data = data[:, <span class="number">1</span>, np.newaxis]</span><br><span class="line">print(x_data.shape)  <span class="comment"># 得到(100, 1)，为二维的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建模型，并拟合模型</span></span><br><span class="line">model = LinearRegression()</span><br><span class="line">model.fit(x_data, y_data)</span><br><span class="line"></span><br><span class="line">plt.plot(x_data, y_data, <span class="string">&#x27;b.&#x27;</span>)</span><br><span class="line"><span class="comment"># model.predict(x_data)预测y_data</span></span><br><span class="line">plt.plot(x_data, model.predict(x_data), <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823202125046-1969864949.png"></p>
<ul>
<li><p>比起梯度下降法，它直接调用更加方便</p>
</li>
<li><p>注意点是fit的参数格式</p>
<ul>
<li><p>必须是二维的</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给他们加个维度变成2维</span></span><br><span class="line">x_data = data[:, <span class="number">0</span>, np.newaxis]</span><br><span class="line">y_data = data[:, <span class="number">1</span>, np.newaxis]</span><br></pre></td></tr></table></figure></li>
<li><p>model.predict(x_data)预测y_data</p>
</li>
</ul>
</li>
</ul>
<h1 id="多元线性回归"><a href="#多元线性回归" class="headerlink" title="多元线性回归"></a>多元线性回归</h1><p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823202303109-196114198.png"></p>
<ul>
<li>做法类似一元</li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823202325985-1728908967.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/4</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入数据</span></span><br><span class="line">data = np.genfromtxt(<span class="string">r&#x27;Delivery.csv&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="comment"># 切分数据</span></span><br><span class="line">x_data = data[:, :-<span class="number">1</span>]</span><br><span class="line">y_data = data[:, -<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建模型并拟合模型</span></span><br><span class="line">model = LinearRegression()</span><br><span class="line">model.fit(x_data, y_data)</span><br><span class="line">print(model)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印系数,有几个自变量打印出来就有几个系数</span></span><br><span class="line">print(<span class="string">&#x27;系数：&#x27;</span>, model.coef_)</span><br><span class="line"><span class="comment"># 打印截距</span></span><br><span class="line">print(<span class="string">&#x27;截距：&#x27;</span>, model.intercept_)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">x_test = [[<span class="number">102</span>, <span class="number">4</span>]]</span><br><span class="line">predict = model.predict(x_test)</span><br><span class="line">print(<span class="string">&#x27;预测值：&#x27;</span>, predict)</span><br><span class="line"></span><br><span class="line">ax = plt.figure().add_subplot(<span class="number">111</span>, projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line">ax.scatter(x_data[:, <span class="number">0</span>], x_data[:, <span class="number">1</span>], y_data, c=<span class="string">&#x27;r&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>, s=<span class="number">100</span>)  <span class="comment"># 点为红色三角形</span></span><br><span class="line">x0 = x_data[:, <span class="number">0</span>]</span><br><span class="line">x1 = x_data[:, <span class="number">1</span>]</span><br><span class="line"><span class="comment"># 生成网格矩阵</span></span><br><span class="line">x0, x1 = np.meshgrid(x0, x1)</span><br><span class="line">z = model.intercept_ + x0 * model.coef_[<span class="number">0</span>] + x1 * model.coef_[<span class="number">1</span>]</span><br><span class="line"><span class="comment"># 画3D图</span></span><br><span class="line">ax.plot_surface(x0, x1, z)</span><br><span class="line"><span class="comment"># 设置坐标轴</span></span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;Miles&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;Num of Deliveries&#x27;</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">&#x27;Time&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图像</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823202359653-674609385.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LinearRegression()</span><br><span class="line">系数： [0.0611346  0.92342537]</span><br><span class="line">截距： -0.8687014667817126</span><br><span class="line">预测值： [9.06072908]</span><br></pre></td></tr></table></figure>
<h1 id="多项式回归"><a href="#多项式回归" class="headerlink" title="多项式回归"></a>多项式回归</h1><p>eg</p>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823202444059-1217939003.png"><br><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823202453027-864481447.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义多项式回归，degree的值可以调节多项式的特征</span></span><br><span class="line">poly = PolynomialFeatures(degree=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 特征处理</span></span><br><span class="line">x_poly = poly.fit_transform(x_data)</span><br><span class="line">print(x_poly)</span><br></pre></td></tr></table></figure>
<ul>
<li>degree = n,表示n次多项式拟合</li>
<li>degree = 1时，效果和一元线性回归的效果是一样的</li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823202523049-1868287034.png"></p>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823202537194-1550994838.png"></p>
<ul>
<li><p><a href="https://www.bilibili.com/video/BV1Rt411q7WJ?p=13">https://www.bilibili.com/video/BV1Rt411q7WJ?p=13</a> </p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/5</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> PolynomialFeatures  <span class="comment"># 生成多项式用的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">data = np.genfromtxt(<span class="string">r&#x27;job.csv&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">x_data = data[<span class="number">1</span>:, <span class="number">1</span>]</span><br><span class="line">y_data = data[<span class="number">1</span>:, -<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># plt.scatter(x_data, y_data)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换为二维数据</span></span><br><span class="line">x_data = x_data[:, np.newaxis]  <span class="comment"># 或者x_data = data[1:, 1, np.newaxis]</span></span><br><span class="line">y_data = y_data[:, np.newaxis]  <span class="comment"># 或者y_data = data[1:, -1, np.newaxis]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建模一元线性回归拟合</span></span><br><span class="line"><span class="comment"># model = LinearRegression()</span></span><br><span class="line"><span class="comment"># model.fit(x_data, y_data)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 画线性回归线图看看效果</span></span><br><span class="line"><span class="comment"># plt.plot(x_data, y_data, &#x27;b.&#x27;)</span></span><br><span class="line"><span class="comment"># plt.plot(x_data, model.predict(x_data), &#x27;r&#x27;)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义多项式回归，degree的值可以调节多项式的特征</span></span><br><span class="line"><span class="comment"># degree = n，相当于n次方拟合</span></span><br><span class="line">poly = PolynomialFeatures(degree=<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 特征处理</span></span><br><span class="line">x_poly = poly.fit_transform(x_data)</span><br><span class="line"><span class="comment"># print(x_poly)</span></span><br><span class="line"><span class="comment"># 定义回归模型,并拟合</span></span><br><span class="line">lin_reg = LinearRegression()</span><br><span class="line">lin_reg.fit(x_poly, y_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line">plt.plot(x_data, y_data, <span class="string">&#x27;b.&#x27;</span>)</span><br><span class="line">plt.plot(x_data, lin_reg.predict(x_poly), <span class="string">&#x27;r&#x27;</span>)  <span class="comment"># predict 传的是x_poly,是处理后的数据</span></span><br><span class="line">plt.title(<span class="string">&#x27;Polynomial Regression&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Position Level&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Salary&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p> <img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823202623798-1411642301.png"></p>
</li>
</ul>
<ul>
<li><p>上面是5次方拟合，效果不错</p>
</li>
<li><p>关键步骤如下：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义多项式回归，degree的值可以调节多项式的特征</span></span><br><span class="line"><span class="comment"># degree = n，相当于n次方拟合</span></span><br><span class="line">poly = PolynomialFeatures(degree=<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 特征处理</span></span><br><span class="line">x_poly = poly.fit_transform(x_data)</span><br><span class="line"><span class="comment"># print(x_poly)</span></span><br><span class="line"><span class="comment"># 定义回归模型,并拟合</span></span><br><span class="line">lin_reg = LinearRegression()</span><br><span class="line">lin_reg.fit(x_poly, y_data)</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果要画的平滑一些</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;如果上面画出来10个点的线不够平滑，可以增加自变量，让他平滑一些&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line">plt.plot(x_data, y_data, <span class="string">&#x27;b.&#x27;</span>)</span><br><span class="line">x_test = np.linspace(<span class="number">1</span>, <span class="number">10</span>, <span class="number">50</span>)  <span class="comment"># 表示从1到10，之间有50个点</span></span><br><span class="line">x_test = x_test[:, np.newaxis]</span><br><span class="line">x_poly = poly.fit_transform(x_test)  <span class="comment"># 一定要处理特征</span></span><br><span class="line">plt.plot(x_test, lin_reg.predict(x_poly), <span class="string">&#x27;r&#x27;</span>)  <span class="comment"># predict 传的是x_poly,是处理后的数据</span></span><br><span class="line">plt.title(<span class="string">&#x27;Polynomial Regression&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Position Level&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Salary&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823202711363-2107883771.png"></p>
</li>
</ul>
<h1 id="特征缩放"><a href="#特征缩放" class="headerlink" title="特征缩放"></a>特征缩放</h1><ul>
<li><strong>用于比如x_data的区间很小，y_data区间很大的情况</strong></li>
</ul>
<h2 id="数值归一化"><a href="#数值归一化" class="headerlink" title="数值归一化"></a>数值归一化</h2><ul>
<li><p>数据归一化就是把数据的取值范围处理为0-1或者-1-1 之间。 </p>
<p>  任意数据转化为0-1之间： </p>
<p>  newValue = (oldValue-min)/(max-min) </p>
<p>  (1,3,5,7,9) </p>
<p>  (1-1)/(9-1)=0 </p>
<p>  (3-1)/(9-1)=1/4 </p>
<p>  (5-1)/(9-1)=1/2 </p>
<p>  (7-1)/(9-1)=3/4 </p>
<p>  (9-1)/(9-1)=1 </p>
<p>  任意数据转化为-1-1之间： </p>
<p>  newValue = ((oldValue-min)/(max-min)-0.5)*2</p>
</li>
</ul>
<h2 id="均值标准化"><a href="#均值标准化" class="headerlink" title="均值标准化"></a>均值标准化</h2><ul>
<li><p>x为特征数据，u为数据的平均值，s为数据的方差 </p>
<p>  newValue = (oldValue-u)/s  </p>
<p>  (1,3,5,7,9) </p>
<p>  u = (1+3+5+7+9)/5=5 </p>
<p>  s = ((1-5)2+(3-5)2+(5-5)2+(7-5)2+(9-5)2 )/5=8 </p>
<p>  (1-5)/8=-1/2 </p>
<p>  (3-5)/8=-1/4 </p>
<p>  (5-5)/8=0 </p>
<p>  (7-5)/8=1/4 </p>
<p>  (9-5)/8=1/2</p>
<ul>
<li>可以看到处理后大多处在[-1/2, 1/2]之间</li>
</ul>
</li>
</ul>
<h1 id="交叉验证法"><a href="#交叉验证法" class="headerlink" title="交叉验证法"></a>交叉验证法</h1><ul>
<li><p><strong>用于数据量少的情况</strong></p>
</li>
<li><p><a href="https://www.bilibili.com/video/BV1Rt411q7WJ?p=16">https://www.bilibili.com/video/BV1Rt411q7WJ?p=16</a> </p>
<p> <img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823202807189-892481220.png"></p>
</li>
</ul>
<h1 id="过拟合"><a href="#过拟合" class="headerlink" title="过拟合"></a>过拟合</h1><p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823202830117-1077571474.png"></p>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823202835353-1404716489.png"></p>
<ul>
<li><p>防止过拟合的方法</p>
<ul>
<li><p>减少特征</p>
</li>
<li><p>增加数据量</p>
<ul>
<li>在机器学习中，一般数据量越大，拟合的效果越好</li>
</ul>
</li>
<li><p>正则化</p>
<p>  正则化代价函数： </p>
<ul>
<li><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823202929931-1992009507.png"></li>
</ul>
</li>
</ul>
</li>
<li><p>在深度学习还有一些防止过拟合的方法</p>
</li>
</ul>
<h1 id="岭回归"><a href="#岭回归" class="headerlink" title="岭回归"></a>岭回归</h1><ul>
<li><p>岭回归最早是用来处理特征数多于样本的情况，现在也 </p>
<p>  用于在估计中加入偏差，从而得到更好的估计。同时也 </p>
<p>  可以解决多重共线性的问题。岭回归是一种有偏估计。</p>
</li>
<li><p>岭回归代价函数：<img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823203003073-1739635619.png" style="zoom: 33%;"></p>
</li>
</ul>
<ul>
<li>线性回归标准方程法： <img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823203018129-541292106.png" style="zoom:80%;"></li>
</ul>
<ul>
<li>岭回归求解： <img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823203032227-1752759456.png" style="zoom:67%;"></li>
</ul>
<ul>
<li><p>选择𝜆值，使到： </p>
<p>  1.各回归系数的岭估计基本稳定。 </p>
<p>  2.残差平方和增大不太多。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/5</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">预测GNP.deflator</span></span><br><span class="line"><span class="string">数据有多重共线性</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">data = np.genfromtxt(<span class="string">r&#x27;longley.csv&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">x_data = data[<span class="number">1</span>:, <span class="number">2</span>:]</span><br><span class="line">y_data = data[<span class="number">1</span>:, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不指定生成几个数，默认生成50个值</span></span><br><span class="line"><span class="comment"># 待会拿这些值来测试看看哪个值最适合做岭系数λ，这里用α表示</span></span><br><span class="line">alphas_test = np.linspace(<span class="number">0.001</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 创建模型，保存误差值,Right是岭回归，CV是交叉验证</span></span><br><span class="line"><span class="comment"># 它会自动测试50个值，并自动选出最好的系数</span></span><br><span class="line">model = linear_model.RidgeCV(alphas=alphas_test, store_cv_values=<span class="literal">True</span>)</span><br><span class="line">model.fit(x_data, y_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 岭系数</span></span><br><span class="line">print(<span class="string">&#x27;最好的岭系数&#x27;</span>, model.alpha_)</span><br><span class="line"><span class="comment"># loss值</span></span><br><span class="line"><span class="comment"># print(model.cv_values_)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line"><span class="comment"># 岭系数与loss值的关系</span></span><br><span class="line"><span class="comment"># mean是求50个loss值的平均值，axis=0是每行</span></span><br><span class="line">plt.plot(alphas_test, model.cv_values_.mean(axis=<span class="number">0</span>))</span><br><span class="line">plt.plot(model.alpha_, <span class="built_in">min</span>(model.cv_values_.mean(axis=<span class="number">0</span>)), <span class="string">&#x27;ro&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在对每一行做预测</span></span><br><span class="line">print(y_data)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x_data)):</span><br><span class="line">    print(model.predict(x_data[i, np.newaxis]), end=<span class="string">&#x27;  &#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823203125852-686093329.png" style="zoom:67%;">


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">最好的岭系数 <span class="number">0.40875510204081633</span></span><br><span class="line">[ <span class="number">83.</span>   <span class="number">88.5</span>  <span class="number">88.2</span>  <span class="number">89.5</span>  <span class="number">96.2</span>  <span class="number">98.1</span>  <span class="number">99.</span>  <span class="number">100.</span>  <span class="number">101.2</span> <span class="number">104.6</span> <span class="number">108.4</span> <span class="number">110.8</span></span><br><span class="line"> <span class="number">112.6</span> <span class="number">114.2</span> <span class="number">115.7</span> <span class="number">116.9</span>]</span><br><span class="line">[<span class="number">83.64832473</span>]  [<span class="number">86.92050263</span>]  [<span class="number">88.11216213</span>]  [<span class="number">90.84704905</span>]  [<span class="number">96.15675767</span>]  [<span class="number">97.78771042</span>]  [<span class="number">98.35557526</span>]  [<span class="number">100.00469712</span>]  [<span class="number">103.22729142</span>]  [<span class="number">105.05638785</span>]  [<span class="number">107.39861998</span>]  [<span class="number">109.48532693</span>]  [<span class="number">112.83340992</span>]  [<span class="number">113.93959201</span>]  [<span class="number">115.42350307</span>]  [<span class="number">117.70308982</span>]  </span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>关键点</p>
<ul>
<li><p>找个岭系数λ范围区间：alphas_test = np.linspace(0.001, 1)</p>
</li>
<li><p>然后把λ范围区间传入，它会自动找到最适合的岭系数，建模拟合，：</p>
<blockquote>
<p>model = linear_model.RidgeCV(alphas=alphas_test, store_cv_values=True)<br>model.fit(x_data, y_data)</p>
</blockquote>
</li>
<li><p>然后可以预测了：i 表示第i行，</p>
<blockquote>
<p>预测第i行：model.predict(x_data[i, np.newaxis])</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h1 id="Lasso回归"><a href="#Lasso回归" class="headerlink" title="Lasso回归"></a>Lasso回归</h1><ul>
<li>Lasso可以使得某些系数为0，为0说明有多重共线性</li>
<li>用起来比岭回归方便</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/5</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LassoCV</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">data = np.genfromtxt(<span class="string">&#x27;longley.csv&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">x_data = data[<span class="number">1</span>:, <span class="number">2</span>:]</span><br><span class="line">y_data = data[<span class="number">1</span>:, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立模型拟合,这里用的交叉验证的lasso</span></span><br><span class="line">model = LassoCV()</span><br><span class="line">model.fit(x_data, y_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># lasso系数</span></span><br><span class="line">print(<span class="string">&#x27;lasso系数: &#x27;</span>, model.alpha_)</span><br><span class="line"><span class="comment"># 相关系数</span></span><br><span class="line">print(<span class="string">&#x27;lasso相关系数：&#x27;</span>, model.coef_)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测测试</span></span><br><span class="line">print(<span class="string">&#x27;原始数据：&#x27;</span>, y_data, end=<span class="string">&#x27;  &#x27;</span>)</span><br><span class="line"><span class="comment"># print(model.predict(x_data[-2, np.newaxis]))</span></span><br><span class="line"><span class="comment"># 预测数据</span></span><br><span class="line">y_predict_data = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x_data)):</span><br><span class="line">    i_predict_data = model.predict(x_data[i, np.newaxis])[<span class="number">0</span>]</span><br><span class="line">    y_predict_data.append(i_predict_data)</span><br><span class="line">    <span class="comment"># print(model.predict(x_data[i, np.newaxis]))</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;\n&#x27;</span>, y_predict_data)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lasso系数:  <span class="number">14.134043936116361</span></span><br><span class="line">lasso相关系数： [<span class="number">0.10093575</span> <span class="number">0.00586331</span> <span class="number">0.00599214</span> <span class="number">0.</span>         <span class="number">0.</span>         <span class="number">0.</span>        ]</span><br><span class="line">原始数据： [ <span class="number">83.</span>   <span class="number">88.5</span>  <span class="number">88.2</span>  <span class="number">89.5</span>  <span class="number">96.2</span>  <span class="number">98.1</span>  <span class="number">99.</span>  <span class="number">100.</span>  <span class="number">101.2</span> <span class="number">104.6</span> <span class="number">108.4</span> <span class="number">110.8</span></span><br><span class="line"> <span class="number">112.6</span> <span class="number">114.2</span> <span class="number">115.7</span> <span class="number">116.9</span>]  </span><br><span class="line"> [<span class="number">85.0965983414889</span>, <span class="number">87.53534930585705</span>, <span class="number">88.2883909807082</span>, <span class="number">90.79402805237368</span>, <span class="number">95.40732692456514</span>, <span class="number">97.42528633630405</span>, <span class="number">99.21657540452378</span>, <span class="number">99.87055688439</span>, <span class="number">102.76225662054381</span>, <span class="number">104.79114364555673</span>, <span class="number">107.20360511603187</span>, <span class="number">108.30964231708353</span>, <span class="number">111.60127997453014</span>, <span class="number">113.65601548042129</span>, <span class="number">115.77558105291722</span>, <span class="number">119.16636356270482</span>]</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>
<ul>
<li>经测试，model = LassoCV()比不用交叉验证的Lasso()效果要好</li>
<li>lasso相关系数打印出来有3个是0，说明有三列是具有多重共线性的</li>
</ul>
<h1 id="弹性网"><a href="#弹性网" class="headerlink" title="弹性网"></a>弹性网</h1><ul>
<li>代价函数</li>
</ul>
<img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823203213894-1331359556.png" style="zoom:67%;">


<ul>
<li><p>q = 1是Lasso回归</p>
</li>
<li><p>q = 2是岭回归</p>
</li>
<li><p>相对于其他q，Lasso和岭回归效果更好一些，所以用的多</p>
</li>
<li><p>弹性网是Lasso和岭回归的结合</p>
</li>
</ul>
<img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823203230843-1675995161.png" style="zoom:67%;">


<ul>
<li><p>alpha是权重，在sklearn里面会自动调节出一个最适合的alpha系数，即弹性网系数</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/6</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> ElasticNetCV  <span class="comment"># 导入弹性网模型</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">data = np.genfromtxt(<span class="string">&#x27;longley.csv&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">x_data = data[<span class="number">1</span>:, <span class="number">2</span>:]</span><br><span class="line">y_data = data[<span class="number">1</span>:, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">model = ElasticNetCV()  <span class="comment"># 里面的系数会自动选出最好的，和lasso类似</span></span><br><span class="line">model.fit(x_data, y_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测对比某一行（第2行）</span></span><br><span class="line">print(model.predict(x_data[<span class="number">2</span>, np.newaxis]))</span><br><span class="line"></span><br><span class="line">y_predict = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x_data)):</span><br><span class="line">    y_predict.append(model.predict(x_data[i, np.newaxis]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图对比所有的</span></span><br><span class="line">year = np.linspace(<span class="number">1947</span>, <span class="number">1962</span>, <span class="built_in">len</span>(x_data))</span><br><span class="line">plt.plot(year, y_data, <span class="string">&#x27;b.&#x27;</span>)</span><br><span class="line">plt.plot(year, y_predict, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;弹性网系数：&#x27;</span>, model.alpha_)</span><br><span class="line">print(<span class="string">&#x27;相关系数：&#x27;</span>, model.coef_)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
  <img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200823203248910-608160941.png" style="zoom:80%;">


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">88.33171474</span>]</span><br><span class="line">弹性网系数： <span class="number">30.31094405430269</span></span><br><span class="line">相关系数： [<span class="number">0.1006612</span>  <span class="number">0.00589596</span> <span class="number">0.00593021</span> <span class="number">0.</span>         <span class="number">0.</span>         <span class="number">0.</span>        ]</span><br></pre></td></tr></table></figure>
<ul>
<li>效果比岭回归和Lasso回归好，因为结合了两者的优点</li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Python机器学习</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫的实现原理和应用</title>
    <url>/2020/08/26/CrawlerPrinciple/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：bs4+re正则表达式、url队列处理分页</p>
<a id="more"></a>

<h1 id="使用爬虫遍历网站页面的图结构"><a href="#使用爬虫遍历网站页面的图结构" class="headerlink" title="使用爬虫遍历网站页面的图结构"></a>使用爬虫遍历网站页面的图结构</h1><ol>
<li>从一个初始网页的URL开始</li>
<li>确定URL从未抓取过</li>
<li>获得网页上的HTML源代码</li>
<li>从当前页面上抽取新的URL放入队列</li>
<li>重复步骤2-4直到满足一定的停止条件</li>
</ol>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200826193145073-1052617377.png"></p>
<h1 id="bs4-正则表达式"><a href="#bs4-正则表达式" class="headerlink" title="bs4+正则表达式"></a>bs4+正则表达式</h1><h2 id="使用bs4加正则表达式获取豆瓣电影信息"><a href="#使用bs4加正则表达式获取豆瓣电影信息" class="headerlink" title="使用bs4加正则表达式获取豆瓣电影信息"></a>使用bs4加正则表达式获取豆瓣电影信息</h2><ul>
<li>主要是利用url队列处理分页的思想</li>
<li>可以选择用pandas存放获得的数据</li>
<li>这个例子是对上面原理的应用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># @Time    :  2020/8/26</span></span><br><span class="line"><span class="string"># @Author  :  Jimou Chen</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crawler</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.user_agent = <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36&#x27;</span></span><br><span class="line">        self.headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: self.user_agent&#125;</span><br><span class="line">        self.queue = <span class="built_in">set</span>()  <span class="comment"># 用集合做url队列可以自动去掉重复的url</span></span><br><span class="line">        self.processed = <span class="built_in">set</span>()</span><br><span class="line">        self.save_list = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">crawl</span>(<span class="params">self, url</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> url <span class="keyword">not</span> <span class="keyword">in</span> self.processed:</span><br><span class="line">            self.processed.add(url)  <span class="comment"># 已经访问过的url</span></span><br><span class="line"></span><br><span class="line">            resp = requests.get(url, headers=self.headers)</span><br><span class="line">            soup = BeautifulSoup(resp.content.decode(<span class="string">&#x27;UTF-8&#x27;</span>), <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">            nodes = soup.find_all(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;hd&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 当前页</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> nodes:</span><br><span class="line">                name = i.find_all(<span class="string">&#x27;span&#x27;</span>)[<span class="number">0</span>].text</span><br><span class="line">                link = i.find(<span class="string">&#x27;a&#x27;</span>)[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">                msg_dict = &#123;<span class="string">&#x27;电影名&#x27;</span>: name, <span class="string">&#x27;链接&#x27;</span>: link&#125;</span><br><span class="line">                self.save_list.append(msg_dict)</span><br><span class="line"></span><br><span class="line">                print(<span class="string">&#x27;&#123;&#125;: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i.find_all(<span class="string">&#x27;span&#x27;</span>)[<span class="number">0</span>].text, i.find(<span class="string">&#x27;a&#x27;</span>)[<span class="string">&#x27;href&#x27;</span>]))</span><br><span class="line">            print(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="comment"># 其他页</span></span><br><span class="line">            other_pages = soup.find_all(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;paginator&#x27;</span>&#125;)</span><br><span class="line">            <span class="comment"># 正则表达式找到页码链接</span></span><br><span class="line">            pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;a href=&quot;(.+?)&quot;&gt;\w&#x27;</span>)</span><br><span class="line">            links = pattern.findall(<span class="built_in">str</span>(other_pages))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> link <span class="keyword">in</span> links:</span><br><span class="line">                url = <span class="string">&#x27;https://movie.douban.com/top250&#x27;</span> + link</span><br><span class="line">                self.queue.add(url)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self, url</span>):</span></span><br><span class="line">        self.queue.add(url)</span><br><span class="line">        <span class="comment"># 保持获取网页，直到为队列为空</span></span><br><span class="line">        <span class="keyword">while</span> self.queue:</span><br><span class="line">            self.crawl(self.queue.pop())</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 这里可以保存到指定文件</span></span><br><span class="line">        movie_msg = pd.DataFrame(self.save_list)</span><br><span class="line">        movie_msg.to_excel(<span class="string">&#x27;douban_movies.xls&#x27;</span>)</span><br><span class="line">        print(self.save_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    Crawler().run(<span class="string">&#x27;https://movie.douban.com/top250&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><p>打印得到的结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">肖申克的救赎: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292052&#x2F;</span><br><span class="line">霸王别姬: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291546&#x2F;</span><br><span class="line">阿甘正传: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292720&#x2F;</span><br><span class="line">这个杀手不太冷: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1295644&#x2F;</span><br><span class="line">泰坦尼克号: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292722&#x2F;</span><br><span class="line">美丽人生: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292063&#x2F;</span><br><span class="line">千与千寻: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291561&#x2F;</span><br><span class="line">辛德勒的名单: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1295124&#x2F;</span><br><span class="line">盗梦空间: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3541415&#x2F;</span><br><span class="line">忠犬八公的故事: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3011091&#x2F;</span><br><span class="line">海上钢琴师: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292001&#x2F;</span><br><span class="line">楚门的世界: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292064&#x2F;</span><br><span class="line">星际穿越: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1889243&#x2F;</span><br><span class="line">三傻大闹宝莱坞: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3793023&#x2F;</span><br><span class="line">机器人总动员: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;2131459&#x2F;</span><br><span class="line">放牛班的春天: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291549&#x2F;</span><br><span class="line">大话西游之大圣娶亲: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292213&#x2F;</span><br><span class="line">熔炉: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;5912992&#x2F;</span><br><span class="line">疯狂动物城: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25662329&#x2F;</span><br><span class="line">无间道: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1307914&#x2F;</span><br><span class="line">龙猫: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291560&#x2F;</span><br><span class="line">教父: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291841&#x2F;</span><br><span class="line">当幸福来敲门: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1849031&#x2F;</span><br><span class="line">怦然心动: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3319755&#x2F;</span><br><span class="line">触不可及: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;6786002&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">死亡诗社: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291548&#x2F;</span><br><span class="line">狮子王: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1301753&#x2F;</span><br><span class="line">大闹天宫: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1418019&#x2F;</span><br><span class="line">指环王2：双塔奇兵: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291572&#x2F;</span><br><span class="line">猫鼠游戏: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1305487&#x2F;</span><br><span class="line">窃听风暴: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1900841&#x2F;</span><br><span class="line">指环王1：魔戒再现: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291571&#x2F;</span><br><span class="line">钢琴家: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1296736&#x2F;</span><br><span class="line">黑客帝国: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291843&#x2F;</span><br><span class="line">美丽心灵: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1306029&#x2F;</span><br><span class="line">饮食男女: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291818&#x2F;</span><br><span class="line">两杆大烟枪: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1293350&#x2F;</span><br><span class="line">飞越疯人院: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292224&#x2F;</span><br><span class="line">让子弹飞: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3742360&#x2F;</span><br><span class="line">本杰明·巴顿奇事: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1485260&#x2F;</span><br><span class="line">看不见的客人: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;26580232&#x2F;</span><br><span class="line">绿皮书: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;27060077&#x2F;</span><br><span class="line">西西里的美丽传说: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292402&#x2F;</span><br><span class="line">拯救大兵瑞恩: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292849&#x2F;</span><br><span class="line">小鞋子: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1303021&#x2F;</span><br><span class="line">海蒂和爷爷: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25958717&#x2F;</span><br><span class="line">穿条纹睡衣的男孩: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3008247&#x2F;</span><br><span class="line">情书: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292220&#x2F;</span><br><span class="line">海豚湾: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3442220&#x2F;</span><br><span class="line">音乐之声: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1294408&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">地球上的星星: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;2363506&#x2F;</span><br><span class="line">疯狂的麦克斯4：狂暴之路: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3592854&#x2F;</span><br><span class="line">战争之王: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1419936&#x2F;</span><br><span class="line">步履不停: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;2222996&#x2F;</span><br><span class="line">谍影重重: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1304102&#x2F;</span><br><span class="line">彗星来的那一夜: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25807345&#x2F;</span><br><span class="line">猜火车: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292528&#x2F;</span><br><span class="line">朗读者: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;2213597&#x2F;</span><br><span class="line">波西米亚狂想曲: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;5300054&#x2F;</span><br><span class="line">浪潮: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;2297265&#x2F;</span><br><span class="line">小萝莉的猴神大叔: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;26393561&#x2F;</span><br><span class="line">再次出发之纽约遇见你: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;6874403&#x2F;</span><br><span class="line">东京物语: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291568&#x2F;</span><br><span class="line">驴得水: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25921812&#x2F;</span><br><span class="line">聚焦: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25954475&#x2F;</span><br><span class="line">追随: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1397546&#x2F;</span><br><span class="line">千钧一发: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1300117&#x2F;</span><br><span class="line">我爱你: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;5908478&#x2F;</span><br><span class="line">一次别离: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;5964718&#x2F;</span><br><span class="line">黑鹰坠落: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291824&#x2F;</span><br><span class="line">黑客帝国2：重装上阵: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1304141&#x2F;</span><br><span class="line">网络谜踪: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;27615441&#x2F;</span><br><span class="line">四个春天: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;27191492&#x2F;</span><br><span class="line">发条橙: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292233&#x2F;</span><br><span class="line">E.T. 外星人: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1294638&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">肖申克的救赎: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292052&#x2F;</span><br><span class="line">霸王别姬: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291546&#x2F;</span><br><span class="line">阿甘正传: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292720&#x2F;</span><br><span class="line">这个杀手不太冷: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1295644&#x2F;</span><br><span class="line">泰坦尼克号: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292722&#x2F;</span><br><span class="line">美丽人生: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292063&#x2F;</span><br><span class="line">千与千寻: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291561&#x2F;</span><br><span class="line">辛德勒的名单: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1295124&#x2F;</span><br><span class="line">盗梦空间: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3541415&#x2F;</span><br><span class="line">忠犬八公的故事: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3011091&#x2F;</span><br><span class="line">海上钢琴师: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292001&#x2F;</span><br><span class="line">楚门的世界: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292064&#x2F;</span><br><span class="line">星际穿越: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1889243&#x2F;</span><br><span class="line">三傻大闹宝莱坞: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3793023&#x2F;</span><br><span class="line">机器人总动员: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;2131459&#x2F;</span><br><span class="line">放牛班的春天: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291549&#x2F;</span><br><span class="line">大话西游之大圣娶亲: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292213&#x2F;</span><br><span class="line">熔炉: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;5912992&#x2F;</span><br><span class="line">疯狂动物城: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25662329&#x2F;</span><br><span class="line">无间道: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1307914&#x2F;</span><br><span class="line">龙猫: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291560&#x2F;</span><br><span class="line">教父: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291841&#x2F;</span><br><span class="line">当幸福来敲门: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1849031&#x2F;</span><br><span class="line">怦然心动: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3319755&#x2F;</span><br><span class="line">触不可及: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;6786002&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">美国往事: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292262&#x2F;</span><br><span class="line">致命魔术: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1780330&#x2F;</span><br><span class="line">低俗小说: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291832&#x2F;</span><br><span class="line">七宗罪: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292223&#x2F;</span><br><span class="line">沉默的羔羊: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1293544&#x2F;</span><br><span class="line">蝴蝶效应: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292343&#x2F;</span><br><span class="line">禁闭岛: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;2334904&#x2F;</span><br><span class="line">心灵捕手: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292656&#x2F;</span><br><span class="line">春光乍泄: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292679&#x2F;</span><br><span class="line">布达佩斯大饭店: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;11525673&#x2F;</span><br><span class="line">被嫌弃的松子的一生: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1787291&#x2F;</span><br><span class="line">摩登时代: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1294371&#x2F;</span><br><span class="line">阿凡达: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1652587&#x2F;</span><br><span class="line">剪刀手爱德华: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292370&#x2F;</span><br><span class="line">勇敢的心: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1294639&#x2F;</span><br><span class="line">喜剧之王: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1302425&#x2F;</span><br><span class="line">致命ID: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1297192&#x2F;</span><br><span class="line">加勒比海盗: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1298070&#x2F;</span><br><span class="line">哈利·波特与死亡圣器(下): https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3011235&#x2F;</span><br><span class="line">天使爱美丽: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292215&#x2F;</span><br><span class="line">杀人回忆: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1300299&#x2F;</span><br><span class="line">断背山: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1418834&#x2F;</span><br><span class="line">狩猎: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;6985810&#x2F;</span><br><span class="line">请以你的名字呼唤我: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;26799731&#x2F;</span><br><span class="line">幽灵公主: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1297359&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">7号房的礼物: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;10777687&#x2F;</span><br><span class="line">阳光灿烂的日子: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291875&#x2F;</span><br><span class="line">小森林 夏秋篇: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25814705&#x2F;</span><br><span class="line">重庆森林: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291999&#x2F;</span><br><span class="line">第六感: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1297630&#x2F;</span><br><span class="line">入殓师: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;2149806&#x2F;</span><br><span class="line">红辣椒: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1865703&#x2F;</span><br><span class="line">小森林 冬春篇: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25814707&#x2F;</span><br><span class="line">消失的爱人: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;21318488&#x2F;</span><br><span class="line">爱在黎明破晓前: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1296339&#x2F;</span><br><span class="line">一一: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292434&#x2F;</span><br><span class="line">唐伯虎点秋香: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1306249&#x2F;</span><br><span class="line">侧耳倾听: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1297052&#x2F;</span><br><span class="line">超脱: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;5322596&#x2F;</span><br><span class="line">蝙蝠侠：黑暗骑士崛起: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3395373&#x2F;</span><br><span class="line">倩女幽魂: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1297447&#x2F;</span><br><span class="line">玛丽和马克思: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3072124&#x2F;</span><br><span class="line">无人知晓: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292337&#x2F;</span><br><span class="line">甜蜜蜜: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1305164&#x2F;</span><br><span class="line">告白: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;4268598&#x2F;</span><br><span class="line">萤火之森: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;5989818&#x2F;</span><br><span class="line">超能陆战队: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;11026735&#x2F;</span><br><span class="line">大鱼: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291545&#x2F;</span><br><span class="line">阳光姐妹淘: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;4917726&#x2F;</span><br><span class="line">驯龙高手: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;2353023&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">控方证人: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1296141&#x2F;</span><br><span class="line">蝙蝠侠：黑暗骑士: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1851857&#x2F;</span><br><span class="line">活着: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292365&#x2F;</span><br><span class="line">寻梦环游记: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;20495023&#x2F;</span><br><span class="line">末代皇帝: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1293172&#x2F;</span><br><span class="line">乱世佳人: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1300267&#x2F;</span><br><span class="line">何以为家: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;30170448&#x2F;</span><br><span class="line">摔跤吧！爸爸: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;26387939&#x2F;</span><br><span class="line">指环王3：王者无敌: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291552&#x2F;</span><br><span class="line">飞屋环游记: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;2129039&#x2F;</span><br><span class="line">少年派的奇幻漂流: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1929463&#x2F;</span><br><span class="line">十二怒汉: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1293182&#x2F;</span><br><span class="line">素媛: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;21937452&#x2F;</span><br><span class="line">鬼子来了: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291858&#x2F;</span><br><span class="line">哈尔的移动城堡: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1308807&#x2F;</span><br><span class="line">天空之城: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291583&#x2F;</span><br><span class="line">大话西游之月光宝盒: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1299398&#x2F;</span><br><span class="line">哈利·波特与魔法石: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1295038&#x2F;</span><br><span class="line">天堂电影院: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291828&#x2F;</span><br><span class="line">罗马假日: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1293839&#x2F;</span><br><span class="line">闻香识女人: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1298624&#x2F;</span><br><span class="line">我不是药神: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;26752088&#x2F;</span><br><span class="line">辩护人: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;21937445&#x2F;</span><br><span class="line">搏击俱乐部: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292000&#x2F;</span><br><span class="line">教父2: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1299131&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">罗生门: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291879&#x2F;</span><br><span class="line">终结者2：审判日: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291844&#x2F;</span><br><span class="line">初恋这件小事: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;4739952&#x2F;</span><br><span class="line">2001太空漫游: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292226&#x2F;</span><br><span class="line">可可西里: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1308857&#x2F;</span><br><span class="line">魂断蓝桥: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1293964&#x2F;</span><br><span class="line">海洋: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3443389&#x2F;</span><br><span class="line">城市之光: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1293908&#x2F;</span><br><span class="line">燃情岁月: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1295865&#x2F;</span><br><span class="line">牯岭街少年杀人事件: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292329&#x2F;</span><br><span class="line">色，戒: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1828115&#x2F;</span><br><span class="line">穿越时空的少女: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1937946&#x2F;</span><br><span class="line">新龙门客栈: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292287&#x2F;</span><br><span class="line">青蛇: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1303394&#x2F;</span><br><span class="line">无耻混蛋: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1438652&#x2F;</span><br><span class="line">源代码: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3075287&#x2F;</span><br><span class="line">完美陌生人: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;26614893&#x2F;</span><br><span class="line">遗愿清单: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1867345&#x2F;</span><br><span class="line">阿飞正传: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1305690&#x2F;</span><br><span class="line">哈利·波特与火焰杯: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1309055&#x2F;</span><br><span class="line">九品芝麻官: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1297518&#x2F;</span><br><span class="line">大佛普拉斯: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;27059130&#x2F;</span><br><span class="line">血钻: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1428175&#x2F;</span><br><span class="line">谍影重重2: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1308767&#x2F;</span><br><span class="line">香水: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1760622&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">借东西的小人阿莉埃蒂: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;4202302&#x2F;</span><br><span class="line">射雕英雄传之东成西就: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1316510&#x2F;</span><br><span class="line">菊次郎的夏天: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1293359&#x2F;</span><br><span class="line">幸福终点站: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292274&#x2F;</span><br><span class="line">爱在日落黄昏时: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291990&#x2F;</span><br><span class="line">恐怖直播: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;21360417&#x2F;</span><br><span class="line">完美的世界: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1300992&#x2F;</span><br><span class="line">功夫: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291543&#x2F;</span><br><span class="line">人生果实: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;26874505&#x2F;</span><br><span class="line">神偷奶爸: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3287562&#x2F;</span><br><span class="line">怪兽电力公司: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291579&#x2F;</span><br><span class="line">玩具总动员3: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1858711&#x2F;</span><br><span class="line">天书奇谭: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1428581&#x2F;</span><br><span class="line">傲慢与偏见: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1418200&#x2F;</span><br><span class="line">血战钢锯岭: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;26325320&#x2F;</span><br><span class="line">教父3: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1294240&#x2F;</span><br><span class="line">时空恋旅人: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;10577869&#x2F;</span><br><span class="line">风之谷: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291585&#x2F;</span><br><span class="line">哈利·波特与阿兹卡班的囚徒: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291544&#x2F;</span><br><span class="line">釜山行: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25986180&#x2F;</span><br><span class="line">电锯惊魂: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1417598&#x2F;</span><br><span class="line">上帝之城: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292208&#x2F;</span><br><span class="line">被解救的姜戈: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;6307447&#x2F;</span><br><span class="line">哪吒闹海: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1307315&#x2F;</span><br><span class="line">喜宴: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1303037&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">忠犬八公物语: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1959195&#x2F;</span><br><span class="line">黑天鹅: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1978709&#x2F;</span><br><span class="line">头脑特工队: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;10533913&#x2F;</span><br><span class="line">新世界: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;10437779&#x2F;</span><br><span class="line">未麻的部屋: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1395091&#x2F;</span><br><span class="line">你看起来好像很好吃: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;4848115&#x2F;</span><br><span class="line">海街日记: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25895901&#x2F;</span><br><span class="line">无敌破坏王: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;6534248&#x2F;</span><br><span class="line">雨人: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291870&#x2F;</span><br><span class="line">冰川时代: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291578&#x2F;</span><br><span class="line">恋恋笔记本: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1309163&#x2F;</span><br><span class="line">惊魂记: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1293181&#x2F;</span><br><span class="line">二十二: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;26430107&#x2F;</span><br><span class="line">恐怖游轮: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3011051&#x2F;</span><br><span class="line">海边的曼彻斯特: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25980443&#x2F;</span><br><span class="line">奇迹男孩: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;26787574&#x2F;</span><br><span class="line">小偷家族: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;27622447&#x2F;</span><br><span class="line">房间: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25724855&#x2F;</span><br><span class="line">绿里奇迹: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1300374&#x2F;</span><br><span class="line">魔女宅急便: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1307811&#x2F;</span><br><span class="line">虎口脱险: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1296909&#x2F;</span><br><span class="line">雨中曲: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1293460&#x2F;</span><br><span class="line">疯狂的石头: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1862151&#x2F;</span><br><span class="line">爱在午夜降临前: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;10808442&#x2F;</span><br><span class="line">人工智能: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1302827&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">七武士: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1295399&#x2F;</span><br><span class="line">英雄本色: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1297574&#x2F;</span><br><span class="line">我是山姆: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1306861&#x2F;</span><br><span class="line">谍影重重3: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1578507&#x2F;</span><br><span class="line">岁月神偷: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3792799&#x2F;</span><br><span class="line">头号玩家: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;4920389&#x2F;</span><br><span class="line">纵横四海: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1295409&#x2F;</span><br><span class="line">疯狂原始人: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1907966&#x2F;</span><br><span class="line">一个叫欧维的男人决定去死: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;26628357&#x2F;</span><br><span class="line">三块广告牌: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;26611804&#x2F;</span><br><span class="line">心迷宫: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25917973&#x2F;</span><br><span class="line">哈利·波特与密室: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1296996&#x2F;</span><br><span class="line">达拉斯买家俱乐部: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1793929&#x2F;</span><br><span class="line">卢旺达饭店: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291822&#x2F;</span><br><span class="line">你的名字。: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;26683290&#x2F;</span><br><span class="line">花样年华: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291557&#x2F;</span><br><span class="line">萤火虫之墓: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1293318&#x2F;</span><br><span class="line">记忆碎片: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1304447&#x2F;</span><br><span class="line">荒蛮故事: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;24750126&#x2F;</span><br><span class="line">贫民窟的百万富翁: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;2209573&#x2F;</span><br><span class="line">东邪西毒: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292328&#x2F;</span><br><span class="line">真爱至上: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292401&#x2F;</span><br><span class="line">爆裂鼓手: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25773932&#x2F;</span><br><span class="line">黑客帝国3：矩阵革命: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1302467&#x2F;</span><br><span class="line">模仿游戏: https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;10463953&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[&#123;&#39;电影名&#39;: &#39;肖申克的救赎&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292052&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;霸王别姬&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291546&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;阿甘正传&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292720&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;这个杀手不太冷&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1295644&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;泰坦尼克号&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292722&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;美丽人生&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292063&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;千与千寻&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291561&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;辛德勒的名单&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1295124&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;盗梦空间&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3541415&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;忠犬八公的故事&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3011091&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;海上钢琴师&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292001&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;楚门的世界&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292064&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;星际穿越&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1889243&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;三傻大闹宝莱坞&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3793023&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;机器人总动员&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;2131459&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;放牛班的春天&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291549&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;大话西游之大圣娶亲&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292213&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;熔炉&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;5912992&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;疯狂动物城&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25662329&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;无间道&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1307914&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;龙猫&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291560&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;教父&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291841&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;当幸福来敲门&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1849031&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;怦然心动&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3319755&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;触不可及&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;6786002&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;死亡诗社&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291548&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;狮子王&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1301753&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;大闹天宫&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1418019&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;指环王2：双塔奇兵&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291572&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;猫鼠游戏&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1305487&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;窃听风暴&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1900841&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;指环王1：魔戒再现&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291571&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;钢琴家&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1296736&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;黑客帝国&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291843&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;美丽心灵&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1306029&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;饮食男女&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291818&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;两杆大烟枪&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1293350&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;飞越疯人院&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292224&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;让子弹飞&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3742360&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;本杰明·巴顿奇事&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1485260&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;看不见的客人&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;26580232&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;绿皮书&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;27060077&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;西西里的美丽传说&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292402&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;拯救大兵瑞恩&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292849&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;小鞋子&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1303021&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;海蒂和爷爷&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25958717&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;穿条纹睡衣的男孩&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3008247&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;情书&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292220&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;海豚湾&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3442220&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;音乐之声&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1294408&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;地球上的星星&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;2363506&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;疯狂的麦克斯4：狂暴之路&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3592854&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;战争之王&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1419936&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;步履不停&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;2222996&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;谍影重重&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1304102&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;彗星来的那一夜&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25807345&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;猜火车&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292528&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;朗读者&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;2213597&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;波西米亚狂想曲&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;5300054&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;浪潮&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;2297265&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;小萝莉的猴神大叔&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;26393561&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;再次出发之纽约遇见你&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;6874403&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;东京物语&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291568&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;驴得水&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25921812&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;聚焦&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25954475&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;追随&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1397546&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;千钧一发&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1300117&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;我爱你&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;5908478&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;一次别离&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;5964718&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;黑鹰坠落&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291824&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;黑客帝国2：重装上阵&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1304141&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;网络谜踪&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;27615441&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;四个春天&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;27191492&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;发条橙&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292233&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;E.T. 外星人&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1294638&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;肖申克的救赎&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292052&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;霸王别姬&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291546&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;阿甘正传&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292720&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;这个杀手不太冷&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1295644&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;泰坦尼克号&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292722&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;美丽人生&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292063&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;千与千寻&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291561&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;辛德勒的名单&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1295124&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;盗梦空间&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3541415&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;忠犬八公的故事&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3011091&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;海上钢琴师&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292001&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;楚门的世界&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292064&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;星际穿越&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1889243&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;三傻大闹宝莱坞&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3793023&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;机器人总动员&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;2131459&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;放牛班的春天&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291549&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;大话西游之大圣娶亲&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292213&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;熔炉&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;5912992&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;疯狂动物城&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25662329&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;无间道&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1307914&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;龙猫&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291560&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;教父&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291841&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;当幸福来敲门&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1849031&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;怦然心动&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3319755&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;触不可及&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;6786002&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;美国往事&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292262&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;致命魔术&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1780330&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;低俗小说&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291832&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;七宗罪&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292223&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;沉默的羔羊&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1293544&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;蝴蝶效应&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292343&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;禁闭岛&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;2334904&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;心灵捕手&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292656&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;春光乍泄&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292679&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;布达佩斯大饭店&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;11525673&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;被嫌弃的松子的一生&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1787291&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;摩登时代&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1294371&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;阿凡达&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1652587&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;剪刀手爱德华&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292370&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;勇敢的心&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1294639&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;喜剧之王&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1302425&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;致命ID&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1297192&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;加勒比海盗&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1298070&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;哈利·波特与死亡圣器(下)&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3011235&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;天使爱美丽&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292215&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;杀人回忆&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1300299&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;断背山&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1418834&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;狩猎&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;6985810&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;请以你的名字呼唤我&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;26799731&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;幽灵公主&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1297359&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;7号房的礼物&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;10777687&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;阳光灿烂的日子&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291875&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;小森林 夏秋篇&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25814705&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;重庆森林&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291999&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;第六感&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1297630&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;入殓师&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;2149806&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;红辣椒&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1865703&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;小森林 冬春篇&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25814707&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;消失的爱人&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;21318488&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;爱在黎明破晓前&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1296339&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;一一&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292434&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;唐伯虎点秋香&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1306249&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;侧耳倾听&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1297052&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;超脱&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;5322596&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;蝙蝠侠：黑暗骑士崛起&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3395373&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;倩女幽魂&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1297447&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;玛丽和马克思&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3072124&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;无人知晓&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292337&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;甜蜜蜜&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1305164&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;告白&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;4268598&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;萤火之森&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;5989818&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;超能陆战队&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;11026735&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;大鱼&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291545&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;阳光姐妹淘&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;4917726&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;驯龙高手&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;2353023&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;控方证人&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1296141&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;蝙蝠侠：黑暗骑士&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1851857&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;活着&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292365&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;寻梦环游记&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;20495023&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;末代皇帝&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1293172&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;乱世佳人&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1300267&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;何以为家&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;30170448&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;摔跤吧！爸爸&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;26387939&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;指环王3：王者无敌&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291552&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;飞屋环游记&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;2129039&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;少年派的奇幻漂流&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1929463&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;十二怒汉&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1293182&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;素媛&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;21937452&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;鬼子来了&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291858&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;哈尔的移动城堡&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1308807&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;天空之城&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291583&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;大话西游之月光宝盒&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1299398&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;哈利·波特与魔法石&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1295038&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;天堂电影院&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291828&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;罗马假日&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1293839&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;闻香识女人&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1298624&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;我不是药神&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;26752088&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;辩护人&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;21937445&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;搏击俱乐部&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292000&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;教父2&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1299131&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;罗生门&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291879&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;终结者2：审判日&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291844&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;初恋这件小事&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;4739952&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;2001太空漫游&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292226&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;可可西里&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1308857&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;魂断蓝桥&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1293964&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;海洋&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3443389&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;城市之光&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1293908&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;燃情岁月&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1295865&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;牯岭街少年杀人事件&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292329&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;色，戒&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1828115&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;穿越时空的少女&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1937946&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;新龙门客栈&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292287&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;青蛇&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1303394&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;无耻混蛋&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1438652&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;源代码&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3075287&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;完美陌生人&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;26614893&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;遗愿清单&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1867345&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;阿飞正传&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1305690&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;哈利·波特与火焰杯&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1309055&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;九品芝麻官&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1297518&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;大佛普拉斯&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;27059130&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;血钻&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1428175&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;谍影重重2&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1308767&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;香水&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1760622&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;借东西的小人阿莉埃蒂&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;4202302&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;射雕英雄传之东成西就&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1316510&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;菊次郎的夏天&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1293359&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;幸福终点站&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292274&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;爱在日落黄昏时&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291990&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;恐怖直播&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;21360417&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;完美的世界&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1300992&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;功夫&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291543&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;人生果实&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;26874505&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;神偷奶爸&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3287562&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;怪兽电力公司&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291579&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;玩具总动员3&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1858711&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;天书奇谭&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1428581&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;傲慢与偏见&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1418200&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;血战钢锯岭&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;26325320&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;教父3&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1294240&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;时空恋旅人&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;10577869&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;风之谷&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291585&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;哈利·波特与阿兹卡班的囚徒&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291544&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;釜山行&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25986180&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;电锯惊魂&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1417598&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;上帝之城&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292208&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;被解救的姜戈&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;6307447&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;哪吒闹海&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1307315&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;喜宴&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1303037&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;忠犬八公物语&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1959195&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;黑天鹅&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1978709&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;头脑特工队&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;10533913&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;新世界&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;10437779&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;未麻的部屋&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1395091&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;你看起来好像很好吃&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;4848115&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;海街日记&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25895901&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;无敌破坏王&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;6534248&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;雨人&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291870&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;冰川时代&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291578&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;恋恋笔记本&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1309163&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;惊魂记&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1293181&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;二十二&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;26430107&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;恐怖游轮&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3011051&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;海边的曼彻斯特&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25980443&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;奇迹男孩&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;26787574&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;小偷家族&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;27622447&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;房间&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25724855&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;绿里奇迹&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1300374&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;魔女宅急便&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1307811&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;虎口脱险&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1296909&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;雨中曲&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1293460&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;疯狂的石头&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1862151&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;爱在午夜降临前&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;10808442&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;人工智能&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1302827&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;七武士&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1295399&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;英雄本色&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1297574&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;我是山姆&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1306861&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;谍影重重3&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1578507&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;岁月神偷&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;3792799&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;头号玩家&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;4920389&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;纵横四海&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1295409&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;疯狂原始人&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1907966&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;一个叫欧维的男人决定去死&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;26628357&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;三块广告牌&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;26611804&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;心迷宫&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25917973&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;哈利·波特与密室&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1296996&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;达拉斯买家俱乐部&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1793929&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;卢旺达饭店&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291822&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;你的名字。&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;26683290&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;花样年华&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1291557&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;萤火虫之墓&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1293318&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;记忆碎片&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1304447&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;荒蛮故事&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;24750126&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;贫民窟的百万富翁&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;2209573&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;东邪西毒&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292328&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;真爱至上&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1292401&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;爆裂鼓手&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;25773932&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;黑客帝国3：矩阵革命&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;1302467&#x2F;&#39;&#125;, &#123;&#39;电影名&#39;: &#39;模仿游戏&#39;, &#39;链接&#39;: &#39;https:&#x2F;&#x2F;movie.douban.com&#x2F;subject&#x2F;10463953&#x2F;&#39;&#125;]</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>下面是pandas保存的结果</p>
<ul>
<li>pd.DataFrame传入列表，以及使用to_excel方法<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里可以保存到指定文件</span></span><br><span class="line">movie_msg = pd.DataFrame(self.save_list)</span><br><span class="line">movie_msg.to_excel(<span class="string">&#x27;douban_movies.xls&#x27;</span>)</span><br></pre></td></tr></table></figure>
<img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200826225937056-99348771.png"></li>
</ul>
</li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202008/2134757-20200826230012751-501018639.png"></p>
<h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><ul>
<li><p>用url队列时，使用set()集合类型，可以自动去重</p>
<ul>
<li>但是要注意，用了set的话，得到的这些内容顺序是乱的，不是按照原本网页的顺序</li>
<li>要顺序的话，用list()就可以了，但是要记得去重remove</li>
</ul>
</li>
<li><p>效率还算可以</p>
</li>
<li><p>不用这个url队列也可以做，不过在分页时代码会很累赘，没那么简洁</p>
</li>
<li><p>在获取其他页码的链接时，有的可以直接用bs4，不用re正则表达式</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Scrapy网络爬虫</category>
      </categories>
      <tags>
        <tag>人工智能</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数学建模相关实现</title>
    <url>/2021/01/26/PythonMathematicalModeling/</url>
    <content><![CDATA[  <meta name="referrer" content="no-referrer">  

<p>摘要：使用Python实现数学建模中的一些常见算法和求解过程…</p>
<a id="more"></a>





<h1 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h1><h2 id="线性规划"><a href="#线性规划" class="headerlink" title="线性规划"></a>线性规划</h2><h3 id="scipy求解"><a href="#scipy求解" class="headerlink" title="scipy求解"></a>scipy求解</h3><ul>
<li><p>需要知道目标函数(一般是求最大或者最小值)和约束条件</p>
<p>求解前转化为下面的标准形式</p>
<img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210125160917373-302412204.png" style="zoom:80%;">



</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> optimize</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求解函数 </span></span><br><span class="line">res = optimize.linprog(c, A, b, Aeq, beq, LB, UB, X0, OPTIONS)</span><br><span class="line"><span class="comment"># 目标函数最小值</span></span><br><span class="line">print(res.fun)</span><br><span class="line"><span class="comment"># 最优解 </span></span><br><span class="line">print(res.x)</span><br></pre></td></tr></table></figure>
<ul>
<li>标准形式是&lt;=，如果是&gt;=，则在两边加上符号-</li>
</ul>
<h4 id="举例1"><a href="#举例1" class="headerlink" title="举例1"></a>举例1</h4><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210125154651585-1863217363.png" style="zoom:80%;">

<ul>
<li><p>使用scipy求解z的最大值</p>
<ul>
<li><p>c是目标函数的系数矩阵</p>
</li>
<li><p>A是化成标准的&lt;=式子的左边的系数矩阵</p>
</li>
<li><p>B是化成标准的&lt;=式子的右边的数值矩阵</p>
</li>
<li><p>Aeq是所有=左边的系数矩阵，记得里面是[[]]二维</p>
</li>
<li><p>Beq是所有=右边的数值矩阵</p>
</li>
<li><p>下面第11行-c加-，是因为此题求的是最大值，但是标准格式是求最小值，所以加负号</p>
</li>
<li><p>另外上面的3个变量都大于0，这里可以使用<code>bounds=(0, None)</code>,bounds=(min,max)是范围，None代表无穷，如果不写bounds，那默认是(0, None)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = optimize.linprog(-c, A, B, Aeq, Beq, bounds=(<span class="number">0</span>, <span class="literal">None</span>))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> optimize</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确定c,A,b,Aeq,beq</span></span><br><span class="line">c = np.array([<span class="number">2</span>, <span class="number">3</span>, -<span class="number">5</span>])</span><br><span class="line">A = np.array([[-<span class="number">2</span>, <span class="number">5</span>, -<span class="number">1</span>], [<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>]])</span><br><span class="line">B = np.array([-<span class="number">10</span>, <span class="number">12</span>])</span><br><span class="line">Aeq = np.array([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]])</span><br><span class="line">Beq = np.array([<span class="number">7</span>])</span><br><span class="line"><span class="comment"># 求解</span></span><br><span class="line">res = optimize.linprog(-c, A, B, Aeq, Beq)</span><br><span class="line">print(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>res</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     con: array([1.80713222e-09])</span><br><span class="line">     fun: -14.57142856564506</span><br><span class="line"> message: &#39;Optimization terminated successfully.&#39;</span><br><span class="line">     nit: 5</span><br><span class="line">   slack: array([-2.24583019e-10,  3.85714286e+00])</span><br><span class="line">  status: 0</span><br><span class="line"> success: True</span><br><span class="line">       x: array([6.42857143e+00, 5.71428571e-01, 2.35900788e-10])</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<ul>
<li>fun是目标函数最小值</li>
<li>x是最优解，即上面的x1,x2,x3的最优解</li>
</ul>
</li>
</ul>
<h4 id="举例2"><a href="#举例2" class="headerlink" title="举例2"></a>举例2</h4><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210125164051771-1805134741.png" style="zoom:80%;">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> optimize</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">c = np.array([<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>])</span><br><span class="line">A = np.array([[-<span class="number">1</span>, -<span class="number">4</span>, -<span class="number">2</span>], [-<span class="number">3</span>, -<span class="number">2</span>, <span class="number">0</span>]])</span><br><span class="line">B = np.array([-<span class="number">8</span>, -<span class="number">6</span>])</span><br><span class="line">Aeq = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]])</span><br><span class="line">Beq = np.array([<span class="number">101</span>])</span><br><span class="line"><span class="comment"># 求解</span></span><br><span class="line">res = optimize.linprog(-c, A, B, Aeq, Beq)</span><br><span class="line">print(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">con: array([3.75850107e-09])</span><br><span class="line">     fun: -201.9999999893402</span><br><span class="line"> message: &#39;Optimization terminated successfully.&#39;</span><br><span class="line">     nit: 6</span><br><span class="line">   slack: array([ 93.        , 296.99999998])</span><br><span class="line">  status: 0</span><br><span class="line"> success: True</span><br><span class="line">       x: array([1.01000000e+02, 6.13324051e-10, 3.61350245e-10])</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>


<h3 id="pulp求解"><a href="#pulp求解" class="headerlink" title="pulp求解"></a>pulp求解</h3><ul>
<li><p>也可以使用pulp求解，见<a href="https://www.bilibili.com/video/BV12h411d7Dm?p=4">https://www.bilibili.com/video/BV12h411d7Dm?p=4</a></p>
</li>
<li><p>但是稍微繁琐</p>
</li>
</ul>
<h2 id="pymprog求解"><a href="#pymprog求解" class="headerlink" title="pymprog求解"></a>pymprog求解</h2><ul>
<li><p>官方文档：<a href="http://pymprog.sourceforge.net/">http://pymprog.sourceforge.net/</a></p>
<p><a href="http://pymprog.sourceforge.net/intro.html#whetting">http://pymprog.sourceforge.net/intro.html#whetting</a></p>
</li>
</ul>
<h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">maximize  15 x + 10 y         # profit</span><br><span class="line">S.T.</span><br><span class="line">             x         &lt;&#x3D;  3  # mountain bike limit</span><br><span class="line">                    y  &lt;&#x3D;  4  # racer limit</span><br><span class="line">             x +    y  &lt;&#x3D;  5  # frame limit</span><br><span class="line">             x &gt;&#x3D;0, y &gt;&#x3D;0     # non-negative</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymprog <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    begin(<span class="string">&#x27;bike production&#x27;</span>)</span><br><span class="line">    x, y = var(<span class="string">&#x27;x, y&#x27;</span>)  <span class="comment"># variables</span></span><br><span class="line">    maximize(<span class="number">15</span> * x + <span class="number">10</span> * y, <span class="string">&#x27;profit&#x27;</span>)</span><br><span class="line">    x &lt;= <span class="number">3</span>  <span class="comment"># mountain bike limit</span></span><br><span class="line">    y &lt;= <span class="number">4</span>  <span class="comment"># racer production limit</span></span><br><span class="line">    x + y &lt;= <span class="number">5</span>  <span class="comment"># metal finishing limit</span></span><br><span class="line">    solve()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;x取值：&#x27;</span> + <span class="built_in">str</span>(x.primal))</span><br><span class="line">    print(<span class="string">&#x27;y取值：&#x27;</span> + <span class="built_in">str</span>(y.primal))</span><br><span class="line">    print(<span class="string">&#x27;最优解为：&#x27;</span> + <span class="built_in">str</span>(vobj()))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>res</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GLPK Simplex Optimizer, v4.65</span><br><span class="line">1 row, 2 columns, 2 non-zeros</span><br><span class="line">*     0: obj &#x3D;  -0.000000000e+00 inf &#x3D;   0.000e+00 (2)</span><br><span class="line">*     2: obj &#x3D;   6.500000000e+01 inf &#x3D;   0.000e+00 (0)</span><br><span class="line">OPTIMAL LP SOLUTION FOUND</span><br><span class="line">x取值：3.0</span><br><span class="line">y取值：2.0</span><br><span class="line">最优解为：65.0</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>




<h2 id="整数规划"><a href="#整数规划" class="headerlink" title="整数规划"></a>整数规划</h2><h3 id="cvxpy求解"><a href="#cvxpy求解" class="headerlink" title="cvxpy求解"></a>cvxpy求解</h3><ul>
<li><p>和线性规划差不多，但是多了个约束，那就是部分变量被约束为整数</p>
</li>
<li><p>目前没有一种方法可以有效地求解一切整数规划。常见的整数规划求解算法有：</p>
<ul>
<li>分支定界法：可求纯或混合整数线性规划；</li>
<li>割平面法：可求纯或混合整数线性规划；</li>
<li>隐枚举法：用于求解0-1整数规划，有过滤隐枚举法和分支隐枚举法；</li>
<li>匈牙利法：解决指派问题（0-1规划特殊情形）；</li>
<li>Monte Carlo法：求解各种类型规划。</li>
</ul>
</li>
</ul>
<h4 id="举例1-1"><a href="#举例1-1" class="headerlink" title="举例1"></a>举例1</h4><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210125190009985-419409110.png" style="zoom:80%;">

<ul>
<li>同理也是化成&lt;=的标准形式</li>
<li>这里的改动只需要我们输入n,a,b,c，以及第10行的小改动，n,a,b,c含义和上面线性规划一样，如果有Aeq和Beq也是同理，加上即可，然后放进cons(下面第11行)里面</li>
<li>如果是求最大，第10行用cp.Maximize</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cvxpy <span class="keyword">as</span> cp</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> array</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n = <span class="number">2</span>  <span class="comment"># 两个变量</span></span><br><span class="line">    c = array([<span class="number">40</span>, <span class="number">90</span>])  <span class="comment"># 定义目标向量</span></span><br><span class="line">    a = array([[<span class="number">9</span>, <span class="number">7</span>], [-<span class="number">7</span>, -<span class="number">20</span>]])  <span class="comment"># 定义约束矩阵</span></span><br><span class="line">    b = array([<span class="number">56</span>, -<span class="number">70</span>])  <span class="comment"># 定义约束条件的右边向量</span></span><br><span class="line">    x = cp.Variable(n, integer=<span class="literal">True</span>)  <span class="comment"># 定义两个整数决策变量</span></span><br><span class="line">    obj = cp.Minimize(c * x)  <span class="comment"># 构造目标函数</span></span><br><span class="line">    cons = [a * x &lt;= b, x &gt;= <span class="number">0</span>]  <span class="comment"># 构造约束条件</span></span><br><span class="line">    prob = cp.Problem(obj, cons)  <span class="comment"># 构建问题模型</span></span><br><span class="line">    prob.solve(solver=<span class="string">&#x27;GLPK_MI&#x27;</span>, verbose=<span class="literal">True</span>)  <span class="comment"># 求解问题</span></span><br><span class="line">    <span class="comment"># prob.solve(solver=cp.CPLEX, verbose=True)  # cp.CPLEX也可以</span></span><br><span class="line">    print(<span class="string">&quot;最优值为:&quot;</span>, prob.value)</span><br><span class="line">    print(<span class="string">&quot;最优解为:&quot;</span>, x.value)</span><br></pre></td></tr></table></figure>
<ul>
<li>运行结果会有警告，但是不影响结果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      0: obj &#x3D;   2.700000000e+02 inf &#x3D;   6.250e-01 (1)</span><br><span class="line">      1: obj &#x3D;   3.150000000e+02 inf &#x3D;   0.000e+00 (0)</span><br><span class="line">Long-step dual simplex will be used</span><br><span class="line">+     1: mip &#x3D;     not found yet &gt;&#x3D;              -inf        (1; 0)</span><br><span class="line">Solution found by heuristic: 360</span><br><span class="line">+     2: &gt;&gt;&gt;&gt;&gt;   3.500000000e+02 &gt;&#x3D;   3.500000000e+02   0.0% (1; 0)</span><br><span class="line">+     2: mip &#x3D;   3.500000000e+02 &gt;&#x3D;     tree is empty   0.0% (0; 1)</span><br><span class="line">最优值为: 350.0</span><br><span class="line">最优解为: [2. 3.]</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<ul>
<li>参考：<a href="https://zhuanlan.zhihu.com/p/344215929">https://zhuanlan.zhihu.com/p/344215929</a></li>
</ul>
<h2 id="非线性规划"><a href="#非线性规划" class="headerlink" title="非线性规划"></a>非线性规划</h2><ul>
<li><p>非线性规划可分为两种，目标函数是凸函数或者是非凸函数</p>
<ul>
<li><p>凸函数的非线性规划：如f = x^2+y^2+x*y，可以使用scipy</p>
</li>
<li><p>非凸函数的非线性规划：如求极值，可以有如下方法</p>
<ul>
<li><p>纯数学方法，求导求极值</p>
</li>
<li><p>神经网络，深度学习(bp算法链式求导)</p>
</li>
<li><p>scipy.optimize.minimize</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fun：求最小值的目标函数</span><br><span class="line">args：常数值</span><br><span class="line">method：求极值方法，一般默认。</span><br><span class="line">constraints：约束条件</span><br><span class="line">x0：变量的初始猜测值，注意 minimize是局部最优</span><br></pre></td></tr></table></figure>
<h4 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h4></li>
</ul>
</li>
</ul>
</li>
<li><p>计算1/x+x的最小值</p>
<ul>
<li>只需要改12行的系数，15行的初始猜测值，和8行的函数</li>
<li>如果结果是True，则是找到局部最优解，若是False，则结果是错误的</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> minimize</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># f = 1/x+x</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">args</span>):</span></span><br><span class="line">    a = args</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: a / x[<span class="number">0</span>] + x[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    args = (<span class="number">1</span>)  <span class="comment"># a</span></span><br><span class="line">    <span class="comment"># x0 = np.asarray((1.5))  # 初始猜测值</span></span><br><span class="line">    <span class="comment"># x0 = np.asarray((2.2))  # 初始猜测值</span></span><br><span class="line">    x0 = np.asarray((<span class="number">2</span>))  <span class="comment"># 设置初始猜测值</span></span><br><span class="line"></span><br><span class="line">    res = minimize(fun(args), x0, method=<span class="string">&#x27;SLSQP&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;最值:&#x27;</span>, res.fun)</span><br><span class="line">    print(<span class="string">&#x27;是否是最优解&#x27;</span>, res.success)</span><br><span class="line">    print(<span class="string">&#x27;取到最值时，x的值(最优解)是&#x27;</span>, res.x)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最值: 2.00000007583235</span><br><span class="line">是否是最优解 True</span><br><span class="line">取到最值时，x的值(最优解)是 [1.00027541]</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>




</li>
</ul>
<h4 id="举例2-1"><a href="#举例2-1" class="headerlink" title="举例2"></a>举例2</h4><ul>
<li><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210125205945946-1572918851.png" style="zoom:67%;">
</li>
<li><p>x1,x2,x3的范围都在0.1到0.9 之间</p>
</li>
<li><p>x是变量矩阵，如x[0]即为x1</p>
</li>
<li><p>需要变动的是函数fun，con,27,29,32行，x0的设置要尽在要求的0.1到0.9范围内</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> minimize</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算(2+x1)/(1+x2)- 3*x1+4*x3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">args</span>):</span></span><br><span class="line">    a, b, c, d = args</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: (a + x[<span class="number">0</span>]) / (b + x[<span class="number">1</span>]) - c * x[<span class="number">0</span>] + d * x[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">con</span>(<span class="params">args</span>):</span></span><br><span class="line">    <span class="comment"># 约束条件 分为eq 和ineq</span></span><br><span class="line">    <span class="comment"># eq表示 函数结果等于0</span></span><br><span class="line">    <span class="comment"># ineq 表示 表达式大于等于0</span></span><br><span class="line">    x1min, x1max, x2min, x2max, x3min, x3max = args</span><br><span class="line">    cons = (&#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;ineq&#x27;</span>, <span class="string">&#x27;fun&#x27;</span>: <span class="keyword">lambda</span> x: x[<span class="number">0</span>] - x1min&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;ineq&#x27;</span>, <span class="string">&#x27;fun&#x27;</span>: <span class="keyword">lambda</span> x: -x[<span class="number">0</span>] + x1max&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;ineq&#x27;</span>, <span class="string">&#x27;fun&#x27;</span>: <span class="keyword">lambda</span> x: x[<span class="number">1</span>] - x2min&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;ineq&#x27;</span>, <span class="string">&#x27;fun&#x27;</span>: <span class="keyword">lambda</span> x: -x[<span class="number">1</span>] + x2max&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;ineq&#x27;</span>, <span class="string">&#x27;fun&#x27;</span>: <span class="keyword">lambda</span> x: x[<span class="number">2</span>] - x3min&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;ineq&#x27;</span>, <span class="string">&#x27;fun&#x27;</span>: <span class="keyword">lambda</span> x: -x[<span class="number">2</span>] + x3max&#125;)</span><br><span class="line">    <span class="keyword">return</span> cons</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 定义常量值</span></span><br><span class="line">    args = (<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>)  <span class="comment"># a,b,c,d</span></span><br><span class="line">    <span class="comment"># 设置参数范围/约束条件</span></span><br><span class="line">    args1 = (<span class="number">0.1</span>, <span class="number">0.9</span>, <span class="number">0.1</span>, <span class="number">0.9</span>, <span class="number">0.1</span>, <span class="number">0.9</span>)  <span class="comment"># x1min, x1max, x2min,x2max</span></span><br><span class="line">    cons = con(args1)</span><br><span class="line">    <span class="comment"># 设置初始猜测值</span></span><br><span class="line">    x0 = np.asarray((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))</span><br><span class="line">    res = minimize(fun(args), x0, method=<span class="string">&#x27;SLSQP&#x27;</span>, constraints=cons)</span><br><span class="line">    print(<span class="string">&#x27;最值:&#x27;</span>, res.fun)</span><br><span class="line">    print(<span class="string">&#x27;是否是最优解&#x27;</span>, res.success)</span><br><span class="line">    print(<span class="string">&#x27;取到最值时，x的值(最优解)是&#x27;</span>, res.x)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最值: -0.773684210526435</span><br><span class="line">是否是最优解 True</span><br><span class="line">取到最值时，x的值(最优解)是 [0.9 0.9 0.1]</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></li>
<li><p>可以看出对于这类简单函数，局部最优解与真实最优解相差不大，但是对于复杂的函数，x0的初始值设置，会很大程度影响最优解的结果</p>
</li>
</ul>
<h1 id="数值逼近"><a href="#数值逼近" class="headerlink" title="数值逼近"></a>数值逼近</h1><h2 id="一维和二维插值"><a href="#一维和二维插值" class="headerlink" title="一维和二维插值"></a>一维和二维插值</h2><ul>
<li>参考<a href="https://www.bilibili.com/video/BV12h411d7Dm?p=5">https://www.bilibili.com/video/BV12h411d7Dm?p=5</a></li>
<li>都使得图像更加光滑</li>
</ul>
<h2 id="最小二乘法拟合"><a href="#最小二乘法拟合" class="headerlink" title="最小二乘法拟合"></a>最小二乘法拟合</h2><ul>
<li><p>用的是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> leastsq</span><br></pre></td></tr></table></figure>
<h4 id="举例-2"><a href="#举例-2" class="headerlink" title="举例"></a>举例</h4></li>
<li><p>一组数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">X &#x3D; np.array([8.19, 2.72, 6.39, 8.71, 4.7, 2.66, 3.78])</span><br><span class="line">Y &#x3D; np.array([7.01, 2.78, 6.47, 6.71, 4.1, 4.23, 4.05])</span><br></pre></td></tr></table></figure></li>
<li><p>使用leastsq</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> leastsq</span><br><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> mpl</span><br><span class="line"></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;Microsoft YaHei&#x27;</span>]  <span class="comment"># 指定默认字体</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算以p为参数的直线与原始数据之间误差</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">p</span>):</span></span><br><span class="line">    k, b = p</span><br><span class="line">    <span class="keyword">return</span> Y - (k * X + b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    X = np.array([<span class="number">8.19</span>, <span class="number">2.72</span>, <span class="number">6.39</span>, <span class="number">8.71</span>, <span class="number">4.7</span>, <span class="number">2.66</span>, <span class="number">3.78</span>])</span><br><span class="line">    Y = np.array([<span class="number">7.01</span>, <span class="number">2.78</span>, <span class="number">6.47</span>, <span class="number">6.71</span>, <span class="number">4.1</span>, <span class="number">4.23</span>, <span class="number">4.05</span>])</span><br><span class="line">    <span class="comment"># leastsq使得f的输出数组的平方和最小，参数初始值为[1,0]</span></span><br><span class="line">    r = leastsq(f, [<span class="number">1</span>, <span class="number">0</span>])  <span class="comment"># 数初始值可以随便设个合理的</span></span><br><span class="line">    k, b = r[<span class="number">0</span>]</span><br><span class="line">    x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">1000</span>)</span><br><span class="line">    y = k * x + b</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 画散点图，s是点的大小</span></span><br><span class="line">    plt.scatter(X, Y, s=<span class="number">100</span>, alpha=<span class="number">1.0</span>, marker=<span class="string">&#x27;o&#x27;</span>, label=<span class="string">u&#x27;数据点&#x27;</span>)</span><br><span class="line">    <span class="comment"># 话拟合曲线，linewidth是线宽</span></span><br><span class="line">    plt.plot(x, y, color=<span class="string">&#x27;r&#x27;</span>, linewidth=<span class="number">2</span>, linestyle=<span class="string">&quot;-&quot;</span>, markersize=<span class="number">20</span>, label=<span class="string">u&#x27;拟合曲线&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;安培/A&#x27;</span>)  <span class="comment"># 美赛就不用中文了</span></span><br><span class="line">    plt.ylabel(<span class="string">&#x27;伏特/V&#x27;</span>)</span><br><span class="line">    plt.legend(loc=<span class="number">0</span>, numpoints=<span class="number">1</span>)  <span class="comment"># 显示点和线的说明</span></span><br><span class="line">    <span class="comment"># plt.plot(X, Y)</span></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;k = &#x27;</span>, k)</span><br><span class="line">    print(<span class="string">&#x27;b = &#x27;</span>, b)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">k &#x3D;  0.6134953491930442</span><br><span class="line">b &#x3D;  1.794092543259387</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210125231930793-2082702774.png" style="zoom:67%;">

<ul>
<li><p>另外，这个线性拟合也可以使用sklearn求k和b，再去画图</p>
<ul>
<li>注意维度转换X = X.reshape(-1, 1)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    X = np.array([<span class="number">8.19</span>, <span class="number">2.72</span>, <span class="number">6.39</span>, <span class="number">8.71</span>, <span class="number">4.7</span>, <span class="number">2.66</span>, <span class="number">3.78</span>])</span><br><span class="line">    Y = np.array([<span class="number">7.01</span>, <span class="number">2.78</span>, <span class="number">6.47</span>, <span class="number">6.71</span>, <span class="number">4.1</span>, <span class="number">4.23</span>, <span class="number">4.05</span>])</span><br><span class="line">    X = X.reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    model = linear_model.LinearRegression()</span><br><span class="line">    model.fit(X, Y)</span><br><span class="line">    print(<span class="string">&#x27;k = &#x27;</span>, model.coef_)</span><br><span class="line">    print(<span class="string">&#x27;b = &#x27;</span>, model.intercept_)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">k &#x3D;  [0.61349535]</span><br><span class="line">b &#x3D;  1.7940925542916233</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></li>
<li><p>更多线性和非线性问题、如多元回归、逻辑回归、其他分类问题，见我之前的sklearn blog</p>
</li>
</ul>
<h1 id="微分方程"><a href="#微分方程" class="headerlink" title="微分方程"></a>微分方程</h1><ul>
<li><p>微分方程是用来描述某一类函数与其导数之间关系的方程，其解是一个符合方程的函数。微分方程按自变量个数可分为 <strong>常微分方程</strong>和<strong>偏微分方程</strong>，</p>
<p>前者表达通式 ：<img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210125234039695-755335755.png" style="zoom:50%;"></p>
<p>后者表达通式：<img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210125234109978-1913319984.png" style="zoom:67%;"></p>
</li>
<li><p>建议稍微复习一下高数上册最后微分方程那章再看看会更好</p>
</li>
</ul>
<h2 id="解析解"><a href="#解析解" class="headerlink" title="解析解"></a>解析解</h2><ul>
<li><p>使用sympy库，但是得到的是字符形式的格式</p>
<p>如下这种,如果结果是比较复杂的，可能太丑</p>
<p>如 <img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210126000059946-133280703.png" style="zoom: 50%;"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply_ics</span>(<span class="params">sol, ics, x, known_params</span>):</span></span><br><span class="line">    free_params = sol.free_symbols - <span class="built_in">set</span>(known_params)</span><br><span class="line">    eqs = [(sol.lhs.diff(x, n) - sol.rhs.diff(x, n)).subs(x, <span class="number">0</span>).subs(ics) <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ics))]</span><br><span class="line">    sol_params = sympy.solve(eqs, free_params)</span><br><span class="line">    <span class="keyword">return</span> sol.subs(sol_params)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sympy.init_printing()  <span class="comment"># 初始化打印环境</span></span><br><span class="line">    t, omega0, gamma = sympy.symbols(<span class="string">&quot;t, omega_0, gamma&quot;</span>, positive=<span class="literal">True</span>)  <span class="comment"># 标记参数，且均为正</span></span><br><span class="line">    x = sympy.Function(<span class="string">&#x27;x&#x27;</span>)  <span class="comment"># 标记x是微分函数，非变量</span></span><br><span class="line">    ode = x(t).diff(t, <span class="number">2</span>) + <span class="number">2</span> * gamma * omega0 * x(t).diff(t) + omega0 ** <span class="number">2</span> * x(t)</span><br><span class="line">    ode_sol = sympy.dsolve(ode)  <span class="comment"># 用diff()和dsolve得到通解</span></span><br><span class="line">    ics = &#123;x(<span class="number">0</span>): <span class="number">1</span>, x(t).diff(t).subs(t, <span class="number">0</span>): <span class="number">0</span>&#125;  <span class="comment"># 将初始条件字典匹配</span></span><br><span class="line">    x_t_sol = apply_ics(ode_sol, ics, t, [omega0, gamma])</span><br><span class="line">    sympy.pprint(x_t_sol)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>此段解释可见：<a href="https://www.bilibili.com/video/BV12h411d7Dm?p=6">https://www.bilibili.com/video/BV12h411d7Dm?p=6</a></li>
</ul>
<img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210125235722095-422250700.png" style="zoom:80%;">

<ul>
<li><p>如果最后加上<code>print(x_t_sol)</code></p>
<p>结果为：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Eq(x(t), (-gamma&#x2F;(2*sqrt(gamma**2 - 1)) + 1&#x2F;2)*exp(omega_0*t*(-gamma - sqrt(gamma - 1)*sqrt(gamma + 1))) + (gamma&#x2F;(2*sqrt(gamma**2 - 1)) + 1&#x2F;2)*exp(omega_0*t*(-gamma + sqrt(gamma - 1)*sqrt(gamma + 1))))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
<li><p>结果较为简单的常微分方程</p>
<ul>
<li>f(x)’’+f(x)=0 二阶常系数齐次微分方程</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy <span class="keyword">as</span> sy</span><br><span class="line"></span><br><span class="line"><span class="comment"># f(x)&#x27;&#x27;+f(x)=0 二阶常系数齐次微分方程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">differential_equation</span>(<span class="params">x, f</span>):</span></span><br><span class="line">    <span class="keyword">return</span> sy.diff(f(x), x, <span class="number">2</span>) + f(x)  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    x = sy.symbols(<span class="string">&#x27;x&#x27;</span>)  <span class="comment"># 约定变量</span></span><br><span class="line">    f = sy.Function(<span class="string">&#x27;f&#x27;</span>)  <span class="comment"># 约定函数</span></span><br><span class="line">    print(sy.dsolve(differential_equation(x, f), f(x)))  <span class="comment"># 打印</span></span><br><span class="line">    sy.pprint(sy.dsolve(differential_equation(x, f), f(x)))  <span class="comment"># 漂亮的打印</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Eq(f(x), C1*sin(x) + C2*cos(x))</span><br><span class="line">f(x) &#x3D; C₁⋅sin(x) + C₂⋅cos(x)</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></li>
<li><p>可以参考：<a href="https://blog.csdn.net/your_answer/article/details/79234275">https://blog.csdn.net/your_answer/article/details/79234275</a></p>
</li>
</ul>
<h2 id="数值解"><a href="#数值解" class="headerlink" title="数值解"></a>数值解</h2><ul>
<li>当ODE(常微分方程)无法求得解析解时，可以用scipy中的integrate.odeint求数值解来探索其解的部分性质,并辅以可视化，能直观地展现ODE解的函数表达</li>
</ul>
<h4 id="举例-3"><a href="#举例-3" class="headerlink" title="举例"></a>举例</h4><ul>
<li><p>一阶非线性常微分方程 <img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210126001647795-11891498.png" style="zoom:50%;"></p>
</li>
<li><p>plot_direction_field函数里面的参数意义：</p>
<ul>
<li>y_x:也就是y(x)</li>
<li>f_xy:也就是x-y(x)^2</li>
<li>x_lim=(-5, 5), y_lim=(-5, 5)也就是在这个x，y轴的范围展示出来</li>
</ul>
</li>
<li><p>关键需要修改的部分,29-31行，33行的y0需要适当调</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = sympy.symbols(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">y = sympy.Function(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">f = x - y(x) ** <span class="number">2</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> integrate</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_direction_field</span>(<span class="params">x, y_x, f_xy, x_lim=(<span class="params">-<span class="number">5</span>, <span class="number">5</span></span>), y_lim=(<span class="params">-<span class="number">5</span>, <span class="number">5</span></span>), ax=<span class="literal">None</span></span>):</span></span><br><span class="line">    f_np = sympy.lambdify((x, y_x), f_xy, <span class="string">&#x27;numpy&#x27;</span>)</span><br><span class="line">    x_vec = np.linspace(x_lim[<span class="number">0</span>], x_lim[<span class="number">1</span>], <span class="number">20</span>)</span><br><span class="line">    y_vec = np.linspace(y_lim[<span class="number">0</span>], y_lim[<span class="number">1</span>], <span class="number">20</span>)</span><br><span class="line">    <span class="keyword">if</span> ax <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        _, ax = plt.subplots(figsize=(<span class="number">4</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">    dx = x_vec[<span class="number">1</span>] - x_vec[<span class="number">0</span>]</span><br><span class="line">    dy = y_vec[<span class="number">1</span>] - y_vec[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> m, xx <span class="keyword">in</span> <span class="built_in">enumerate</span>(x_vec):</span><br><span class="line">        <span class="keyword">for</span> n, yy <span class="keyword">in</span> <span class="built_in">enumerate</span>(y_vec):</span><br><span class="line">            Dy = f_np(xx, yy) * dx</span><br><span class="line">            Dx = <span class="number">0.8</span> * dx ** <span class="number">2</span> / np.sqrt(dx ** <span class="number">2</span> + Dy ** <span class="number">2</span>)</span><br><span class="line">            Dy = <span class="number">0.8</span> * Dy * dy / np.sqrt(dx ** <span class="number">2</span> + Dy ** <span class="number">2</span>)</span><br><span class="line">            ax.plot([xx - Dx / <span class="number">2</span>, xx + Dx / <span class="number">2</span>], [yy - Dy / <span class="number">2</span>, yy + Dy / <span class="number">2</span>], <span class="string">&#x27;b&#x27;</span>, lw=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    ax.axis(<span class="string">&#x27;tight&#x27;</span>)</span><br><span class="line">    ax.set_title(<span class="string">r&#x27;$ % s$&#x27;</span> % (sympy.latex(sympy.Eq(y_x.diff(x), f_xy))), fontsize=<span class="number">18</span>)</span><br><span class="line">    <span class="keyword">return</span> ax</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    x = sympy.symbols(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    y = sympy.Function(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">    f = x - y(x) ** <span class="number">2</span></span><br><span class="line">    f_np = sympy.lambdify((y(x), x), f)  <span class="comment"># 符号表达式转隐函数</span></span><br><span class="line">    y0 = <span class="number">1</span> <span class="comment"># odeint需要给个初始值</span></span><br><span class="line">    xp = np.linspace(<span class="number">0</span>, <span class="number">5</span>, <span class="number">100</span>)</span><br><span class="line">    yp = integrate.odeint(f_np, y0, xp)  <span class="comment"># 初始y0解f_np,x范围xp</span></span><br><span class="line">    xn = np.linspace(<span class="number">0</span>, -<span class="number">5</span>, <span class="number">100</span>)</span><br><span class="line">    yn = integrate.odeint(f_np, y0, xp)</span><br><span class="line">    fig, ax = plt.subplots(<span class="number">1</span>, <span class="number">1</span>, figsize=(<span class="number">4</span>, <span class="number">4</span>))</span><br><span class="line">    plot_direction_field(x, y(x), f, ax=ax)  <span class="comment"># 绘制f的场线图</span></span><br><span class="line">    ax.plot(xn, yn, <span class="string">&#x27;b&#x27;</span>, lw=<span class="number">2</span>)</span><br><span class="line">    ax.plot(xp, yp, <span class="string">&#x27;r&#x27;</span>, lw=<span class="number">2</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210126004745972-533198965.png" style="zoom:67%;">



<h2 id="传染病模型"><a href="#传染病模型" class="headerlink" title="传染病模型"></a>传染病模型</h2><ul>
<li><p>传染病模型研究属于传染病动力学研究方向，这里只是将模型中微分方程进行了python实现</p>
</li>
<li><p>传染病模型包括：SI、SIS、SIR、SIRS、SEIR、SEIRS共六个模型</p>
</li>
</ul>
<h3 id="SI模型"><a href="#SI模型" class="headerlink" title="SI模型"></a>SI模型</h3><ul>
<li><p>比如病毒传染初期，没有加防疫手段，就符合SI模型</p>
</li>
<li><p>SI模型的表达式见网上(S:易感染，I:已感染)</p>
</li>
<li><p>需要修改的参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">10000</span>  <span class="comment"># N为人群总数</span></span><br><span class="line">beta = <span class="number">0.25</span>  <span class="comment"># β为传染率系数</span></span><br><span class="line">gamma = <span class="number">0</span>  <span class="comment"># gamma为恢复率系数</span></span><br><span class="line">I_0 = <span class="number">1</span>  <span class="comment"># I_0为感染者的初始人数</span></span><br><span class="line">S_0 = N - I_0  <span class="comment"># S_0为易感染者的初始人数</span></span><br><span class="line">T = <span class="number">150</span>  <span class="comment"># T为传播时间</span></span><br></pre></td></tr></table></figure>
<ul>
<li>β为传染率系数,比如现在100个人已经传染了，在一段时间内，传染新增了25人，则β为0.25</li>
<li>gamma为恢复率系数，一开始没有抗体都是为0的，如果不为0，比如是开始有100人感染，在一个传播时间T后，治愈了6个人，则gamma取0.06</li>
<li>I_0为感染者的初始人数</li>
<li>S_0为易感染者的初始人数，这个要看情况，如果都不加干预，那就是N - I_0，一般看情况需要再考虑其他因素(交通，社交群体，航线等)，S_0考虑的越多，则越完备</li>
<li>Susceptible易感染的，Infection已经感染的</li>
</ul>
</li>
<li><p>code</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy.integrate <span class="keyword">as</span> spi</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">N = <span class="number">10000</span>  <span class="comment"># N为人群总数</span></span><br><span class="line">beta = <span class="number">0.25</span>  <span class="comment"># β为传染率系数</span></span><br><span class="line">gamma = <span class="number">0</span>  <span class="comment"># gamma为恢复率系数</span></span><br><span class="line">I_0 = <span class="number">1</span>  <span class="comment"># I_0为感染者的初始人数</span></span><br><span class="line">S_0 = N - I_0  <span class="comment"># S_0为易感染者的初始人数</span></span><br><span class="line">T = <span class="number">150</span>  <span class="comment"># T为传播时间</span></span><br><span class="line">INI = (S_0, I_0)  <span class="comment"># INI为初始状态下的数组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funcSI</span>(<span class="params">inivalue, _</span>):</span></span><br><span class="line">    Y = np.zeros(<span class="number">2</span>)</span><br><span class="line">    X = inivalue</span><br><span class="line">    Y[<span class="number">0</span>] = -(beta * X[<span class="number">0</span>] * X[<span class="number">1</span>]) / N + gamma * X[<span class="number">1</span>]  <span class="comment"># 易感个体变化</span></span><br><span class="line">    Y[<span class="number">1</span>] = (beta * X[<span class="number">0</span>] * X[<span class="number">1</span>]) / N - gamma * X[<span class="number">1</span>]  <span class="comment"># 感染个体变化</span></span><br><span class="line">    <span class="keyword">return</span> Y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    T_range = np.arange(<span class="number">0</span>, T + <span class="number">1</span>)</span><br><span class="line">    RES = spi.odeint(funcSI, INI, T_range)</span><br><span class="line">    plt.plot(RES[:, <span class="number">0</span>], color=<span class="string">&#x27;darkblue&#x27;</span>, label=<span class="string">&#x27;Susceptible&#x27;</span>, marker=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    plt.plot(RES[:, <span class="number">1</span>], color=<span class="string">&#x27;red&#x27;</span>, label=<span class="string">&#x27;Infection&#x27;</span>, marker=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;SI Model&#x27;</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;Day&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;Number&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210126011701220-865611893.png" style="zoom: 80%;">

<ul>
<li>可以看到10000个人大概在60天左右就全部感染了</li>
</ul>
<h3 id="SIS模型"><a href="#SIS模型" class="headerlink" title="SIS模型"></a>SIS模型</h3><ul>
<li>与SI区别不大，区别在于7行的gamma有初始值，以及17行的公式改变了</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy.integrate <span class="keyword">as</span> spi</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">N = <span class="number">10000</span>  <span class="comment"># N为人群总数</span></span><br><span class="line">beta = <span class="number">0.25</span>  <span class="comment"># β为传染率系数</span></span><br><span class="line">gamma = <span class="number">0.05</span>  <span class="comment"># gamma为恢复率系数</span></span><br><span class="line">I_0 = <span class="number">1</span>  <span class="comment"># I_0为感染者的初始人数</span></span><br><span class="line">S_0 = N - I_0  <span class="comment"># S_0为易感染者的初始人数</span></span><br><span class="line">T = <span class="number">150</span>  <span class="comment"># T为传播时间</span></span><br><span class="line">INI = (S_0, I_0)  <span class="comment"># INI为初始状态下的数组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funcSI</span>(<span class="params">inivalue, _</span>):</span></span><br><span class="line">    Y = np.zeros(<span class="number">2</span>)</span><br><span class="line">    X = inivalue</span><br><span class="line">    Y[<span class="number">0</span>] = -(beta * X[<span class="number">0</span>]) / N * X[<span class="number">1</span>] + gamma * X[<span class="number">1</span>]  <span class="comment"># 易感个体变化</span></span><br><span class="line">    Y[<span class="number">1</span>] = (beta * X[<span class="number">0</span>] * X[<span class="number">1</span>]) / N - gamma * X[<span class="number">1</span>]  <span class="comment"># 感染个体变化</span></span><br><span class="line">    <span class="keyword">return</span> Y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    T_range = np.arange(<span class="number">0</span>, T + <span class="number">1</span>)</span><br><span class="line">    RES = spi.odeint(funcSI, INI, T_range)</span><br><span class="line">    plt.plot(RES[:, <span class="number">0</span>], color=<span class="string">&#x27;darkblue&#x27;</span>, label=<span class="string">&#x27;Susceptible&#x27;</span>, marker=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    plt.plot(RES[:, <span class="number">1</span>], color=<span class="string">&#x27;red&#x27;</span>, label=<span class="string">&#x27;Infection&#x27;</span>, marker=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;SIS Model&#x27;</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;Day&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;Number&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210126012337702-518099954.png" style="zoom:80%;">

<ul>
<li>可以看到60-80天之间，逐渐稳定，有的人治愈后(获得抗体)活了下来，有的没治愈的就死了</li>
</ul>
<h3 id="SIR模型"><a href="#SIR模型" class="headerlink" title="SIR模型"></a>SIR模型</h3><ul>
<li>多了R_0为治愈者的初始人数，即刚开始注射疫苗恢复的人</li>
<li>表达式也改变</li>
<li>注意恢复治愈包括自身产生抗体以及通过医疗手段获得抗体两种</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy.integrate <span class="keyword">as</span> spi</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">N = <span class="number">10000</span>  <span class="comment"># N为人群总数</span></span><br><span class="line">beta = <span class="number">0.25</span>  <span class="comment"># β为传染率系数</span></span><br><span class="line">gamma = <span class="number">0.05</span>  <span class="comment"># gamma为恢复率系数</span></span><br><span class="line">I_0 = <span class="number">1</span>  <span class="comment"># I_0为感染者的初始人数</span></span><br><span class="line">R_0 = <span class="number">0</span>  <span class="comment"># R_0为治愈者的初始人数</span></span><br><span class="line">S_0 = N - I_0 - R_0  <span class="comment"># S_0为易感染者的初始人数</span></span><br><span class="line">T = <span class="number">150</span>  <span class="comment"># T为传播时间</span></span><br><span class="line">INI = (S_0, I_0, R_0)  <span class="comment"># INI为初始状态下的数组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funcSIR</span>(<span class="params">inivalue, _</span>):</span></span><br><span class="line">    Y = np.zeros(<span class="number">3</span>)</span><br><span class="line">    X = inivalue</span><br><span class="line">    Y[<span class="number">0</span>] = -(beta * X[<span class="number">0</span>] * X[<span class="number">1</span>]) / N  <span class="comment"># 易感个体变化</span></span><br><span class="line">    Y[<span class="number">1</span>] = (beta * X[<span class="number">0</span>] * X[<span class="number">1</span>]) / N - gamma * X[<span class="number">1</span>]  <span class="comment"># 感染个体变化</span></span><br><span class="line">    Y[<span class="number">2</span>] = gamma * X[<span class="number">1</span>]  <span class="comment"># 治愈个体变化</span></span><br><span class="line">    <span class="keyword">return</span> Y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    T_range = np.arange(<span class="number">0</span>, T + <span class="number">1</span>)</span><br><span class="line">    RES = spi.odeint(funcSIR, INI, T_range)</span><br><span class="line">    plt.plot(RES[:, <span class="number">0</span>], color=<span class="string">&#x27;darkblue&#x27;</span>, label=<span class="string">&#x27;Susceptible&#x27;</span>, marker=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    plt.plot(RES[:, <span class="number">1</span>], color=<span class="string">&#x27;red&#x27;</span>, label=<span class="string">&#x27;Infection&#x27;</span>, marker=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    plt.plot(RES[:, <span class="number">2</span>], color=<span class="string">&#x27;green&#x27;</span>, label=<span class="string">&#x27;Recovery&#x27;</span>, marker=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;SIR Model&#x27;</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;Day&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;Number&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210126012856029-403667398.png" style="zoom:80%;">

<ul>
<li>可以看到感染人数出现峰值，在前期已经开始使用抗体，病人逐渐治愈，最后所有人都恢复健康</li>
</ul>
<h3 id="SIRS模型"><a href="#SIRS模型" class="headerlink" title="SIRS模型"></a>SIRS模型</h3><ul>
<li>多了Ts为抗体持续时间，也就是说有了抗体一段时间后，抗体失效，又变成了易感染人群</li>
<li>公式也改变</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy.integrate <span class="keyword">as</span> spi</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">N = <span class="number">10000</span>  <span class="comment"># N为人群总数</span></span><br><span class="line">beta = <span class="number">0.25</span>  <span class="comment"># β为传染率系数</span></span><br><span class="line">gamma = <span class="number">0.05</span>  <span class="comment"># gamma为恢复率系数</span></span><br><span class="line">Ts = <span class="number">7</span>  <span class="comment"># Ts为抗体持续时间</span></span><br><span class="line">I_0 = <span class="number">1</span>  <span class="comment"># I_0为感染者的初始人数</span></span><br><span class="line">R_0 = <span class="number">0</span>  <span class="comment"># R_0为治愈者的初始人数</span></span><br><span class="line">S_0 = N - I_0 - R_0  <span class="comment"># S_0为易感染者的初始人数</span></span><br><span class="line">T = <span class="number">150</span>  <span class="comment"># T为传播时间</span></span><br><span class="line">INI = (S_0, I_0, R_0)  <span class="comment"># INI为初始状态下的数组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funcSIRS</span>(<span class="params">inivalue, _</span>):</span></span><br><span class="line">    Y = np.zeros(<span class="number">3</span>)</span><br><span class="line">    X = inivalue</span><br><span class="line">    Y[<span class="number">0</span>] = -(beta * X[<span class="number">0</span>] * X[<span class="number">1</span>]) / N + X[<span class="number">2</span>] / Ts  <span class="comment"># 易感个体变化</span></span><br><span class="line">    Y[<span class="number">1</span>] = (beta * X[<span class="number">0</span>] * X[<span class="number">1</span>]) / N - gamma * X[<span class="number">1</span>]  <span class="comment"># 感染个体变化</span></span><br><span class="line">    Y[<span class="number">2</span>] = gamma * X[<span class="number">1</span>] - X[<span class="number">2</span>] / Ts  <span class="comment"># 治愈个体变化</span></span><br><span class="line">    <span class="keyword">return</span> Y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    T_range = np.arange(<span class="number">0</span>, T + <span class="number">1</span>)</span><br><span class="line">    RES = spi.odeint(funcSIRS, INI, T_range)</span><br><span class="line">    plt.plot(RES[:, <span class="number">0</span>], color=<span class="string">&#x27;darkblue&#x27;</span>, label=<span class="string">&#x27;Susceptible&#x27;</span>, marker=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    plt.plot(RES[:, <span class="number">1</span>], color=<span class="string">&#x27;red&#x27;</span>, label=<span class="string">&#x27;Infection&#x27;</span>, marker=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    plt.plot(RES[:, <span class="number">2</span>], color=<span class="string">&#x27;green&#x27;</span>, label=<span class="string">&#x27;Recovery&#x27;</span>, marker=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;SIRS Model&#x27;</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;Day&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;Number&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210126013611658-1218001757.png" style="zoom:80%;">

<ul>
<li>最终达到一个平衡</li>
</ul>
<h3 id="SEIR模型"><a href="#SEIR模型" class="headerlink" title="SEIR模型"></a>SEIR模型</h3><ul>
<li><p>考虑了病毒的潜伏期(潜伏人群E)，也就是感染病毒后，过了潜伏期就是感染人群了</p>
</li>
<li><p>多了E_0为潜伏者的初始人数，如果是0，那说明开始时有人感染，但是还没有发病，此时这类人不是易感染，但是他们携带病毒</p>
</li>
<li><p>只有经过潜伏期，才能被传染</p>
</li>
<li><p>公式有所变化</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy.integrate <span class="keyword">as</span> spi</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">N = <span class="number">10000</span>  <span class="comment"># N为人群总数</span></span><br><span class="line">beta = <span class="number">0.6</span>  <span class="comment"># β为传染率系数</span></span><br><span class="line">gamma = <span class="number">0.1</span>  <span class="comment"># gamma为恢复率系数</span></span><br><span class="line">Te = <span class="number">14</span>  <span class="comment"># Te为疾病潜伏期</span></span><br><span class="line">I_0 = <span class="number">1</span>  <span class="comment"># I_0为感染者的初始人数</span></span><br><span class="line">E_0 = <span class="number">0</span>  <span class="comment"># E_0为潜伏者的初始人数</span></span><br><span class="line">R_0 = <span class="number">0</span>  <span class="comment"># R_0为治愈者的初始人数</span></span><br><span class="line">S_0 = N - I_0 - R_0 - E_0  <span class="comment"># S_0为易感染者的初始人数</span></span><br><span class="line">T = <span class="number">150</span>  <span class="comment"># T为传播时间</span></span><br><span class="line">INI = (S_0, E_0, I_0, R_0)  <span class="comment"># INI为初始状态下的数组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funcSEIR</span>(<span class="params">inivalue, _</span>):</span></span><br><span class="line">    Y = np.zeros(<span class="number">4</span>)</span><br><span class="line">    X = inivalue</span><br><span class="line">    Y[<span class="number">0</span>] = -(beta * X[<span class="number">0</span>] * X[<span class="number">2</span>]) / N  <span class="comment"># 易感个体变化</span></span><br><span class="line">    Y[<span class="number">1</span>] = (beta * X[<span class="number">0</span>] * X[<span class="number">2</span>] / N - X[<span class="number">1</span>] / Te)  <span class="comment"># 潜伏个体变化</span></span><br><span class="line">    Y[<span class="number">2</span>] = X[<span class="number">1</span>] / Te - gamma * X[<span class="number">2</span>]  <span class="comment"># 感染个体变化</span></span><br><span class="line">    Y[<span class="number">3</span>] = gamma * X[<span class="number">2</span>]  <span class="comment"># 治愈个体变化</span></span><br><span class="line">    <span class="keyword">return</span> Y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    T_range = np.arange(<span class="number">0</span>, T + <span class="number">1</span>)</span><br><span class="line">    RES = spi.odeint(funcSEIR, INI, T_range)</span><br><span class="line">    plt.plot(RES[:, <span class="number">0</span>], color=<span class="string">&#x27;darkblue&#x27;</span>, label=<span class="string">&#x27;Susceptible&#x27;</span>, marker=</span><br><span class="line">    <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    plt.plot(RES[:, <span class="number">1</span>], color=<span class="string">&#x27;orange&#x27;</span>, label=<span class="string">&#x27;Exposed&#x27;</span>, marker=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    plt.plot(RES[:, <span class="number">2</span>], color=<span class="string">&#x27;red&#x27;</span>, label=<span class="string">&#x27;Infection&#x27;</span>, marker=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    plt.plot(RES[:, <span class="number">3</span>], color=<span class="string">&#x27;green&#x27;</span>, label=<span class="string">&#x27;Recovery&#x27;</span>, marker=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;SEIR Model&#x27;</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;Day&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;Number&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210126014328064-1899684542.png" style="zoom:80%;">

<ul>
<li>潜伏期的人会比感染人群先到达峰值，最终都可以治愈</li>
</ul>
<h3 id="SEIRS模型"><a href="#SEIRS模型" class="headerlink" title="SEIRS模型"></a>SEIRS模型</h3><ul>
<li><p>考虑了抗体持续时间</p>
</li>
<li><p>一般多了潜伏期的话，传染率系数会有所增加，上面的SEIR也是同理</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy.integrate <span class="keyword">as</span> spi</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">N = <span class="number">10000</span>  <span class="comment"># N为人群总数</span></span><br><span class="line">beta = <span class="number">0.6</span>  <span class="comment"># β为传染率系数</span></span><br><span class="line">gamma = <span class="number">0.1</span>  <span class="comment"># gamma为恢复率系数</span></span><br><span class="line">Ts = <span class="number">7</span>  <span class="comment"># Ts为抗体持续时间</span></span><br><span class="line">Te = <span class="number">14</span>  <span class="comment"># Te为疾病潜伏期</span></span><br><span class="line">I_0 = <span class="number">1</span>  <span class="comment"># I_0为感染者的初始人数</span></span><br><span class="line">E_0 = <span class="number">0</span>  <span class="comment"># E_0为潜伏者的初始人数</span></span><br><span class="line">R_0 = <span class="number">0</span>  <span class="comment"># R_0为治愈者的初始人数</span></span><br><span class="line">S_0 = N - I_0 - R_0 - E_0  <span class="comment"># S_0为易感染者的初始人数</span></span><br><span class="line">T = <span class="number">150</span>  <span class="comment"># T为传播时间</span></span><br><span class="line">INI = (S_0, E_0, I_0, R_0)  <span class="comment"># INI为初始状态下的数组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funcSEIRS</span>(<span class="params">inivalue, _</span>):</span></span><br><span class="line">    Y = np.zeros(<span class="number">4</span>)</span><br><span class="line">    X = inivalue</span><br><span class="line">    Y[<span class="number">0</span>] = -(beta * X[<span class="number">0</span>] * X[<span class="number">2</span>]) / N + X[<span class="number">3</span>] / Ts  <span class="comment"># 易感个体变化</span></span><br><span class="line">    Y[<span class="number">1</span>] = (beta * X[<span class="number">0</span>] * X[<span class="number">2</span>] / N - X[<span class="number">1</span>] / Te)  <span class="comment"># 潜伏个体变化</span></span><br><span class="line">    Y[<span class="number">2</span>] = X[<span class="number">1</span>] / Te - gamma * X[<span class="number">2</span>]  <span class="comment"># 感染个体变化</span></span><br><span class="line">    Y[<span class="number">3</span>] = gamma * X[<span class="number">2</span>] - X[<span class="number">3</span>] / Ts  <span class="comment"># 治愈个体变化</span></span><br><span class="line">    <span class="keyword">return</span> Y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    T_range = np.arange(<span class="number">0</span>, T + <span class="number">1</span>)</span><br><span class="line">    RES = spi.odeint(funcSEIRS, INI, T_range)</span><br><span class="line">    plt.plot(RES[:, <span class="number">0</span>], color=<span class="string">&#x27;darkblue&#x27;</span>, label=<span class="string">&#x27;Susceptible&#x27;</span>, marker=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    plt.plot(RES[:, <span class="number">1</span>], color=<span class="string">&#x27;orange&#x27;</span>, label=<span class="string">&#x27;Exposed&#x27;</span>, marker=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    plt.plot(RES[:, <span class="number">2</span>], color=<span class="string">&#x27;red&#x27;</span>, label=<span class="string">&#x27;Infection&#x27;</span>, marker=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    plt.plot(RES[:, <span class="number">3</span>], color=<span class="string">&#x27;green&#x27;</span>, label=<span class="string">&#x27;Recovery&#x27;</span>, marker=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;SETRS Model&#x27;</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;Day&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;Number&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210126015400873-268245591.png" style="zoom:80%;">

<ul>
<li>潜伏期的人先到峰值，然后是易感染者，然后是治愈者，他们最终会达到平衡稳定</li>
</ul>
<h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><h2 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h2><h3 id="解法1-常用"><a href="#解法1-常用" class="headerlink" title="解法1(常用)"></a>解法1(常用)</h3><ul>
<li>只需要给出带有权值的邻接矩阵即可求出最短路径和最短距离</li>
<li>需要改变的第54行邻接矩阵的权值和65行的起点和终点，注意21行是从0还是1开始</li>
<li>有向边和无向边的混合均可使用</li>
<li><code>g = defaultdict(list)</code>是得到一个元素全是list类型的字典</li>
<li>举例<img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210126144816051-2026015349.png" style="zoom: 60%;"></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dijkstra</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">from</span> heapq <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">inf = <span class="number">99999</span>  <span class="comment"># 不连通值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_graph</span>(<span class="params">mtx_graph</span>):</span></span><br><span class="line">    m_n = <span class="built_in">len</span>(mtx_graph)  <span class="comment"># 带权连接矩阵的阶数</span></span><br><span class="line">    edges = []  <span class="comment"># 保存连通的两个点之间的距离(点A、点B、距离)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m_n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m_n):</span><br><span class="line">            <span class="keyword">if</span> i != j <span class="keyword">and</span> mtx_graph[i][j] != inf:</span><br><span class="line">                edges.append((i, j, mtx_graph[i][j]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> edges</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dijkstra</span>(<span class="params">edges, from_node, to_node</span>):</span></span><br><span class="line">    go_path = []</span><br><span class="line">    to_node = to_node - <span class="number">1</span> <span class="comment"># 看情况，如果是从1开始的就减一</span></span><br><span class="line">    g = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">    <span class="keyword">for</span> l, r, c <span class="keyword">in</span> edges:</span><br><span class="line">        g[l].append((c, r))</span><br><span class="line">    q, seen = [(<span class="number">0</span>, from_node - <span class="number">1</span>, ())], <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        (cost, v1, path) = heappop(q)  <span class="comment"># 堆弹出当前路径最小成本</span></span><br><span class="line">        <span class="keyword">if</span> v1 <span class="keyword">not</span> <span class="keyword">in</span> seen:</span><br><span class="line">            seen.add(v1)</span><br><span class="line">            path = (v1, path)</span><br><span class="line">            <span class="keyword">if</span> v1 == to_node:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">for</span> c, v2 <span class="keyword">in</span> g.get(v1, ()):</span><br><span class="line">                <span class="keyword">if</span> v2 <span class="keyword">not</span> <span class="keyword">in</span> seen:</span><br><span class="line">                    heappush(q, (cost + c, v2, path))</span><br><span class="line">    <span class="keyword">if</span> v1 != to_node:  <span class="comment"># 无法到达</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">float</span>[<span class="string">&#x27;inf&#x27;</span>], []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(path) &gt; <span class="number">0</span>:</span><br><span class="line">        left = path[<span class="number">0</span>]</span><br><span class="line">        go_path.append(left)</span><br><span class="line">        right = path[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(right) &gt; <span class="number">0</span>:</span><br><span class="line">            left = right[<span class="number">0</span>]</span><br><span class="line">            go_path.append(left)</span><br><span class="line">            right = right[<span class="number">1</span>]</span><br><span class="line">        go_path.reverse()  <span class="comment"># 逆序变换</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(go_path)):  <span class="comment"># 标号加1</span></span><br><span class="line">            go_path[i] = go_path[i] + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> cost, go_path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    mtx_graph = [[<span class="number">0</span>, <span class="number">1</span>, inf, <span class="number">3</span>, inf, inf, inf, inf, inf],</span><br><span class="line">                 [<span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, inf, <span class="number">2</span>, inf, inf, inf, inf],</span><br><span class="line">                 [inf, inf, <span class="number">0</span>, <span class="number">1</span>, inf, <span class="number">6</span>, inf, inf, inf],</span><br><span class="line">                 [inf, inf, inf, <span class="number">0</span>, inf, <span class="number">7</span>, inf, <span class="number">9</span>, inf],</span><br><span class="line">                 [inf, <span class="number">2</span>, <span class="number">3</span>, inf, <span class="number">0</span>, <span class="number">4</span>, <span class="number">2</span>, inf, <span class="number">8</span>],</span><br><span class="line">                 [inf, inf, <span class="number">6</span>, <span class="number">7</span>, inf, <span class="number">0</span>, inf, <span class="number">2</span>, inf],</span><br><span class="line">                 [inf, inf, inf, inf, inf, <span class="number">1</span>, <span class="number">0</span>, inf, <span class="number">3</span>],</span><br><span class="line">                 [inf, inf, inf, inf, inf, inf, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line">                 [inf, inf, inf, inf, <span class="number">8</span>, inf, <span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">    edges = init_graph(mtx_graph)</span><br><span class="line">    length, path = dijkstra(edges, <span class="number">1</span>, <span class="number">9</span>)</span><br><span class="line">    print(<span class="string">&#x27;最短距离为：&#x27;</span> + <span class="built_in">str</span>(length))</span><br><span class="line">    print(<span class="string">&#x27;前进路径为：&#x27;</span> + <span class="built_in">str</span>(path))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最短距离为：8</span><br><span class="line">前进路径为：[1, 2, 5, 7, 9]</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h3 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h3><ul>
<li>输入是一个包含每个点与其他点联系和权值的字典</li>
<li>下面是无向边的例子，适合无向边</li>
<li>需要修改的是51的联系，62的起点，66行的起点和终点</li>
<li><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210126144528055-511872856.png" style="zoom:67%;">

</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line">Max = <span class="number">99999999</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有点像BFS的思想</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dijktestra</span>(<span class="params">graph, start</span>):</span></span><br><span class="line">    queue = []  <span class="comment"># 优先队列</span></span><br><span class="line">    heapq.heappush(queue, (<span class="number">0</span>, start))</span><br><span class="line">    visited = <span class="built_in">set</span>()</span><br><span class="line">    path = &#123;start: <span class="literal">None</span>&#125;  <span class="comment"># 记录该点的上一个点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 先把一开始到达的所有路径距离设最大</span></span><br><span class="line">    distance = &#123;start: <span class="number">0</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> vertex <span class="keyword">in</span> graph:</span><br><span class="line">        <span class="keyword">if</span> vertex != start:</span><br><span class="line">            distance[vertex] = Max</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(queue):</span><br><span class="line">        <span class="comment"># 取出的当前在queue的第一个点</span></span><br><span class="line">        pair = heapq.heappop(queue)</span><br><span class="line">        dist = pair[<span class="number">0</span>]</span><br><span class="line">        vertex = pair[<span class="number">1</span>]</span><br><span class="line">        visited.add(vertex)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 该点的所有连接点</span></span><br><span class="line">        nodes = graph[vertex].keys()</span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> nodes:</span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> visited <span class="keyword">and</span> dist + graph[vertex][v] &lt; distance[v]:</span><br><span class="line">                heapq.heappush(queue, (dist + graph[vertex][v], v))  <span class="comment"># 优先队列会自动把值最小的放在前面</span></span><br><span class="line">                path[v] = vertex  <span class="comment"># 记录上一个点</span></span><br><span class="line">                distance[v] = dist + graph[vertex][v]  <span class="comment"># 更新最小值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> path, distance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_path</span>(<span class="params">path, start, end</span>):</span></span><br><span class="line">    shortest_path = []</span><br><span class="line">    vertex = end</span><br><span class="line">    <span class="keyword">while</span> vertex != path[start]:</span><br><span class="line">        vertex = path[vertex]</span><br><span class="line">        shortest_path.append(vertex)</span><br><span class="line"></span><br><span class="line">    shortest_path.reverse()</span><br><span class="line">    shortest_path.pop(<span class="number">0</span>)</span><br><span class="line">    shortest_path.append(end)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> shortest_path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    graph = &#123;</span><br><span class="line">        <span class="string">&#x27;A&#x27;</span>: &#123;<span class="string">&#x27;B&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">16</span>, <span class="string">&#x27;I&#x27;</span>: <span class="number">5</span>&#125;,</span><br><span class="line">        <span class="string">&#x27;B&#x27;</span>: &#123;<span class="string">&#x27;A&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;F&#x27;</span>: <span class="number">15</span>&#125;,</span><br><span class="line">        <span class="string">&#x27;C&#x27;</span>: &#123;<span class="string">&#x27;D&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;E&#x27;</span>: <span class="number">15</span>, <span class="string">&#x27;I&#x27;</span>: <span class="number">6</span>&#125;,</span><br><span class="line">        <span class="string">&#x27;D&#x27;</span>: &#123;<span class="string">&#x27;A&#x27;</span>: <span class="number">16</span>, <span class="string">&#x27;C&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;F&#x27;</span>: <span class="number">9</span>&#125;,</span><br><span class="line">        <span class="string">&#x27;E&#x27;</span>: &#123;<span class="string">&#x27;C&#x27;</span>: <span class="number">15</span>, <span class="string">&#x27;H&#x27;</span>: <span class="number">4</span>&#125;,</span><br><span class="line">        <span class="string">&#x27;F&#x27;</span>: &#123;<span class="string">&#x27;B&#x27;</span>: <span class="number">15</span>, <span class="string">&#x27;H&#x27;</span>: <span class="number">30</span>&#125;,</span><br><span class="line">        <span class="string">&#x27;G&#x27;</span>: &#123;<span class="string">&#x27;C&#x27;</span>: <span class="number">25</span>, <span class="string">&#x27;H&#x27;</span>: <span class="number">12</span>&#125;,</span><br><span class="line">        <span class="string">&#x27;H&#x27;</span>: &#123;<span class="string">&#x27;E&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;F&#x27;</span>: <span class="number">9</span>, <span class="string">&#x27;G&#x27;</span>: <span class="number">12</span>&#125;,</span><br><span class="line">        <span class="string">&#x27;I&#x27;</span>: &#123;<span class="string">&#x27;A&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;C&#x27;</span>: <span class="number">6</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    path, distance = dijktestra(graph, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">    print(path)</span><br><span class="line">    print(distance)</span><br><span class="line"></span><br><span class="line">    shortest_path = show_path(path, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;H&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;shortest_path:&#x27;</span>, shortest_path)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">该点的上一个点： &#123;&#39;A&#39;: None, &#39;B&#39;: &#39;A&#39;, &#39;D&#39;: &#39;A&#39;, &#39;I&#39;: &#39;A&#39;, &#39;C&#39;: &#39;I&#39;, &#39;F&#39;: &#39;B&#39;, &#39;E&#39;: &#39;C&#39;, &#39;H&#39;: &#39;E&#39;, &#39;G&#39;: &#39;H&#39;&#125;</span><br><span class="line">起点到其他各个点的最小距离： &#123;&#39;A&#39;: 0, &#39;B&#39;: 10, &#39;C&#39;: 11, &#39;D&#39;: 16, &#39;E&#39;: 26, &#39;F&#39;: 25, &#39;G&#39;: 42, &#39;H&#39;: 30, &#39;I&#39;: 5&#125;</span><br><span class="line">shortest_path: [&#39;A&#39;, &#39;I&#39;, &#39;C&#39;, &#39;E&#39;, &#39;H&#39;]</span><br></pre></td></tr></table></figure>




<h2 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h2><ul>
<li>通过动态规划求解多源最短路径问题</li>
</ul>
<h4 id="举例-4"><a href="#举例-4" class="headerlink" title="举例"></a>举例</h4><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210126144816051-2026015349.png" style="zoom: 60%;">

<ul>
<li>图和上面的图一样，求出从每一个点到其他点的最短距离和路径</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">inf = <span class="number">99999</span>  <span class="comment"># 不连通值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">floyd</span>(<span class="params">graph</span>):</span></span><br><span class="line">    N = <span class="built_in">len</span>(graph)</span><br><span class="line">    A = np.array(graph)</span><br><span class="line">    path = np.zeros((N, N))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, N):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, N):</span><br><span class="line">            <span class="keyword">if</span> A[i][j] != inf:</span><br><span class="line">                path[i][j] = j</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, N):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, N):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, N):</span><br><span class="line">                <span class="keyword">if</span> A[i][k] + A[k][j] &lt; A[i][j]:</span><br><span class="line">                    A[i][j] = A[i][k] + A[k][j]</span><br><span class="line">                    path[i][j] = path[i][k]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, N):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, N):</span><br><span class="line">            path[i][j] = path[i][j] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;距离 = \n&#x27;</span>, A)</span><br><span class="line">    print(<span class="string">&#x27;路径 = \n&#x27;</span>, path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    mtx_graph = [[<span class="number">0</span>, <span class="number">1</span>, inf, <span class="number">3</span>, inf, inf, inf, inf, inf],</span><br><span class="line">                 [<span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, inf, <span class="number">2</span>, inf, inf, inf, inf],</span><br><span class="line">                 [inf, inf, <span class="number">0</span>, <span class="number">1</span>, inf, <span class="number">6</span>, inf, inf, inf],</span><br><span class="line">                 [inf, inf, inf, <span class="number">0</span>, inf, <span class="number">7</span>, inf, <span class="number">9</span>, inf],</span><br><span class="line">                 [inf, <span class="number">2</span>, <span class="number">3</span>, inf, <span class="number">0</span>, <span class="number">4</span>, <span class="number">2</span>, inf, <span class="number">8</span>],</span><br><span class="line">                 [inf, inf, <span class="number">6</span>, <span class="number">7</span>, inf, <span class="number">0</span>, inf, <span class="number">2</span>, inf],</span><br><span class="line">                 [inf, inf, inf, inf, inf, <span class="number">1</span>, <span class="number">0</span>, inf, <span class="number">3</span>],</span><br><span class="line">                 [inf, inf, inf, inf, inf, inf, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line">                 [inf, inf, inf, inf, <span class="number">8</span>, inf, <span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>]]</span><br><span class="line">    floyd(mtx_graph)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">距离 &#x3D; </span><br><span class="line"> [[ 0  1  6  3  3  6  5  8  8]</span><br><span class="line"> [ 1  0  5  4  2  5  4  7  7]</span><br><span class="line"> [21 20  0  1 18  6  9  8 10]</span><br><span class="line"> [22 21 13  0 19  7 10  9 11]</span><br><span class="line"> [ 3  2  3  4  0  3  2  5  5]</span><br><span class="line"> [15 14  6  7 12  0  3  2  4]</span><br><span class="line"> [14 13  7  8 11  1  0  3  3]</span><br><span class="line"> [13 12  8  9 10  2  1  0  2]</span><br><span class="line"> [11 10 10 11  8  4  3  2  0]]</span><br><span class="line">路径 &#x3D; </span><br><span class="line"> [[1. 2. 2. 4. 2. 2. 2. 2. 2.]</span><br><span class="line"> [1. 2. 3. 1. 5. 5. 5. 5. 5.]</span><br><span class="line"> [6. 6. 3. 4. 6. 6. 6. 6. 6.]</span><br><span class="line"> [8. 8. 6. 4. 8. 6. 8. 8. 8.]</span><br><span class="line"> [2. 2. 3. 3. 5. 7. 7. 7. 7.]</span><br><span class="line"> [8. 8. 3. 4. 8. 6. 8. 8. 8.]</span><br><span class="line"> [9. 9. 6. 6. 9. 6. 7. 6. 9.]</span><br><span class="line"> [9. 9. 7. 7. 9. 7. 7. 8. 9.]</span><br><span class="line"> [5. 5. 7. 7. 5. 7. 7. 8. 9.]]</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<ul>
<li><p>距离，比如1到9的距离为8，即从第1行看到第9列</p>
</li>
<li><p>怎么看最短路径看解释见下图</p>
<img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210126174606468-866209777.png" style="zoom: 67%;">



</li>
</ul>
<h2 id="机场航线设计"><a href="#机场航线设计" class="headerlink" title="机场航线设计"></a>机场航线设计</h2><ul>
<li>图的可视化</li>
<li>数据清洗分析，可参考我那块Kaggle练习</li>
<li>城市可作为图节点</li>
<li>可参考down下来的pdf资料<ul>
<li>找到最密集的点，作为交通枢纽，考虑其他成本、时效性、盈利因素之类的…</li>
</ul>
</li>
</ul>
<h1 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h1><ul>
<li>多元回归、逻辑回归见我之前的blog</li>
<li>也可参考pdf资料</li>
</ul>
<h1 id="差分方程"><a href="#差分方程" class="headerlink" title="差分方程"></a>差分方程</h1><h2 id="递推关系"><a href="#递推关系" class="headerlink" title="递推关系"></a>递推关系</h2><ul>
<li>差分方程建模的关键在于如何得到第<strong>n</strong>组数据与第<strong>n+1</strong>组数据之间的关系</li>
</ul>
<h4 id="举例-5"><a href="#举例-5" class="headerlink" title="举例"></a>举例</h4><h5 id="酵母菌生长模型"><a href="#酵母菌生长模型" class="headerlink" title="酵母菌生长模型"></a><strong>酵母菌生长模型</strong></h5><ul>
<li><p>相类比的还有比如兔子(其他生物)繁殖模型等</p>
</li>
<li><p>如图所示我们用培养基培养细菌时，其数量变化通常会经历这四个时期。 </p>
<p>这个模型针对前三个时期建一个大致的模型： </p>
<p><strong>调整期</strong>、<strong>对数期</strong>、<strong>稳定期</strong></p>
</li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210126190430231-1717036362.png"></p>
<ul>
<li><p>数据可以也从文件读入，这里直接写了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    time = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">19</span>)]</span><br><span class="line">    number = [<span class="number">9.6</span>, <span class="number">18.3</span>, <span class="number">29</span>, <span class="number">47.2</span>, <span class="number">71.1</span>, <span class="number">119.1</span>, <span class="number">174.6</span>,</span><br><span class="line">              <span class="number">257.3</span>, <span class="number">350.7</span>, <span class="number">441.0</span>, <span class="number">513.3</span>, <span class="number">559.7</span>, <span class="number">594.8</span>,</span><br><span class="line">              <span class="number">629.4</span>, <span class="number">640.8</span>, <span class="number">651.1</span>, <span class="number">655.9</span>, <span class="number">659.6</span>, <span class="number">661.8</span>]</span><br><span class="line">    plt.title(<span class="string">&#x27;Relationship between time and number&#x27;</span>)  <span class="comment"># 创建标题</span></span><br><span class="line">    plt.xlabel(<span class="string">&#x27;time&#x27;</span>)  <span class="comment"># X轴标签</span></span><br><span class="line">    plt.ylabel(<span class="string">&#x27;number&#x27;</span>)  <span class="comment"># Y轴标签</span></span><br><span class="line">    plt.scatter(time, number)</span><br><span class="line">    plt.plot(time, number)  <span class="comment"># 画图</span></span><br><span class="line">    plt.show()  <span class="comment"># 显示</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210126191447722-1250708994.png" style="zoom:80%;">

</li>
</ul>
<img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210126191835753-994528864.png" style="zoom: 33%;">



<ul>
<li>Δp：因为横坐标间隔是1，所以相邻纵坐标之差可以当成增速</li>
<li>665是极限总群数量</li>
<li>要求的是k,然后预测下一年</li>
<li>需要修改的是4，17，18行，如果不只是算下一年，那要改40，46行</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">Max = <span class="number">665</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取相邻纵坐标的差值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_delta</span>(<span class="params">y_num: <span class="built_in">list</span></span>):</span></span><br><span class="line">    delta_y = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(y_num) - <span class="number">1</span>):</span><br><span class="line">        delta_y.append(y_num[i + <span class="number">1</span>] - y_num[i])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> delta_y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    time = [_ <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">19</span>)]</span><br><span class="line">    number = [<span class="number">9.6</span>, <span class="number">18.3</span>, <span class="number">29</span>, <span class="number">47.2</span>, <span class="number">71.1</span>, <span class="number">119.1</span>, <span class="number">174.6</span>,</span><br><span class="line">              <span class="number">257.3</span>, <span class="number">350.7</span>, <span class="number">441.0</span>, <span class="number">513.3</span>, <span class="number">559.7</span>, <span class="number">594.8</span>,</span><br><span class="line">              <span class="number">629.4</span>, <span class="number">640.8</span>, <span class="number">651.1</span>, <span class="number">655.9</span>, <span class="number">659.6</span>, <span class="number">661.8</span>]</span><br><span class="line"></span><br><span class="line">    plt.title(<span class="string">&#x27;Relationship between time and number&#x27;</span>)  <span class="comment"># 创建标题</span></span><br><span class="line">    plt.xlabel(<span class="string">&#x27;time&#x27;</span>)  <span class="comment"># X轴标签</span></span><br><span class="line">    plt.ylabel(<span class="string">&#x27;number&#x27;</span>)  <span class="comment"># Y轴标签</span></span><br><span class="line">    plt.scatter(time, number)</span><br><span class="line">    plt.plot(time, number)  <span class="comment"># 画图</span></span><br><span class="line">    <span class="comment"># plt.show()  # 显示， 注释掉后，实际曲线和预测曲线泛在同一个图里面对比</span></span><br><span class="line"></span><br><span class="line">    delta_p = get_delta(number)</span><br><span class="line">    number.pop(-<span class="number">1</span>)</span><br><span class="line">    pn = np.array(number)</span><br><span class="line">    f = pn * (Max - pn)</span><br><span class="line">    res = np.polyfit(f, delta_p, <span class="number">1</span>)</span><br><span class="line">    print(res)</span><br><span class="line">    print(<span class="string">&#x27;k = &#x27;</span>, res[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 预测</span></span><br><span class="line">    p0 = number[<span class="number">0</span>]</span><br><span class="line">    p_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(time) + <span class="number">1</span>):</span><br><span class="line">        p_list.append(p0)</span><br><span class="line">        p0 = res[<span class="number">0</span>] * (Max - p0) * p0 + p0</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;time&#x27;</span>)  <span class="comment"># X轴标签</span></span><br><span class="line">    plt.ylabel(<span class="string">&#x27;number&#x27;</span>)  <span class="comment"># Y轴标签</span></span><br><span class="line">    plt.title(<span class="string">&#x27;Prediction&#x27;</span>)  <span class="comment"># 创建标题</span></span><br><span class="line">    plt.scatter([_ <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(time) + <span class="number">1</span>)], p_list, c=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    plt.plot(p_list)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ 0.00081448 -0.30791574]</span><br><span class="line">k &#x3D;  0.0008144797937893836</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>




<img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210126200256933-2071649500.png" style="zoom:80%;">







<h2 id="显式差分"><a href="#显式差分" class="headerlink" title="显式差分"></a>显式差分</h2><ul>
<li>热传导方程，见<a href="https://www.bilibili.com/video/BV12h411d7Dm?p=8">https://www.bilibili.com/video/BV12h411d7Dm?p=8</a></li>
</ul>
<h2 id="马尔科夫链"><a href="#马尔科夫链" class="headerlink" title="马尔科夫链"></a>马尔科夫链</h2><h4 id="选举投票预测"><a href="#选举投票预测" class="headerlink" title="选举投票预测"></a>选举投票预测</h4><ul>
<li><p>马尔科夫链是由具有以下性质的一系列事件构成的过程： </p>
<ul>
<li><p>一个事件有有限多个结果，称为状态，该过程总是这些状态中的一个； </p>
</li>
<li><p>在过程的每个阶段或者时段，一个特定的结果可以从它现在的状态转移到任何状态，或者保持原状； </p>
</li>
<li><p>每个阶段从一个状态转移到其他状态的概率用一个转移矩阵表示，矩阵每行的各元素在0到1之间，每行的和为1。</p>
</li>
</ul>
</li>
<li><p>选举投票趋势预测 </p>
<ul>
<li><p>以美国大选为例，首先取得过去十次选举的历史数据，然后根据历史数据得到选民意向的转移矩阵，转移矩阵如下</p>
<img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210126201527059-1102395362.png" style="zoom:70%;">
</li>
<li><p>比如，当前状态的共和党转移到下一状态的共和党的概率是0.75，以此类推</p>
<p>即如下关系：</p>
<img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210126201916793-1556439911.png" style="zoom: 50%;">
</li>
<li><p>然后我们可以构造出差分表达式(共和党R，民主党D，独立候选人I)：</p>
<p>也就是下个状态等于前一个状态的所有可能之和</p>
<img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210126202109626-1562639525.png" style="zoom: 50%;">
</li>
<li><p>通过求解差分方程组，预测出选民投票意向的长期趋势</p>
<ul>
<li><p>plt.annotate是标记文本，如</p>
<figure class="highlight plain"><figcaption><span>xy</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line"></span><br><span class="line">    RLIST &#x3D; [1 &#x2F; 3]</span><br><span class="line">    DLIST &#x3D; [1 &#x2F; 3]</span><br><span class="line">    ILIST &#x3D; [1 &#x2F; 3]</span><br><span class="line">    for i in range(40):</span><br><span class="line">        R &#x3D; RLIST[i] * 0.75 + DLIST[i] * 0.20 + ILIST[i] * 0.40</span><br><span class="line">        RLIST.append(R)</span><br><span class="line">        D &#x3D; RLIST[i] * 0.05 + DLIST[i] * 0.60 + ILIST[i] * 0.20</span><br><span class="line">        DLIST.append(D)</span><br><span class="line">        I &#x3D; RLIST[i] * 0.20 + DLIST[i] * 0.20 + ILIST[i] * 0.40</span><br><span class="line">        ILIST.append(I)</span><br><span class="line">        plt.plot(RLIST)</span><br><span class="line">        plt.plot(DLIST)</span><br><span class="line">        plt.plot(ILIST)</span><br><span class="line">        plt.xlabel(&#39;Time&#39;)</span><br><span class="line">        plt.ylabel(&#39;Voting percent&#39;)</span><br><span class="line">        plt.annotate(&#39;DemocraticParty&#39;, xy&#x3D;(5, 0.2))</span><br><span class="line">        plt.annotate(&#39;RepublicanParty&#39;, xy&#x3D;(5, 0.5))</span><br><span class="line">        plt.annotate(&#39;IndependentCandidate&#39;, xy&#x3D;(5, 0.25))</span><br><span class="line">        plt.show()</span><br><span class="line">        print(RLIST, DLIST, ILIST)</span><br><span class="line"></span><br><span class="line">    print(&#39;预测的最后一年：RLIST: &#123;&#125;, DLIST: &#123;&#125;, ILIST: &#123;&#125;&#39;.format(RLIST[-1], DLIST[-1], ILIST[-1]))</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>遍历画出每一年，这是最后一年的图</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line">......</span><br><span class="line">预测的最后一年：RLIST: 0.5555555555483689, DLIST: 0.1944444444516318, ILIST: 0.2500000000000002</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210126203544341-212524774.png" style="zoom:80%;">

<ul>
<li><p>最后得到的长期趋势是： </p>
<p>56%的人选共和党、 </p>
<p>19%的人选民主党、 </p>
<p>25%的人选独立候选人</p>
</li>
</ul>
</li>
</ul>
<h1 id="灰色与模糊"><a href="#灰色与模糊" class="headerlink" title="灰色与模糊"></a>灰色与模糊</h1><h2 id="多层模糊评价"><a href="#多层模糊评价" class="headerlink" title="多层模糊评价"></a>多层模糊评价</h2><ul>
<li>见资料</li>
</ul>
<h2 id="模糊c均值聚类"><a href="#模糊c均值聚类" class="headerlink" title="模糊c均值聚类"></a>模糊c均值聚类</h2><ul>
<li>原理见资料</li>
<li>聚类的算法实现参考我之前sklearn里面的聚类算法实现就行了</li>
</ul>
<h2 id="灰色预测-经典常用"><a href="#灰色预测-经典常用" class="headerlink" title="灰色预测(经典常用)"></a>灰色预测(经典常用)</h2><ul>
<li><p>灰色预测是用灰色模式GM(1,1)来进行定量分析的，通常分为以下几类： </p>
<ul>
<li><p>灰色时间序列预测。用等时距观测到的反映预测对象特征的一系列数量（如产量、销量、人口数量、存款数量、利率等）构造灰色预测模型，预测未来某一时刻的特征量，或者达到某特征量的时间。 </p>
</li>
<li><p>畸变预测（灾变预测）。通过模型预测异常值出现的时刻，预测异常值什么时候出现在特定时区内。 </p>
</li>
<li><p>波形预测，或拓扑预测，通过灰色模型预测事物未来变动的轨迹。 </p>
</li>
<li><p>系统预测，对系统行为特征指标建立一族相互关联的灰色预测理论模型，在预测系统整体变化的同时，预测系统各个环节的变化。 </p>
</li>
</ul>
</li>
<li><p>上述灰色预测方法的共同特征是： </p>
<ul>
<li><p><strong>允许少数据预测</strong>； </p>
</li>
<li><p>允许对灰因果律实践进行预测，例如： </p>
<ul>
<li><p>灰因白果律事件：粮食生产预测(就是结果产量是已知的，中间受什么因素影响是未知的)</p>
</li>
<li><p>白因灰果律事件：开放项目前景预测(过程已知，但是结果前景未知)</p>
</li>
</ul>
</li>
<li><p>具有可检验性（事前检验：建模可行性级比检验；模型检验：建模精度检验； </p>
</li>
</ul>
<p>预测检验：预测滚动检验）</p>
</li>
</ul>
<ul>
<li>模型理论部分见资料或者网上看</li>
</ul>
<h3 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h3><ul>
<li><p>要使用灰色预测模型，首先看看适不适用</p>
</li>
<li><p>如果级比都落在可容覆盖范围内，就直接用</p>
<p>否则做平移变换</p>
</li>
</ul>
<img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210127004120044-586264331.png" style="zoom: 50%;">

<img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210127004905362-1976707119.png" style="zoom: 67%;">



<ul>
<li>代码部分是可以使用cuda加速的</li>
<li>只需改87行的输入数据和93行的预测个数m</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch <span class="keyword">as</span> th</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GM</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 判断是否可用 gpu 编程 , 大量级计算使用GPU</span></span><br><span class="line">        self._is_gpu = <span class="literal">False</span>  <span class="comment"># th.cuda.is_available()</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span>(<span class="params">self, dt: <span class="built_in">list</span> <span class="keyword">or</span> np.ndarray</span>):</span></span><br><span class="line">        self._df: th.Tensor = th.from_numpy(np.array(dt, dtype=np.float32))</span><br><span class="line">        <span class="keyword">if</span> self._is_gpu:</span><br><span class="line">            self._df.cuda()</span><br><span class="line">        self._n: <span class="built_in">int</span> = <span class="built_in">len</span>(self._df)</span><br><span class="line">        self._x, self._max_value = self._sigmod(self._df)</span><br><span class="line">        z: th.Tensor = self._next_to_mean(th.cumsum(self._x, dim=<span class="number">0</span>))</span><br><span class="line">        self.coef: th.Tensor = self._coefficient(self._x, z)</span><br><span class="line">        <span class="keyword">del</span> z</span><br><span class="line">        self._x0: th.Tensor = self._x[<span class="number">0</span>]</span><br><span class="line">        self._pre: th.Tensor = self._pred()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 归一化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_sigmod</span>(<span class="params">self, x: th.Tensor</span>):</span></span><br><span class="line">        _maxv: th.Tensor = th.<span class="built_in">max</span>(x)</span><br><span class="line">        <span class="keyword">return</span> th.div(x, _maxv), _maxv</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算紧邻均值数列</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_next_to_mean</span>(<span class="params">self, x_1: th.Tensor</span>):</span></span><br><span class="line">        z: th.Tensor = th.zeros(self._n - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> self._is_gpu:</span><br><span class="line">            z.cuda()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, self._n):  <span class="comment"># 下标从0开始，取不到最大值</span></span><br><span class="line">            z[i - <span class="number">1</span>] = <span class="number">0.5</span> * x_1[i] + <span class="number">0.5</span> * x_1[i - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> z</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算系数 a,b</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_coefficient</span>(<span class="params">self, x: th.Tensor, z: th.Tensor</span>):</span></span><br><span class="line">        B: th.Tensor = th.stack((-<span class="number">1</span> * z, th.ones(self._n - <span class="number">1</span>)), dim=<span class="number">1</span>)</span><br><span class="line">        Y: th.Tensor = th.tensor(x[<span class="number">1</span>:], dtype=th.float32).reshape((-<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">if</span> self._is_gpu:</span><br><span class="line">            B.cuda()</span><br><span class="line">            Y.cuda()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 返回的是a和b的向量转置，第一个是a 第二个是b；</span></span><br><span class="line">        <span class="keyword">return</span> th.matmul(th.matmul(th.inverse(th.matmul(B.t(), B)), B.t()), Y)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_pred</span>(<span class="params">self, start: <span class="built_in">int</span> = <span class="number">1</span>, end: <span class="built_in">int</span> = <span class="number">0</span></span>):</span></span><br><span class="line">        les: <span class="built_in">int</span> = self._n + end</span><br><span class="line">        resut: th.Tensor = th.zeros(les)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self._is_gpu:</span><br><span class="line">            resut.cuda()</span><br><span class="line">        resut[<span class="number">0</span>] = self._x0</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, les):</span><br><span class="line">            resut[i] = (self._x0 - (self.coef[<span class="number">1</span>] / self.coef[<span class="number">0</span>])) * \</span><br><span class="line">                       (<span class="number">1</span> - th.exp(self.coef[<span class="number">0</span>])) * th.exp(-<span class="number">1</span> * self.coef[<span class="number">0</span>] * (i))</span><br><span class="line">        <span class="keyword">del</span> les</span><br><span class="line">        <span class="keyword">return</span> resut</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算绝对误差</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">confidence</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">round</span>((th.<span class="built_in">sum</span>(th.<span class="built_in">abs</span>(th.div((self._x - self._pre), self._x))) / self._n).item(), <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 预测个数，默认个数大于等于0，</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span>(<span class="params">self, m: <span class="built_in">int</span> = <span class="number">1</span>, decimals: <span class="built_in">int</span> = <span class="number">4</span></span>):</span></span><br><span class="line">        y_pred: th.Tensor = th.mul(self._pre, self._max_value)</span><br><span class="line">        y_pred_ = th.zeros(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> m &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;预测个数需大于等于0&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> m &gt; <span class="number">0</span>:</span><br><span class="line">            y_pred_: th.Tensor = self._pred(self._n, m)[-m:].mul(self._max_value)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> self._is_gpu:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> _: <span class="built_in">round</span>(_, decimals), y_pred.cpu().numpy().tolist()))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> _: <span class="built_in">round</span>(_, decimals), y_pred.numpy().tolist()))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># cat 拼接 0 x水平拼接，1y垂直拼接</span></span><br><span class="line">        result: th.Tensor = th.cat((y_pred, y_pred_), dim=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">del</span> y_pred, y_pred_</span><br><span class="line">        <span class="keyword">if</span> self._is_gpu:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> _: <span class="built_in">round</span>(_, decimals), result.cpu().numpy().tolist()))</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> _: <span class="built_in">round</span>(_, decimals), result.numpy().tolist()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ls = np.arange(<span class="number">91</span>, <span class="number">100</span>, <span class="number">2</span>)  <span class="comment"># ls是原始的值</span></span><br><span class="line">    print(<span class="built_in">type</span>(ls))</span><br><span class="line">    gm = GM()</span><br><span class="line">    gm.fit(ls)</span><br><span class="line">    print(<span class="string">&#x27;绝对误差: &#x27;</span>, gm.confidence())</span><br><span class="line">    print(<span class="string">&#x27;原始值: &#x27;</span>, ls)</span><br><span class="line">    print(<span class="string">&#x27;预测: &#x27;</span>, gm.predict(m=<span class="number">2</span>))  <span class="comment"># m是2代表要预测后面两个值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;class &#39;numpy.ndarray&#39;&gt;</span><br><span class="line">绝对误差:  0.0002</span><br><span class="line">原始值:  [91 93 95 97 99]</span><br><span class="line">预测:  [91.0, 93.0178, 94.9758, 96.9751, 99.0164, 101.1007, 103.2289]</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>


<h1 id="蒙特卡罗"><a href="#蒙特卡罗" class="headerlink" title="蒙特卡罗"></a>蒙特卡罗</h1><h2 id="蒙特卡罗算法"><a href="#蒙特卡罗算法" class="headerlink" title="蒙特卡罗算法"></a>蒙特卡罗算法</h2><ul>
<li><p>由冯.诺依曼提出来的</p>
</li>
<li><p>蒙特·卡罗(Monte Carlo method)又称统计模拟方法，一种以概率统计理论为指导的数值计算方法。是指使用随机数(或者伪随机数)来解决很多计算问题的方法。</p>
</li>
<li><p>基本思想</p>
<p>当所求解问题是某种随机事件出现的概率，或者是某个随机变量的期望值时，通过某种“实验”的方法，以这种事件出现的频率估计这一随机事件的概率，或者得到这个随机变量的某些数字特征，并将其作为问题的解。</p>
</li>
</ul>
<h4 id="举例-6"><a href="#举例-6" class="headerlink" title="举例"></a>举例</h4><ul>
<li><p><strong>蒙特卡罗方法求圆周率</strong> </p>
<p>基本思想：在图中区域产生足够多的随机数点，然后计算落在圆内的点的个数与总个数的比值再乘以4，就是圆周率。</p>
<img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210127142359134-1130879298.png" style="zoom: 67%;">
</li>
<li><p>random.random()得到的是0到1之间的(伪)随机数，若要某个整数范围，则用random.randint(a, b)，是有包括a和b的</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    M = <span class="built_in">input</span>(<span class="string">&#x27;请输入一个较大的整数&#x27;</span>)</span><br><span class="line">    N = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(M)):</span><br><span class="line">        x = random.random()</span><br><span class="line">        y = random.random()</span><br><span class="line">        <span class="keyword">if</span> math.sqrt(x ** <span class="number">2</span> + y ** <span class="number">2</span>) &lt; <span class="number">1</span>:</span><br><span class="line">            N += <span class="number">1</span></span><br><span class="line">            pi = <span class="number">4</span> * N / <span class="built_in">int</span>(M)</span><br><span class="line">            <span class="comment"># print(pi)</span></span><br><span class="line">    print(pi)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">请输入一个较大的整数9999999</span><br><span class="line">3.1417339141733915</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>


<ul>
<li><p><strong>蒙特卡罗求定积分</strong></p>
<p>利用python计算函数y=x**2在[0,1]区间的定积分 </p>
<p>基本思想：和上例相似</p>
<p><img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210127145751634-1347413778.png"></p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">求f(x) = x^2的定积分</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入一个较大的整数:&#x27;</span>))</span><br><span class="line">    m = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        x = random.random()</span><br><span class="line">        y = random.random()</span><br><span class="line">        <span class="keyword">if</span> y &lt; x ** <span class="number">2</span>:  <span class="comment"># 找到落在f(x)下面的点</span></span><br><span class="line">            m += <span class="number">1</span></span><br><span class="line">    R = m / n <span class="comment"># 这里因为总面积是1所以省略乘以1了</span></span><br><span class="line">    print(R)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">请输入一个较大的整数:999999</span><br><span class="line">0.33292533292533294</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>


<h2 id="三门问题"><a href="#三门问题" class="headerlink" title="三门问题"></a>三门问题</h2><ul>
<li><p>背景</p>
<p>三门问题（Monty Hall probelm）亦称为蒙提霍尔问题，出自美国电视游戏节目Let’s Make a Deal。参赛者会看见三扇关闭了的门，其中一扇的后面有一辆汽车，选中后面有车的那扇门可赢得该汽车，另外两扇门则各藏有一只山羊。当参赛者选定了一扇门，但未去开启它的时候，节目主持人开启剩下两扇门的其中一扇，露出其中一只山羊。主持人其后问参赛者要不要换另一扇仍然关上的门。问题是：换另一扇门是否会增加参赛者赢得汽车的几率？如果严格按照上述条件，即主持人清楚地知道，自己打开的那扇门后面是羊，那么答案是会。不换门的话，赢得汽车的几率是1/3,换门的话，赢得汽车的几率是2/3</p>
</li>
<li><p>应用蒙特卡罗重点在使用随机数来模拟类似于赌博问题的赢率问题，通过多次模拟得到所要计算值的模拟值</p>
</li>
<li><p>解决思路：</p>
<p>在三门问题中，用0、1、2分代表三扇门的编号，在[0,2]之间随机生成一个整数代表奖品所在门的编号prize，再次在[0,2]之间随机生成一个整数代表参赛者所选择的门的编号guess。用变量change代表游戏中的换门(true)与不换门(false)</p>
<img src="https://img2020.cnblogs.com/blog/2134757/202101/2134757-20210127152448229-250150715.png" style="zoom:80%;">





</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play</span>(<span class="params">change</span>):</span></span><br><span class="line">    prize = random.randint(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">    guess = random.randint(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> prize == guess:</span><br><span class="line">        <span class="keyword">if</span> change:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> change:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">winRate</span>(<span class="params">change, N</span>):</span></span><br><span class="line">    win = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, N):</span><br><span class="line">        <span class="keyword">if</span> play(change):</span><br><span class="line">            win = win + <span class="number">1</span></span><br><span class="line">            <span class="comment"># print(&#x27;中奖率为: &#x27;)</span></span><br><span class="line">            <span class="comment"># print(win / N)</span></span><br><span class="line">    print(<span class="string">&#x27;中奖率为: &#x27;</span>)</span><br><span class="line">    print(win / N)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    N = <span class="number">100000</span></span><br><span class="line">    print(<span class="string">&#x27;玩&#x27;</span> + <span class="built_in">str</span>(N) + <span class="string">&#x27;次，每一次都换门:&#x27;</span>)</span><br><span class="line">    winRate(<span class="literal">True</span>, N)</span><br><span class="line">    print()</span><br><span class="line">    print(<span class="string">&#x27;玩&#x27;</span> + <span class="built_in">str</span>(N) + <span class="string">&#x27;次，每一次都不换门:&#x27;</span>)</span><br><span class="line">    winRate(<span class="literal">False</span>, N)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">玩100000次，每一次都换门:</span><br><span class="line">中奖率为: </span><br><span class="line">0.66748</span><br><span class="line"></span><br><span class="line">玩100000次，每一次都不换门:</span><br><span class="line">中奖率为: </span><br><span class="line">0.33008</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<h2 id="巧克力豆问题"><a href="#巧克力豆问题" class="headerlink" title="巧克力豆问题"></a>巧克力豆问题</h2><ul>
<li>见资料</li>
</ul>
<h1 id="时间序列"><a href="#时间序列" class="headerlink" title="时间序列"></a>时间序列</h1><ul>
<li><p>时序问题也可使用神经网络里面的LSTM(长短时记忆)</p>
</li>
<li><p>预测的是近期的，不是预测长远的(长远预测需要挖掘更多特征，深度学习那块的)</p>
</li>
<li><p>均方差：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line">rms = sqrt(mean_squared_error(test, pred))<span class="comment"># 把实际和预测的放进去</span></span><br><span class="line">print(rms)</span><br></pre></td></tr></table></figure></li>
<li><p>见<a href="https://www.bilibili.com/video/BV12h411d7Dm?p=10">https://www.bilibili.com/video/BV12h411d7Dm?p=10</a></p>
</li>
</ul>
<h2 id="简单指数平滑法"><a href="#简单指数平滑法" class="headerlink" title="简单指数平滑法"></a>简单指数平滑法</h2><ul>
<li>导入数据</li>
<li>切分数据</li>
<li>代码适当修改和测试</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> statsmodels.tsa.api <span class="keyword">import</span> SimpleExpSmoothing</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    df = pd.read_csv(<span class="string">&#x27;train.csv&#x27;</span>)</span><br><span class="line">    train = df[<span class="number">0</span>:<span class="number">10392</span>]</span><br><span class="line">    test = df[<span class="number">10392</span>:]</span><br><span class="line">    pred = test.copy()</span><br><span class="line">    fit = SimpleExpSmoothing(np.asarray(train[<span class="string">&#x27;列名1&#x27;</span>])).fit(smoothing_level=<span class="number">0.6</span>, optimized=<span class="literal">False</span>)</span><br><span class="line">    pred[<span class="string">&#x27;列名2&#x27;</span>] = fit.forecast(<span class="built_in">len</span>(test))  <span class="comment"># 需要预测多长</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 画出来</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">16</span>, <span class="number">8</span>))</span><br><span class="line">    plt.plot(train[<span class="string">&#x27;列名1&#x27;</span>], label=<span class="string">&#x27;Train&#x27;</span>)</span><br><span class="line">    plt.plot(test[<span class="string">&#x27;列名1&#x27;</span>], label=<span class="string">&#x27;Test&#x27;</span>)</span><br><span class="line">    plt.plot(pred[<span class="string">&#x27;列名2&#x27;</span>], label=<span class="string">&#x27;列名2&#x27;</span>)</span><br><span class="line">    plt.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评估</span></span><br><span class="line">    rms = sqrt(mean_squared_error(test[<span class="string">&#x27;列名1&#x27;</span>], pred))</span><br><span class="line">    print(rms)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="霍尔特线性趋势法"><a href="#霍尔特线性趋势法" class="headerlink" title="霍尔特线性趋势法"></a><strong>霍尔特线性趋势法</strong></h2><ul>
<li><p>考虑到数据集变化趋势的方法就叫做霍尔特线性趋势法，任何呈现某种趋势(比如商上升趋势)的数据集都可以用霍尔特线性趋势法用于预测</p>
</li>
<li><p>先看看是否呈现某种趋势</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> statsmodels.api <span class="keyword">as</span> sm sm.tsa.seasonal_decompose(train[<span class="string">&#x27;xxx&#x27;</span>]).plot() </span><br><span class="line">result = sm.tsa.stattools.adfuller(train[<span class="string">&#x27;xxx&#x27;</span>]) </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<ul>
<li>如果是的话就可以使用</li>
</ul>
</li>
<li><p>代码相对上面只需改动这两句，其他适当改即可</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> statsmodels.tsa.api <span class="keyword">import</span> Holt</span><br><span class="line">fit = Holt(np.asarray(train[<span class="string">&#x27;xxx&#x27;</span>])).fit(smoothing_level=<span class="number">0.3</span>, smoothing_slope=<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure>


<h2 id="Holt-Winters季节性预测模型"><a href="#Holt-Winters季节性预测模型" class="headerlink" title="Holt-Winters季节性预测模型"></a>Holt-Winters季节性预测模型</h2><ul>
<li>体现在季节性<ul>
<li>比如一个水果店的销售情况，在夏季收入远高于其他季节</li>
</ul>
</li>
<li>只需改变一点代码,选择了seasonal_period=7作为每周重复数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> statsmodels.tsa.api <span class="keyword">import</span> ExponentialSmoothing</span><br><span class="line">fit1 = ExponentialSmoothing(np.asarray(train[<span class="string">&#x27;xxx&#x27;</span>]), seasonal_periods=<span class="number">7</span>, trend=<span class="string">&#x27;add&#x27;</span>, seasonal=<span class="string">&#x27;add&#x27;</span>, ).fit()</span><br></pre></td></tr></table></figure>


<h2 id="自回归移动平均模型（ARIMA）"><a href="#自回归移动平均模型（ARIMA）" class="headerlink" title="自回归移动平均模型（ARIMA）"></a><strong>自回归移动平均模型（ARIMA）</strong></h2><ul>
<li>指数平滑模型都是基于数据中的趋势和季节性的描述，而自回归移动平均模型的目标是描述数据中彼此之间的关系。ARIMA的一个优化版就是季节性ARIMA。它像Holt-Winters季节性预测模型一样，也把数据集的季节性考虑在内。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> statsmodels.api <span class="keyword">as</span> sm</span><br><span class="line">pred = test.copy() </span><br><span class="line">fit1 = sm.tsa.statespace.SARIMAX(train.xxx, order=(<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>), seasonal_order=(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>)).fit() pred[<span class="string">&#x27;SARIMA&#x27;</span>]=fit1.predict(start=<span class="string">&quot;20xx-xx-xx&quot;</span>,end=<span class="string">&quot;20xx-xx- xx&quot;</span>,dynamic=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li><p>参考：<a href="https://www.bilibili.com/video/BV12h411d7Dm?p=12">https://www.bilibili.com/video/BV12h411d7Dm?p=12</a></p>
</li>
<li><p>时间序列最后都要评估一下</p>
</li>
</ul>
<h1 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h1><ul>
<li>见之前的资料sklearn</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">clf = svm.SVC(C=<span class="number">0.8</span>, kernel=<span class="string">&#x27;rbf&#x27;</span>, gamma=<span class="number">20</span>, decision_function_shape=<span class="string">&#x27;ovr&#x27;</span>)</span><br><span class="line">clf.fit(x_train, y_train.ravel())</span><br></pre></td></tr></table></figure>
<ul>
<li><p>调参，参数见资料</p>
</li>
<li><p><a href="https://github.com/JimouChen/python-application/blob/master/PythonLearning/MathematicalModeling/note.md">我的更新</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>Python数学建模</tag>
      </tags>
  </entry>
</search>
